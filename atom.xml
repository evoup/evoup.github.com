<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Evoup`s Blog]]></title>
  <link href="http://evoupsight.com/atom.xml" rel="self"/>
  <link href="http://evoupsight.com/"/>
  <updated>2013-11-05T14:10:39+08:00</updated>
  <id>http://evoupsight.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[freebsd下安装vmware-tool]]></title>
    <link href="http://evoupsight.com/blog/2013/11/05/freebsd-install-vmware-tool/"/>
    <updated>2013-11-05T13:22:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/11/05/freebsd-install-vmware-tool</id>
    <content type="html"><![CDATA[<p>公司自建的vmware虚拟机，每当中餐回来后，由于系统处理待机状态莫名其妙地会比当前时间慢一段时间，导致server端保存数据的时间戳滞后。怎么解决呢？</p>

<!-- more -->


<h3>消极的方法</h3>

<p>首先可以尝试加上ntpdate自动来同步，不过这个方法比较死。</p>

<p>在crontab内加入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>*/15  *   *   *   *   *   root   ntpdate 210.72.145.44
</span></code></pre></td></tr></table></div></figure>


<p>以及在/etc/rc.conf中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">ntpdate_enable</span><span class="o">=</span><span class="s2">&quot;YES&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>积极的方法</h3>

<p>通过安装vmware-tool来一劳永逸的解决。那么我们如何在freebsd中安装vmware-tool呢？</br>
首先需要点击vmware的菜单VM &ndash;> Install VMware Tools</br>
vmware-tool是一个perl脚本，先要安装好perl。然后要准备好compat6x-amd64安装包才能继续。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /usr/port/dist
</span><span class='line'>sudo fetch ftp://ftp5.tw.freebsd.org/BSD/FreeBSD/ports/amd64/packages-8-current/Latest/compat6x-amd64.tbz
</span><span class='line'>sudo pkg_add compat6x-amd64.tbz
</span><span class='line'>*******************************************************************************
</span><span class='line'>*                                                                             *
</span><span class='line'>* Do not forget to add COMPAT_FREEBSD6 into                                   *
</span><span class='line'>* your kernel configuration <span class="o">(</span>enabled by default<span class="o">)</span>.                             *
</span><span class='line'>*                                                                             *
</span><span class='line'>* To configure and recompile your kernel see:                                 *
</span><span class='line'>* http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/kernelconfig.html *
</span><span class='line'>*                                                                             *
</span><span class='line'>*******************************************************************************
</span></code></pre></td></tr></table></div></figure>


<p>安装依赖库后，切换到root后，执行如下指令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mount /cdrom
</span><span class='line'><span class="nb">cd</span> /tmp
</span><span class='line'>tar xzpf /cdrom/vmware-freebsd-tools.tar.gz
</span><span class='line'><span class="nb">cd </span>vmware-tools-distrib
</span><span class='line'>./vmware-install.pl
</span></code></pre></td></tr></table></div></figure>


<p>这样vmware-tool就搞定了。
最后为了保险起先，关闭系统后，编辑.vmx文件
加上下面的时间同步的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tools.syncTime <span class="o">=</span> <span class="s2">&quot;TRUE&quot;</span>
</span><span class='line'>time.synchronize.continue <span class="o">=</span> <span class="s2">&quot;TRUE&quot;</span>
</span><span class='line'>time.synchronize.restore <span class="o">=</span> <span class="s2">&quot;TRUE&quot;</span>
</span><span class='line'>time.synchronize.resume.disk <span class="o">=</span> <span class="s2">&quot;TRUE&quot;</span>
</span><span class='line'>time.synchronize.shrink <span class="o">=</span> <span class="s2">&quot;TRUE&quot;</span>
</span><span class='line'>time.synchronize.tools.startup <span class="o">=</span> <span class="s2">&quot;TRUE&quot;</span>
</span><span class='line'>time.synchronize.tools.enable <span class="o">=</span> <span class="s2">&quot;TRUE&quot;</span>
</span><span class='line'>time.synchronize.resume.host <span class="o">=</span> <span class="s2">&quot;TRUE&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考链接</p>

<p><a href="http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1189">http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1189</a>
<a href="http://www.neko6.tk/archives/1067">http://www.neko6.tk/archives/1067</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HBASE完全分布式搭建(VMware版)]]></title>
    <link href="http://evoupsight.com/blog/2013/11/04/hbase-full-distributed-case/"/>
    <updated>2013-11-04T16:28:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/11/04/hbase-full-distributed-case</id>
    <content type="html"><![CDATA[<p>接上一篇<a href="http://evoupsight.com/blog/2013/11/04/hadoop-full-distributed-case/">《HADOOP完全分布式搭建(VMware版)》</a></p>

<p>参考 <a href="http://www.cnblogs.com/flyoung2008/archive/2011/12/02/2272761.html">http://www.cnblogs.com/flyoung2008/archive/2011/12/02/2272761.html</a></p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /u01/app
</span><span class='line'>tar xzf hbase-0.90.6.tgz
</span><span class='line'>ln -s hbase-0.90.6 hbase
</span><span class='line'><span class="nb">cd </span>hbase/conf
</span></code></pre></td></tr></table></div></figure>


<p>编辑hbase-env.sh</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">HBASE_OPTS</span><span class="o">=</span><span class="s2">&quot;-ea -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>/usr/java/jdk1.6.0_29
</span><span class='line'><span class="nb">export </span><span class="nv">HBASE_MANAGES_ZK</span><span class="o">=</span><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意HADOOP_HOME和HBASE_HOME已经在~/.profile中指定，不需要再设置了。</p>

<p>编辑hbase-site.xml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span>
</span><span class='line'><span class="c">&lt;!--</span>
</span><span class='line'><span class="c">/**</span>
</span><span class='line'><span class="c"> * Copyright 2010 The Apache Software Foundation</span>
</span><span class='line'><span class="c"> *</span>
</span><span class='line'><span class="c"> * Licensed to the Apache Software Foundation (ASF) under one</span>
</span><span class='line'><span class="c"> * or more contributor license agreements.  See the NOTICE file</span>
</span><span class='line'><span class="c"> * distributed with this work for additional information</span>
</span><span class='line'><span class="c"> * regarding copyright ownership.  The ASF licenses this file</span>
</span><span class='line'><span class="c"> * to you under the Apache License, Version 2.0 (the</span>
</span><span class='line'><span class="c"> * &quot;License&quot;); you may not use this file except in compliance</span>
</span><span class='line'><span class="c"> * with the License.  You may obtain a copy of the License at</span>
</span><span class='line'><span class="c"> *</span>
</span><span class='line'><span class="c"> *     http://www.apache.org/licenses/LICENSE-2.0</span>
</span><span class='line'><span class="c"> *</span>
</span><span class='line'><span class="c"> * Unless required by applicable law or agreed to in writing, software</span>
</span><span class='line'><span class="c"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
</span><span class='line'><span class="c"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
</span><span class='line'><span class="c"> * See the License for the specific language governing permissions and</span>
</span><span class='line'><span class="c"> * limitations under the License.</span>
</span><span class='line'><span class="c"> */</span>
</span><span class='line'><span class="c">--&gt;</span>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>hbase.rootdir<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>hdfs://mdn2.net:9024/hbase<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>hbase.cluster.distributed<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>hbase.master<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>mdn2.net:60000<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>hbase.zookeeper.quorum<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>mdn2.net,mdn2_datanode1.net,mdn2_datanode2.net<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意点：
 1.其中首先需要注意hdfs://mdn2.net:9024/hbase这里，必须与你的Hadoop集群的core-site.xml文件配置保持完全一致才行，如果你Hadoop的hdfs使用了其它端口，请在这里也修改。再者就是Hbase该项并不识别机器IP，只能使用机器hostname才可行，即若使用IP是会抛出java错误。
 2.hbase.zookeeper.quorum 的个数必须是奇数。</p>

<p>修改regionservers文件（同hadoop的slaves文件）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mdn2_datanode1.net
</span><span class='line'>mdn2_datanode2.net
</span></code></pre></td></tr></table></div></figure>


<p>然后分发到各点，就可以启动了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bin/start hbase
</span><span class='line'>bin/hbase shell
</span></code></pre></td></tr></table></div></figure>


<p>报错
ERROR: org.apache.hadoop.hbase.ZooKeeperConnectionException: HBase is able to connect to ZooKeeper but the connection closes immediately. This could be a sign that the server has too many connections (30 is the default). Consider inspecting your ZK server logs for that error and then make sure you are reusing HBaseConfiguration as often as you can. See HTable&rsquo;s javadoc for more information.
看来不要使用hbase托管的zookeeper转而再装一个试试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.4/zookeeper-3.4.4.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>编辑~/.profile,加入关于zk环境变量的设置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">ZOOKEEPER_HOME</span><span class="o">=</span><span class="s2">&quot;/u01/app/zookeeper/&quot;</span>
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span><span class="nv">$ZOOKEEPER_HOME</span>/bin:<span class="nv">$PATH</span>
</span><span class='line'><span class="nb">export </span>PATH
</span><span class='line'><span class="nb">cd</span> /u01/app/zookeeper/conf
</span><span class='line'>cp zoo_sample.cfg zoo.cfg
</span><span class='line'><span class="nb">cd</span> ../bin
</span><span class='line'>./zkServer.sh start
</span></code></pre></td></tr></table></div></figure>


<p>最后重启整个hadoop/hbase搞定，jps看下跑的进程。收工。</p>

<p><img src="http://evoupsight.com/images/evoup/hbase_vmware.png" alt="Alt text" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HADOOP完全分布式搭建(VMware版)]]></title>
    <link href="http://evoupsight.com/blog/2013/11/04/hadoop-full-distributed-case/"/>
    <updated>2013-11-04T15:28:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/11/04/hadoop-full-distributed-case</id>
    <content type="html"><![CDATA[<p>vmware版本8.0.4 build-744019
首先准备3台虚拟机</p>

<p><img src="http://evoupsight.com/images/evoup/hadoop_vmware.png" alt="Alt text" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ,''''''''''''':'''''''''''''''''':'''''''''''''''''''''''''''''''''''|
</span><span class='line'> |    usage    |        IP        |             Hostname              |
</span><span class='line'> |             |                  |                                   |
</span><span class='line'> |'''''''''''''|''''''''''''''''''|'''''''''''''''''''''''''''''''''''|
</span><span class='line'> | namenode    | 192.168.174.132  |           mdn2.net                |
</span><span class='line'> |             |                  |                                   |
</span><span class='line'> |'''''''''''''|''''''''''''''''''|'''''''''''''''''''''''''''''''''''|
</span><span class='line'> | datanode01  | 192.168.174.135  |        mdn2_datanode1.net         |
</span><span class='line'> |             |                  |                                   |
</span><span class='line'> |'''''''''''''|''''''''''''''''''|'''''''''''''''''''''''''''''''''''|
</span><span class='line'> | datanode02  | 192.168.174.136  |        mdn2_datanode2.net         |
</span><span class='line'> |             |                  |                                   |
</span><span class='line'>  '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''</span></code></pre></td></tr></table></div></figure>


<p> <!-- more --></p>

<p>Ps:
为节省资源关闭点不必要的服务</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="k">for </span>SERVICES in abrtd acpid auditd avahi-daemon cpuspeed haldaemon mdmonitor messagebus udev-post;
</span><span class='line'><span class="k">do</span> /sbin/chkconfig <span class="k">${</span><span class="nv">SERVICES</span><span class="k">}</span> off;
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h3>准备工作</h3>

<p>先安装JDK1.6
linux:先把已经安装的openjdk卸载,安装sun jdk1.6 （j2se就够了）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#rpm -qa | grep jdk</span>
</span><span class='line'>java-1.6.0-openjdk-1.6.0.0-1.28.1.10.9.el5_8
</span><span class='line'><span class="c">#rpm -e java-1.6.0-openjdk-1.6.0.0-1.28.1.10.9.el5_8</span>
</span><span class='line'><span class="c">#sudo chmod +x jdk-6u35-linux-x64-rpm.bin</span>
</span><span class='line'><span class="c">#./jdk-6u35-linux-x64-rpm.bin</span>
</span></code></pre></td></tr></table></div></figure>


<p>freebsd:直接在/usr/port/java/diablo-jdk16，不要装jdk16，打好几个补丁还编译通不过，浪费时间！）</p>

<p>hadoop所有操作都是用hadoop帐号，下面添加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>linux:# groupadd hadoop
</span><span class='line'>freebsd:# pw groupadd hadoop
</span><span class='line'>linux:# useradd -r -g hadoop -d /home/hadoop -m -s /bin/bash hadoop
</span><span class='line'>freebsd:# pw adduser hadoop -g hadoop -d /home/hadoop -m -s /bin/bash
</span><span class='line'>
</span><span class='line'>all:# mkdir -p /u01/app
</span><span class='line'>all:# chgrp -R hadoop /u01/app
</span><span class='line'>all:# chown -R hadoop /u01/app
</span></code></pre></td></tr></table></div></figure>


<p>环境变量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>all:<span class="nv">$ </span>vi ~/.profile
</span><span class='line'>all:export <span class="nv">HADOOP_HOME</span><span class="o">=</span>/u01/app/hadoop
</span><span class='line'>all:export <span class="nv">HBASE_HOME</span><span class="o">=</span>/u01/app/hbase
</span></code></pre></td></tr></table></div></figure>


<p>进行免密码的ssh登录设置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-keygen -t dsa -P <span class="s1">&#39;&#39;</span> -f ~/.ssh/id_dsa
</span><span class='line'>cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys
</span><span class='line'>chmod 600 ~/.ssh/authorized_keys
</span></code></pre></td></tr></table></div></figure>


<p>到此准备工作完成</p>

<p>安装Hadoop</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>all:<span class="nv">$ </span><span class="nb">cd</span> /u01/app
</span><span class='line'>all:<span class="nv">$ </span>tar zxf hadoop-0.20.203.0rc1.tar.gz
</span><span class='line'>all:<span class="nv">$ </span>ln -s hadoop-0.20.203.0 hadoop
</span></code></pre></td></tr></table></div></figure>


<h3>正式开始</h3>

<p>编辑所有机器的/etc/hosts文件（host的centos下为/etc/sysconfig/network，bsd的要设置/etc/rc.conf）
(PS:也可以选择现在namenode上编辑好了，分发到其他机器上去)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Do not remove the following line, or various programs</span>
</span><span class='line'><span class="c"># that require network functionality will fail.</span>
</span><span class='line'>
</span><span class='line'>127.0.0.1       localhost.localdomain localhost
</span><span class='line'>::1             localhost6.localdomain6 localhost6
</span><span class='line'>192.168.174.132 mdn2.net
</span><span class='line'>192.168.174.135 mdn2_datanode1.net
</span><span class='line'>192.168.174.136 mdn2_datanode2.net
</span></code></pre></td></tr></table></div></figure>


<p>假定已经安装好了JAVA，编辑hadoop帐号的profile文件加入如下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">HADOOP_HOME</span><span class="o">=</span>/u01/app/hadoop
</span><span class='line'><span class="nb">export </span><span class="nv">HBASE_HOME</span><span class="o">=</span>/u01/app/hbase
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/usr/java/jdk1.6.0_37/bin/:$PATH&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span><span class="s2">&quot;/usr/java/jdk1.6.0_37/bin/&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>下载hadoop解压之后，在hadoop-env.sh指定java的目录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>/usr/java/jdk1.6.0_37/
</span></code></pre></td></tr></table></div></figure>


<p>再编辑core-site.xml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- Put site-specific property overrides in this file. --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>fs.default.name<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>hdfs://mdn2.net:9024<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>hadoop.tmp.dir<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>/u01/app/hadoopTmp<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：hadoop.tmp.dir是hadoop文件系统依赖的基础配置，很多路径都依赖它。它默认的位置是在/tmp/{$user}下面，在local和hdfs都会建有相同的目录，但是在/tmp路径下的存储是不安全的，因为linux一次重启，文件就可能被删除。导致namenode启动不起来。</p>

<p>再编辑hdfs-site.xml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- Put site-specific property overrides in this file. --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>dfs.replication<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>1<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>dfs.data.dir<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>/u01/app/hdfsdata<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：dfs.data.dir为hdfs实际存放数据的路径，这个配置只对本地有效，中间可以用,连接多个目录</p>

<p>master里</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mdn2.net
</span></code></pre></td></tr></table></div></figure>


<p>slaves里</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mdn2_datanode1.net
</span><span class='line'>mdn2_datanode2.net
</span></code></pre></td></tr></table></div></figure>


<p>注意点：
修改hadoop-0.20.203.0/bin下的hadoop.
vi  hadoop
查找 –jvm . vi 下的命令模式： :/-jvm
将-jvm server改成 –server .
因为JDK1.6已经废除了一个参数-jvm,如果不修改的话，无法启动数据节点。</p>

<p>到namenode上格式化hdfs</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/bin/hadoop namenode -format
</span></code></pre></td></tr></table></div></figure>


<p>注意9024为hdfs通讯端口，完全分布式环境下，可以直接将防火墙关闭</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /etc/init.d/iptables stop
</span><span class='line'>sudo /sbin/chkconfig iptables off
</span></code></pre></td></tr></table></div></figure>


<p>启动：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bin/start-all.sh
</span></code></pre></td></tr></table></div></figure>


<p>或者只启动dfs和mapreduce</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bin/start-dfs.sh
</span><span class='line'>bin/start-mapred.sh
</span></code></pre></td></tr></table></div></figure>


<p>最后发一个jps的进程图</p>

<p><img src="http://evoupsight.com/images/evoup/hadoop_vmware01.png" alt="Alt text" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[erlang open_port 错误之error enoent]]></title>
    <link href="http://evoupsight.com/blog/2013/11/04/erlang-open-port-error-enoent/"/>
    <updated>2013-11-04T11:04:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/11/04/erlang-open-port-error-enoent</id>
    <content type="html"><![CDATA[<p>今天在另外一台机器上部署新写的服务端，运行后程序崩溃，最后发现erlang的find_executable的没有找到程序。</p>

<h3>问题重现：</h3>

<!-- more -->


<p>在open_port处，查看日志报错如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">[</span><span class="n">rrddir</span> <span class="n">ok</span><span class="p">]</span><span class="err">^</span>
</span><span class='line'><span class="p">[</span><span class="nv">ResRrd</span><span class="p">:{</span><span class="n">error</span><span class="p">,{</span><span class="n">enoent</span><span class="p">,[{</span><span class="n">erlang</span><span class="p">,</span><span class="nb">open_port</span><span class="p">,</span>
</span><span class='line'>                                <span class="p">[{</span><span class="n">spawn_executable</span><span class="p">,</span><span class="s">&quot;/usr/local/bin/rrdtool&quot;</span><span class="p">},</span><span class="err">^</span>
</span><span class='line'>                                 <span class="p">[{</span><span class="n">line</span><span class="p">,</span><span class="mi">1024</span><span class="p">},{</span><span class="n">args</span><span class="p">,[</span><span class="s">&quot;-&quot;</span><span class="p">]}]],</span><span class="err">^</span>
</span><span class='line'>                                <span class="p">[]},</span><span class="err">^</span><span class="nv">M</span>
</span><span class='line'>                        <span class="p">{</span><span class="n">rrdtool</span><span class="p">,</span><span class="n">init</span><span class="p">,</span><span class="mi">1</span><span class="p">,[{</span><span class="n">file</span><span class="p">,</span><span class="s">&quot;src/rrdtool.erl&quot;</span><span class="p">},{</span><span class="n">line</span><span class="p">,</span><span class="mi">83</span><span class="p">}]},</span>
</span><span class='line'>                        <span class="p">{</span><span class="n">gen_server</span><span class="p">,</span><span class="n">init_it</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="err">^</span><span class="nv">M</span>
</span><span class='line'>                                    <span class="p">[{</span><span class="n">file</span><span class="p">,</span><span class="s">&quot;gen_server.erl&quot;</span><span class="p">},{</span><span class="n">line</span><span class="p">,</span><span class="mi">304</span><span class="p">}]},</span>
</span><span class='line'>                        <span class="p">{</span><span class="n">proc_lib</span><span class="p">,</span><span class="n">init_p_do_apply</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>                                  <span class="p">[{</span><span class="n">file</span><span class="p">,</span><span class="s">&quot;proc_lib.erl&quot;</span><span class="p">},{</span><span class="n">line</span><span class="p">,</span><span class="mi">227</span><span class="p">}]}]}}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>怀疑rrdtool-erlang这个库存在bug，移到rrdtool.erl代码处调查问题</p>

<figure class='code'><figcaption><span>rrdtool.erl start:81 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @hidden</span>
</span><span class='line'><span class="nf">init</span><span class="p">([</span><span class="nv">RRDTool</span><span class="p">])</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Port</span> <span class="o">=</span> <span class="nb">open_port</span><span class="p">({</span><span class="n">spawn_executable</span><span class="p">,</span> <span class="nv">RRDTool</span><span class="p">},</span> <span class="p">[{</span><span class="n">line</span><span class="p">,</span> <span class="mi">1024</span><span class="p">},</span> <span class="p">{</span><span class="n">args</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;-&quot;</span><span class="p">]}]),</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Port</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>再定位到上层看gen_server的start函数</p>

<figure class='code'><figcaption><span>rrdtool.erl start:55 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">start</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nn">gen_server</span><span class="p">:</span><span class="nf">start</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="p">[</span><span class="nn">os</span><span class="p">:</span><span class="nf">find_executable</span><span class="p">(</span><span class="s">&quot;rrdtool&quot;</span><span class="p">)],</span> <span class="p">[]).</span>
</span></code></pre></td></tr></table></div></figure>


<p>os:find_executable(&ldquo;rrdtool&rdquo;),这个是用直接找到rrdtool可执行程序的调用，回到系统了输入rrdtool返回</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>RRDtool 1.4.7  Copyright 1997-2012 by Tobias Oetiker &lt;tobi@oetiker.ch&gt;
</span><span class='line'>               Compiled Oct 22 2012 11:33:26
</span><span class='line'>
</span><span class='line'>Usage: rrdtool <span class="o">[</span>options<span class="o">]</span> <span class="nb">command </span>command_options
</span><span class='line'>Valid commands: create, update, updatev, graph, graphv,  dump, restore,
</span><span class='line'>                last, lastupdate, first, info, fetch, tune,
</span><span class='line'>                resize, xport, flushcached
</span><span class='line'>
</span><span class='line'>RRDtool is distributed under the Terms of the GNU General
</span><span class='line'>Public License Version 2. <span class="o">(</span>www.gnu.org/copyleft/gpl.html<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>For more information <span class="nb">read </span>the RRD manpages
</span></code></pre></td></tr></table></div></figure>


<p>已经装好了啊？那为什么还要报错，难道是做了alias</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>yin@yin-arch monitorserver2<span class="o">]</span>&gt;alias rrdtool
</span><span class='line'>/usr/lib64/rrdtool/bin/rrdtool
</span></code></pre></td></tr></table></div></figure>


<p>果不其然</p>

<h3>解决方法</h3>

<p>在/usr/local/bin/目录下做一个软连接</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ln -s /usr/lib64/rrdtool/bin/rrdtool /usr/local/bin/rrdtool
</span></code></pre></td></tr></table></div></figure>


<p>再次运行，enoent问题解决。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用haproxy分单个端口到多个应用]]></title>
    <link href="http://evoupsight.com/blog/2013/10/31/use-haproxy-split-one-port-to-two-servers/"/>
    <updated>2013-10-31T10:57:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/10/31/use-haproxy-split-one-port-to-two-servers</id>
    <content type="html"><![CDATA[<p>今天实验了一下鼎鼎大名号称七层负载均衡的haproxy软件，果然是强得五体投地。如果要对多种协议进行负载均衡的路由到不同的server，haproxy非常合适了。</p>

<!-- more -->


<h3>haproxy的安装</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://haproxy.1wt.eu/download/1.4/src/haproxy-1.4.24.tar.gz
</span><span class='line'>tar xzf haproxy-1.4.24.tar.gz
</span><span class='line'><span class="nb">cd </span>haproxy-1.4.24
</span><span class='line'>gmake <span class="nv">TARGET</span><span class="o">=</span>freebsd
</span><span class='line'>sudo gmake install
</span></code></pre></td></tr></table></div></figure>


<p>配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>global
</span><span class='line'>    maxconn 5120
</span><span class='line'>    chroot /usr/local/haproxy14
</span><span class='line'>    daemon
</span><span class='line'>    quiet
</span><span class='line'>    nbproc 2
</span><span class='line'>    pidfile /usr/local/haproxy14/run/haproxy.pid
</span><span class='line'>
</span><span class='line'>defaults
</span><span class='line'>    timeout connect 5s
</span><span class='line'>    timeout client 50s
</span><span class='line'>    timeout server 20s
</span><span class='line'>    log 127.0.0.1 local3 err <span class="c">#日志级别[err warning info debug]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>listen http
</span><span class='line'>    <span class="nb">bind</span> :8080
</span><span class='line'>    timeout client 1h
</span><span class='line'>    tcp-request inspect-delay 2s
</span><span class='line'>    acl is_http req_proto_http
</span><span class='line'>    tcp-request content accept <span class="k">if </span>is_http
</span><span class='line'>    server server-http :8081
</span><span class='line'>    use_backend tcpserver <span class="k">if</span> !is_http
</span><span class='line'>
</span><span class='line'>backend tcpserver
</span><span class='line'>    mode tcp
</span><span class='line'>    timeout server 1h
</span><span class='line'>    server server-tcp :13081
</span></code></pre></td></tr></table></div></figure>


<p>实现的功能是对8080端口的socket请求，如果判断协议为http则路由到8081，如果为其他未知的tcp协议则路由到13081所在的socket服务器端口。</p>

<h3>参考链接</h3>

<p><a href="http://cbonte.github.io/haproxy-dconv/configuration-1.4.html">http://cbonte.github.io/haproxy-dconv/configuration-1.4.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Freebsd版linux下free指令实现]]></title>
    <link href="http://evoupsight.com/blog/2013/10/30/freebsd-memory-free-c/"/>
    <updated>2013-10-30T16:41:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/10/30/freebsd-memory-free-c</id>
    <content type="html"><![CDATA[<p>监控客户端开发时候用到的代码，github上一个哥么的，发现有处bug我给贡献了，呵呵。</p>

<!-- more -->


<p>直接贴代码了，除了mem_total之外基本都正确。total的部分，先用sysctl -a | grep realmem解决</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * free.c - Display FreeBSD memory information</span>
</span><span class='line'><span class="cm"> * Wed Nov 26 19:34:54 IST 2008 vinod &lt;vinod@segfault.in&gt;</span>
</span><span class='line'><span class="cm"> * License: http://opensource.org/licenses/BSD-2-Clause</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/sysctl.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">version</span> <span class="o">=</span> <span class="s">&quot;$Id: free,v 0.1.3 2008/11/26 19:34:54 IST vinod $&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">get_sysctl</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">mib</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="n">value</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">size_t</span> <span class="n">len</span><span class="p">,</span> <span class="n">miblen</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">name</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">name</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">miblen</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">len</span> <span class="o">=</span> <span class="n">miblen</span><span class="p">;</span>
</span><span class='line'>        <span class="n">sysctlnametomib</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">mib</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'>        <span class="n">len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>        <span class="n">sysctl</span><span class="p">(</span><span class="n">mib</span><span class="p">,</span> <span class="n">miblen</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">usage</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;usage: free [-b|-k|-m|-g] [-t] [-v]</span><span class="se">\n</span><span class="s">&quot;</span> \
</span><span class='line'>        <span class="s">&quot;  -b,-k,-m,-g show output in bytes, KB, MB, or GB</span><span class="se">\n</span><span class="s">&quot;</span> \
</span><span class='line'>        <span class="s">&quot;  -t display logical summary for RAM</span><span class="se">\n</span><span class="s">&quot;</span> \
</span><span class='line'>        <span class="s">&quot;  -v display version information and exit</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">c</span><span class="p">,</span> <span class="n">vflag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tflag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">factor</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">long</span> <span class="kt">int</span> <span class="n">physmem</span><span class="p">,</span> <span class="n">realmem</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">long</span> <span class="kt">int</span> <span class="n">vmactive</span><span class="p">,</span> <span class="n">vminactive</span><span class="p">,</span> <span class="n">vmfree</span><span class="p">,</span> <span class="n">vmcache</span><span class="p">,</span> <span class="n">vmpage</span><span class="p">,</span> <span class="n">vmwire</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">long</span> <span class="kt">int</span> <span class="n">memfree</span><span class="p">,</span> <span class="n">memused</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">long</span> <span class="kt">int</span> <span class="n">pagesize</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">opterr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">((</span><span class="n">c</span> <span class="o">=</span> <span class="n">getopt</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="s">&quot;bghkmtv&quot;</span><span class="p">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">switch</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">case</span> <span class="sc">&#39;b&#39;</span>:
</span><span class='line'>                                <span class="n">factor</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">case</span> <span class="sc">&#39;g&#39;</span>:
</span><span class='line'>                                <span class="n">factor</span> <span class="o">=</span> <span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                        <span class="k">case</span> <span class="sc">&#39;h&#39;</span>:
</span><span class='line'>                                <span class="n">usage</span><span class="p">();</span>
</span><span class='line'>                                <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_SUCCESS</span><span class="p">);</span>
</span><span class='line'>                        <span class="k">case</span> <span class="sc">&#39;k&#39;</span>:
</span><span class='line'>                                <span class="n">factor</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>
</span><span class='line'>                                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">case</span> <span class="sc">&#39;m&#39;</span>:
</span><span class='line'>                                <span class="n">factor</span> <span class="o">=</span> <span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="p">;</span>
</span><span class='line'>                                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">case</span> <span class="sc">&#39;t&#39;</span>:
</span><span class='line'>                                <span class="n">tflag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">case</span> <span class="sc">&#39;v&#39;</span>:
</span><span class='line'>                                <span class="n">vflag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">case</span> <span class="sc">&#39;?&#39;</span>:
</span><span class='line'>                        <span class="nl">default:</span>
</span><span class='line'>                                <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;%s: invalid option -- %c</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">optopt</span><span class="p">);</span>
</span><span class='line'>                                <span class="n">usage</span><span class="p">();</span>
</span><span class='line'>                                <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">argc</span> <span class="o">-=</span> <span class="n">optind</span><span class="p">;</span>
</span><span class='line'>        <span class="n">argv</span> <span class="o">+=</span> <span class="n">optind</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">vflag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;%s</span><span class="se">\n</span><span class="s">built %s %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">version</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">__DATE__</span><span class="p">,</span> <span class="n">__TIME__</span><span class="p">);</span>
</span><span class='line'>                <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_SUCCESS</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">physmem</span>    <span class="o">=</span> <span class="n">labs</span><span class="p">(</span><span class="n">get_sysctl</span><span class="p">(</span><span class="s">&quot;hw.physmem&quot;</span><span class="p">));</span>
</span><span class='line'>        <span class="n">realmem</span>    <span class="o">=</span> <span class="n">labs</span><span class="p">(</span><span class="n">get_sysctl</span><span class="p">(</span><span class="s">&quot;hw.realmem&quot;</span><span class="p">));</span>
</span><span class='line'>        <span class="n">pagesize</span>   <span class="o">=</span> <span class="n">labs</span><span class="p">(</span><span class="n">get_sysctl</span><span class="p">(</span><span class="s">&quot;hw.pagesize&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">vmpage</span>     <span class="o">=</span> <span class="n">labs</span><span class="p">(</span><span class="n">get_sysctl</span><span class="p">(</span><span class="s">&quot;vm.stats.vm.v_page_count&quot;</span><span class="p">)</span> <span class="o">*</span> <span class="n">pagesize</span><span class="p">);</span>
</span><span class='line'>        <span class="n">vmwire</span>     <span class="o">=</span> <span class="n">labs</span><span class="p">(</span><span class="n">get_sysctl</span><span class="p">(</span><span class="s">&quot;vm.stats.vm.v_wire_count&quot;</span><span class="p">)</span> <span class="o">*</span> <span class="n">pagesize</span><span class="p">);</span>
</span><span class='line'>        <span class="n">vmactive</span>   <span class="o">=</span> <span class="n">labs</span><span class="p">(</span><span class="n">get_sysctl</span><span class="p">(</span><span class="s">&quot;vm.stats.vm.v_active_count&quot;</span><span class="p">)</span> <span class="o">*</span> <span class="n">pagesize</span><span class="p">);</span>
</span><span class='line'>        <span class="n">vminactive</span> <span class="o">=</span> <span class="n">labs</span><span class="p">(</span><span class="n">get_sysctl</span><span class="p">(</span><span class="s">&quot;vm.stats.vm.v_inactive_count&quot;</span><span class="p">)</span> <span class="o">*</span> <span class="n">pagesize</span><span class="p">);</span>
</span><span class='line'>        <span class="n">vmcache</span>    <span class="o">=</span> <span class="n">labs</span><span class="p">(</span><span class="n">get_sysctl</span><span class="p">(</span><span class="s">&quot;vm.stats.vm.v_cache_count&quot;</span><span class="p">)</span> <span class="o">*</span> <span class="n">pagesize</span><span class="p">);</span>
</span><span class='line'>        <span class="n">vmfree</span>     <span class="o">=</span> <span class="n">labs</span><span class="p">(</span><span class="n">get_sysctl</span><span class="p">(</span><span class="s">&quot;vm.stats.vm.v_free_count&quot;</span><span class="p">)</span> <span class="o">*</span> <span class="n">pagesize</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;         %15s %15s %15s %15s %15s %15s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;total&quot;</span><span class="p">,</span> <span class="s">&quot;active&quot;</span><span class="p">,</span> <span class="s">&quot;free&quot;</span><span class="p">,</span> <span class="s">&quot;inactive&quot;</span><span class="p">,</span> <span class="s">&quot;wire&quot;</span><span class="p">,</span> <span class="s">&quot;cached&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Memory:  %15ld %15ld %15ld %15ld %15ld %15ld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">realmem</span><span class="o">/</span><span class="n">factor</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">vmactive</span><span class="o">/</span><span class="n">factor</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">vmfree</span><span class="o">/</span><span class="n">factor</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">vminactive</span><span class="o">/</span><span class="n">factor</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">vmwire</span><span class="o">/</span><span class="n">factor</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">vmcache</span><span class="o">/</span><span class="n">factor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * logical summary</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">tflag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">memfree</span> <span class="o">=</span> <span class="n">vminactive</span> <span class="o">+</span> <span class="n">vmfree</span> <span class="o">+</span> <span class="n">vmcache</span><span class="p">;</span>
</span><span class='line'>                <span class="n">memused</span>        <span class="o">=</span> <span class="n">realmem</span> <span class="o">-</span> <span class="n">memfree</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Summary: %15ld %15ld %15ld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">realmem</span><span class="o">/</span><span class="n">factor</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">memused</span><span class="o">/</span><span class="n">factor</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">memfree</span><span class="o">/</span><span class="n">factor</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">EXIT_SUCCESS</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>项目位置</h3>

<p><a href="https://github.com/evoup/free">https://github.com/evoup/free</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mochiweb下调用rrdtool graph命令绘制类似ganglia的load的图表]]></title>
    <link href="http://evoupsight.com/blog/2013/10/28/mochiweb-write-pretty-rrdtool-graphic/"/>
    <updated>2013-10-28T16:41:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/10/28/mochiweb-write-pretty-rrdtool-graphic</id>
    <content type="html"><![CDATA[<p>今天做rrdtool图表，发现ganglia的图表还是不错的，我就一个一个来模仿，先从one minute load开始。通过mochiweb在restful接口直接出图。</p>

<!-- more -->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">webapi_func_graph</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;include/inc.hrl&quot;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">compile</span><span class="p">(</span><span class="n">export_all</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nb">get</span><span class="p">(</span><span class="nv">Selector</span><span class="p">,</span><span class="nv">Req</span><span class="p">,</span><span class="nv">Key</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Method</span><span class="o">=</span><span class="nv">Req</span><span class="p">:</span><span class="nb">get</span><span class="p">(</span><span class="n">method</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">QueryStringData</span> <span class="o">=</span> <span class="nv">Req</span><span class="p">:</span><span class="nf">parse_qs</span><span class="p">(),</span>
</span><span class='line'>    <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;[req:</span><span class="si">~p</span><span class="s">][qsd:</span><span class="si">~p</span><span class="s">]</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,[</span><span class="nv">Req</span><span class="p">,</span><span class="nv">QueryStringData</span><span class="p">]),</span>
</span><span class='line'>    <span class="nv">StartTs</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="s">&quot;start&quot;</span><span class="p">,</span> <span class="nv">QueryStringData</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">EndTs</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="s">&quot;end&quot;</span><span class="p">,</span> <span class="nv">QueryStringData</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">Width</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="s">&quot;w&quot;</span><span class="p">,</span> <span class="nv">QueryStringData</span><span class="p">,</span> <span class="s">&quot;705&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">Height</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="s">&quot;h&quot;</span><span class="p">,</span> <span class="nv">QueryStringData</span><span class="p">,</span> <span class="s">&quot;245&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;[M:</span><span class="si">~p</span><span class="s">][F:get][A:</span><span class="si">~p</span><span class="s">][M:</span><span class="si">~p</span><span class="s">][K:</span><span class="si">~p</span><span class="s">][start:</span><span class="si">~p</span><span class="s">][end:</span><span class="si">~p</span><span class="s">][width:</span><span class="si">~p</span><span class="s">][height:</span><span class="si">~p</span><span class="s">]</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,[</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span><span class="nv">Selector</span><span class="p">,</span><span class="nv">Method</span><span class="p">,</span><span class="nv">Key</span><span class="p">,</span><span class="nv">StartTs</span><span class="p">,</span><span class="nv">EndTs</span><span class="p">,</span><span class="nv">Width</span><span class="p">,</span><span class="nv">Height</span><span class="p">]),</span>
</span><span class='line'>    <span class="k">case</span> <span class="nv">Selector</span> <span class="k">of</span>
</span><span class='line'>        <span class="s">&quot;@self&quot;</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nv">FileName</span><span class="o">=</span><span class="s">&quot;/tmp/myLoad_&quot;</span><span class="o">++</span><span class="nb">integer_to_list</span><span class="p">(</span><span class="nn">erlang</span><span class="p">:</span><span class="nb">phash2</span><span class="p">(</span><span class="n">make_ref</span><span class="p">()))</span><span class="o">++</span><span class="s">&quot;.png&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nv">AvgLoad</span><span class="o">=</span> <span class="nn">os</span><span class="p">:</span><span class="nf">cmd</span><span class="p">(</span><span class="s">&quot;/usr/local/bin/rrdtool fetch /services/rrds/&quot;</span><span class="o">++</span><span class="nv">Key</span><span class="o">++</span><span class="s">&quot;/load.rrd AVERAGE --start &quot;</span><span class="o">++</span><span class="nv">StartTs</span><span class="o">++</span><span class="s">&quot; --end &quot;</span><span class="o">++</span>
</span><span class='line'>                <span class="nv">EndTs</span><span class="o">++</span><span class="s">&quot; | awk &#39;BEGIN {ORS=</span><span class="se">\&quot;\&quot;</span><span class="s">} {sum+=$2} END {print sum/NR}&#39;&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="nv">AverageLoad</span><span class="o">=</span><span class="nb">list_to_float</span><span class="p">(</span><span class="nv">AvgLoad</span><span class="p">),</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;[average load:</span><span class="si">~p</span><span class="s">]</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,[</span><span class="nv">AverageLoad</span><span class="p">]),</span>
</span><span class='line'>            <span class="k">case</span> <span class="nv">AverageLoad</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="k">of</span>
</span><span class='line'>                <span class="n">true</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="nv">AverageLoad</span> <span class="o">&gt;</span> <span class="mi">10</span> <span class="k">of</span>
</span><span class='line'>                        <span class="n">true</span> <span class="o">-&gt;</span>
</span><span class='line'>                            <span class="nv">BColor</span><span class="o">=</span><span class="s">&quot;FF9966&quot;</span><span class="p">;</span>
</span><span class='line'>                        <span class="n">false</span> <span class="o">-&gt;</span>
</span><span class='line'>                            <span class="nv">BColor</span><span class="o">=</span><span class="s">&quot;E2ECFF&quot;</span>
</span><span class='line'>                    <span class="k">end</span><span class="p">;</span>
</span><span class='line'>                <span class="p">_</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="nv">BColor</span><span class="o">=</span><span class="s">&quot;CCFF99&quot;</span>
</span><span class='line'>            <span class="k">end</span><span class="p">,</span>
</span><span class='line'>            <span class="nn">os</span><span class="p">:</span><span class="nf">cmd</span><span class="p">(</span><span class="s">&quot;/usr/local/bin/rrdtool graph &quot;</span><span class="o">++</span><span class="nv">FileName</span><span class="o">++</span><span class="s">&quot; --lazy --start &quot;</span><span class="o">++</span><span class="nv">StartTs</span><span class="o">++</span><span class="s">&quot; --end &quot;</span><span class="o">++</span><span class="nv">EndTs</span><span class="o">++</span><span class="s">&quot;  --title </span><span class="se">\&quot;</span><span class="s">One Minute Load Average &quot;</span><span class="o">++</span><span class="nv">Key</span><span class="o">++</span><span class="s">&quot; last hour</span><span class="se">\&quot;</span><span class="s"> --width &quot;</span><span class="o">++</span><span class="nv">Width</span><span class="o">++</span><span class="s">&quot; --height &quot;</span><span class="o">++</span><span class="nv">Height</span><span class="o">++</span><span class="s">&quot; DEF:load=/services/rrds/&quot;</span><span class="o">++</span><span class="nv">Key</span><span class="o">++</span><span class="s">&quot;/load.rrd:load:AVERAGE AREA:load#4A4A4A:load GPRINT:load:LAST:</span><span class="se">\&quot;</span><span class="s"> Current</span><span class="se">\\</span><span class="s">:%8.2lf %s</span><span class="se">\&quot;</span><span class="s">  GPRINT:load:AVERAGE:</span><span class="se">\&quot;</span><span class="s">Average</span><span class="se">\\</span><span class="s">:%8.2lf %s</span><span class="se">\\</span><span class="s">n</span><span class="se">\&quot;</span><span class="s">  GPRINT:load:MAX:</span><span class="se">\&quot;</span><span class="s">Maximum</span><span class="se">\\</span><span class="s">:%8.2lf %s</span><span class="se">\&quot;</span><span class="s"> GPRINT:load:MIN:</span><span class="se">\&quot;</span><span class="s">Minimum</span><span class="se">\\</span><span class="s">:%8.2lf %s</span><span class="se">\&quot;</span><span class="s"> -c BACK#&quot;</span><span class="o">++</span><span class="nv">BColor</span><span class="p">),</span>
</span><span class='line'>            <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Data</span><span class="p">}</span> <span class="o">=</span> <span class="nn">file</span><span class="p">:</span><span class="nf">read_file</span><span class="p">(</span><span class="nv">FileName</span><span class="p">),</span>
</span><span class='line'>            <span class="nn">file</span><span class="p">:</span><span class="nf">delete</span><span class="p">(</span><span class="nv">FileName</span><span class="p">),</span>
</span><span class='line'>            <span class="p">{</span><span class="s">&quot;Content-type: image/png&quot;</span><span class="p">,</span><span class="nv">Data</span><span class="p">};</span>
</span><span class='line'>        <span class="p">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;[other]</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意点，我没有使用rrdcgi这个东西是因为，手册上没有说可以直接输出二进制文件流，第二即使可以用，mochiweb也没有cgi的接口可以对接。
访问我的restful接口<a href="http://192.168.216.145/mmsapi2.0beta/get/graph/@self/yin-arch_ac101eb8?start=1382927568&amp;end=1382944644&amp;w=395&amp;h=141">http://192.168.216.145/mmsapi2.0beta/get/graph/@self/yin-arch_ac101eb8?start=1382927568&amp;end=1382944644&amp;w=395&amp;h=141</a></p>

<p>最后出图像下面一样的图了。当平均load大于10背景呈现红色（代表严重），大于2为蓝色，其余绿色。计算平均load我使用了rrdtoo fetch这个指令，此外还要注意在/tmp目录生成好随机名图片，用完了之后得删除，这个也是惯用方法。其余的请参阅rrdtool graph和rrdtool fetch命令的说明。
<img src="http://evoupsight.com/images/evoup/yin-arch_ac101eb8_load.png" alt="Alt text" /></p>

<p>参考链接：
<a href="http://man.lupaworld.com/content/manage/ringkee/awk.htm">http://man.lupaworld.com/content/manage/ringkee/awk.htm</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配置nginx支持rrdcgi]]></title>
    <link href="http://evoupsight.com/blog/2013/10/25/nginx-with-rrdcgi/"/>
    <updated>2013-10-25T17:27:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/10/25/nginx-with-rrdcgi</id>
    <content type="html"><![CDATA[<p>开始在web界面上加载监控图表了，用rrdrool graph生成图，但是发现只能够生成。于是想当然地试了一下rrdcgi，本以为能够出图，结果还是创建图片，html来加载图片。最后发现ganglia的图表中居然也是先提取在临时目录生成好的图片，然后用php来生成头，最后再删除图片。不过顺便把nginx下配置CGI程序的知识学会了，权且记一笔。</p>

<!-- more -->


<h3>RRDCGI的使用</h3>

<p>首先是编写graph.cgi</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/local/bin/rrdcgi</span>
</span><span class='line'> &lt;RRD::GRAPH
</span><span class='line'>      /services/cgi-bin/load.png
</span><span class='line'>      --imginfo <span class="s1">&#39;&lt;IMG SRC=/rrdgraph/%s WIDTH=%lu HEIGHT=%lu &gt;&#39;</span>
</span><span class='line'>      --lazy --title<span class="o">=</span><span class="s2">&quot;load&quot;</span>
</span><span class='line'>      --start 1382666836 --end 1382677047
</span><span class='line'>      --width 705 --height 245
</span><span class='line'>      --alt-autoscale
</span><span class='line'>          DEF:load<span class="o">=</span>/services/rrds/yin-arch_ac101eb8/load.rrd:load:AVERAGE
</span><span class='line'>          HRULE:1#ff0000:<span class="s2">&quot;warning value&quot;</span>
</span><span class='line'>      AREA:load#3d3d3d:load&gt;
</span></code></pre></td></tr></table></div></figure>


<p>语法基本和rrdgraph的差不多，没什么好说的，这样等等会生成出来一个html代码叫做</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;IMG</span> <span class="na">SRC=</span><span class="s">/rrdgraph/load.png</span> <span class="na">WIDTH=</span><span class="s">786</span> <span class="na">HEIGHT=</span><span class="s">324</span> <span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先在webroot下创建一个软连接rrdgraph，成的图片的src所指向rrdgraph文件夹，其实是个软连接，指向路径为/services/cgi-bin/
这么做是为了在nginx配置方便。</p>

<p>要怎么在shell中直接验证能出图呢？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo rrdcgi graph.cgi &lt; /dev/null
</span><span class='line'><span class="o">(</span>offline mode: enter <span class="nv">name</span><span class="o">=</span>value pairs on standard input<span class="o">)</span>
</span><span class='line'>Content-Type: text/html
</span><span class='line'>Content-Length: 53
</span><span class='line'>
</span><span class='line'> &lt;IMG <span class="nv">SRC</span><span class="o">=</span>/rrdgraph/load.png <span class="nv">WIDTH</span><span class="o">=</span>786 <span class="nv">HEIGHT</span><span class="o">=</span>324 &gt;
</span></code></pre></td></tr></table></div></figure>


<p>很明显这样子是得到了load.png这个图片文件。然后把这个cgi文件移到/services/cgi-bin/目录下待机。</p>

<h3>nginx的对rrdcgi支持的配置</h3>

<p>首先需要安装好perl，还需要用到以下库：（以下版本可能过旧，直接到CPAN的网站搜索安装）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://www.cpan.org/modules/by-module/FCGI/FCGI-0.67.tar.gz
</span><span class='line'>tar -zxf FCGI-0.67.tar.gz
</span><span class='line'><span class="nb">cd </span>FCGI-0.67
</span><span class='line'>perl Makefile.PL
</span><span class='line'>make <span class="o">&amp;&amp;</span> make install
</span><span class='line'><span class="nb">cd</span> ..
</span><span class='line'>
</span><span class='line'>wget http://search.cpan.org/CPAN/authors/id/G/GB/GBJK/FCGI-ProcManager-0.18.tar.gz
</span><span class='line'>tar -zxf FCGI-ProcManager-0.18.tar.gz
</span><span class='line'><span class="nb">cd </span>FCGI-ProcManager-0.18
</span><span class='line'>perl Makefile.PL
</span><span class='line'>make <span class="o">&amp;&amp;</span> make install
</span><span class='line'><span class="nb">cd</span> ..
</span><span class='line'>
</span><span class='line'>wget http://search.cpan.org/CPAN/authors/id/I/IN/INGY/IO-All-0.39.tar.gz
</span><span class='line'>tar zxf IO-All-0.39.tar.gz
</span><span class='line'><span class="nb">cd </span>IO-All-0.39
</span><span class='line'>perl Makefile.PL
</span><span class='line'>make <span class="o">&amp;&amp;</span> make install
</span></code></pre></td></tr></table></div></figure>


<p>安装 nginx-fcgi 脚本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://hily.me/blog/wp-content/uploads/2010/01/nginx-fcgi.txt
</span><span class='line'>
</span><span class='line'>mv nginx-fcgi.txt /usr/sbin/nginx-fcgi
</span><span class='line'>
</span><span class='line'>chmod +x /usr/sbin/nginx-fcgi
</span></code></pre></td></tr></table></div></figure>


<p>如果不用 sudo 方式运行 nginx-fcgi，请注释掉 nginx-fcgi 脚本中的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> <span class="o">(</span> <span class="nv">$&gt;</span> <span class="o">==</span> “0″ <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>print “<span class="se">\n\t</span>ERROR<span class="se">\t</span>Running as a root!<span class="se">\n</span>”;
</span><span class='line'>print “<span class="se">\t</span>Suggested not to <span class="k">do </span>so !!!<span class="se">\n\n</span>”;
</span><span class='line'><span class="nb">exit </span>1;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>启动 nginx-fcgi：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo nginx-fcgi -l /var/log/nginx/nginx-fcgi.log -pid /var/run/nginx-fcgi.pid -S /var/run/nginx-fcgi.sock
</span></code></pre></td></tr></table></div></figure>


<p>注意一定要为 socket 添加 nginx 帐户的权限，否则 cgi 会执行失败。
新建 nginx-fcgi 脚本指令配置，直接从 fastcgi_params 复制模板：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp /etc/nginx/fastcgi_params /etc/nginx/nginx_fcgi_params
</span></code></pre></td></tr></table></div></figure>


<p>去除尾部的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># PHP only, required if PHP was built with –enable-force-cgi-redirect</span>
</span><span class='line'>fastcgi_param  REDIRECT_STATUS    200;
</span></code></pre></td></tr></table></div></figure>


<p>最后的cgi站点配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    location / <span class="o">{</span>
</span><span class='line'>        root   /webroot;
</span><span class='line'>        index  index.html index.htm;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    location ~ ^/cgi-bin/.*<span class="se">\.</span>cgi<span class="err">$</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        fastcgi_index  index.cgi;
</span><span class='line'>        fastcgi_param  SCRIPT_FILENAME    /services<span class="nv">$fastcgi_script_name</span>;
</span><span class='line'>        include        nginx_fcgi_params;
</span><span class='line'>        fastcgi_read_timeout    5m;
</span><span class='line'>        fastcgi_pass   unix:/var/run/nginx-fcgi.sock;
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>重启nginx，访问地址<a href="http://192.168.216.145/cgi-bin/graph.cgi">http://192.168.216.145/cgi-bin/graph.cgi</a></p>

<p>看到已经有图了
<img src="http://evoupsight.com/images/evoup/rrdtool_load_graph2.png" alt="Alt text" /></p>

<h3>参考链接</h3>

<p><a href="http://oss.oetiker.ch/rrdtool/doc/rrdcgi.en.html">http://oss.oetiker.ch/rrdtool/doc/rrdcgi.en.html</a></p>

<p><a href="http://wiki.qpsmtpd.org/doku.php?id=resources:statistics:rrdcgi-sample">http://wiki.qpsmtpd.org/doku.php?id=resources:statistics:rrdcgi-sample</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译rebar项目中单个erlang源文件的vim脚本]]></title>
    <link href="http://evoupsight.com/blog/2013/10/24/erlang-rebar-single-file-compile-with-vim/"/>
    <updated>2013-10-24T12:41:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/10/24/erlang-rebar-single-file-compile-with-vim</id>
    <content type="html"><![CDATA[<p>本人用rebar写程序总免不了rebar complie和rebar generate一番，项目关联比较多整个过程非常慢，这是很令人沮丧的。有没有什么方法能像C语言的makefile一样，只编译需要的文件呢？答案是没有现成的，就我所知rebar没有这么高端的功能去判断哪些文件是变化过的。那就通过其他方式提高生产效率，想到了erlc，单个文件编译是没有什么问题。</p>

<!-- more -->


<p>方法也很EZ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>erlc -o ./ebin foo.erl
</span></code></pre></td></tr></table></div></figure>


<h3>小试牛刀</h3>

<p>于是我如法炮制，初步写出了如下vim脚本。（我的是cshell，如果是bash请把对应的set变量部分改成bash的风格）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s2">&quot;编译当前erlang文件且部署到rebar项目的rel目录的对应位置</span>
</span><span class='line'><span class="s2">map bd :call CompileErlDeploy()&lt;CR&gt;</span>
</span><span class='line'><span class="s2">func! CompileErlDeploy()</span>
</span><span class='line'><span class="s2">  exec &quot;</span>w<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  exec &quot;</span>!erlc -o /tmp %<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  exec &quot;</span>!set <span class="nv">bar</span> <span class="o">=</span> <span class="se">\&quot;</span><span class="sb">`</span>ls apps/<span class="sb">`</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  exec &quot;</span>!mv /tmp/<span class="sb">`</span>basename %&lt;.beam<span class="sb">`</span> rel/<span class="sb">`</span>ls apps/<span class="sb">`</span>/lib/<span class="sb">`</span>ls apps/<span class="sb">`</span>-<span class="sb">`</span>grep vsn apps/<span class="sb">`</span>ls apps/<span class="sb">`</span>/src/<span class="sb">`</span>ls apps/<span class="sb">`</span>.app.src | sed <span class="s1">&#39;s/{vsn, \&quot;//g&#39;</span> | sed <span class="s1">&#39;s/\&quot;},//g&#39;</span><span class="sb">`</span>/ebin/<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  exec &quot;</span>!<span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/rel/<span class="sb">`</span>ls apps/<span class="sb">`</span>/bin/<span class="sb">`</span>ls apps/<span class="sb">`</span> stop<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">endfunc</span>
</span><span class='line'>
</span><span class='line'><span class="s2">map bf :call RunErl()&lt;CR&gt;</span>
</span><span class='line'><span class="s2">func! RunErl()</span>
</span><span class='line'><span class="s2">  exec &quot;</span>!<span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/rel/<span class="sb">`</span>ls apps/<span class="sb">`</span>/bin/<span class="sb">`</span>ls apps/<span class="sb">`</span> start<span class="err">&quot;</span>
</span><span class='line'>endfunct
</span></code></pre></td></tr></table></div></figure>


<p>基本思路是先找到当前文件所在的路径，然后使用erlang的独立编译器erlc直接编译出该文件的beam字节码，最后拷贝到部署目录rel所在的位置，当然部署是有版本的，版本的信息到apps目录下的.app.src的vsn中提取。</p>

<h3>进一步优化</h3>

<p>对CompileErlDeploy合并有：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s2">&quot;编译当前erlang文件且部署到rebar项目的rel目录的对应位置</span>
</span><span class='line'><span class="s2">map bd :call CompileErlDeploy()&lt;CR&gt;</span>
</span><span class='line'><span class="s2">func! CompileErlDeploy()</span>
</span><span class='line'><span class="s2">  exec &quot;</span>w<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  exec &quot;</span>!erlc -o /tmp % <span class="o">&amp;&amp;</span> <span class="nb">set </span><span class="nv">bar</span> <span class="o">=</span> <span class="se">\&quot;</span><span class="sb">`</span>ls apps/<span class="sb">`</span><span class="se">\&quot;</span> <span class="o">&amp;&amp;</span> mv /tmp/<span class="sb">`</span>basename %&lt;.beam<span class="sb">`</span> rel/<span class="sb">`</span>ls apps/<span class="sb">`</span>/lib/<span class="sb">`</span>ls apps/<span class="sb">`</span>-<span class="sb">`</span>grep vsn apps/<span class="o">{</span><span class="nv">$bar</span><span class="o">}</span>/src/<span class="o">{</span><span class="nv">$bar</span><span class="o">}</span>.app.src | sed <span class="s1">&#39;s/{vsn, \&quot;//g&#39;</span> | sed <span class="s1">&#39;s/\&quot;},//g&#39;</span><span class="sb">`</span>/ebin/ <span class="o">&amp;&amp;</span> <span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/rel/<span class="sb">`</span>ls apps/<span class="sb">`</span>/bin/<span class="sb">`</span>ls apps/<span class="sb">`</span> stop<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">endfunc</span>
</span><span class='line'>
</span><span class='line'><span class="s2">map bf :call RunErl()&lt;CR&gt;</span>
</span><span class='line'><span class="s2">func! RunErl()</span>
</span><span class='line'><span class="s2">  exec &quot;</span>!<span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/rel/<span class="sb">`</span>ls apps/<span class="sb">`</span>/bin/<span class="sb">`</span>ls apps/<span class="sb">`</span> start<span class="err">&quot;</span>
</span><span class='line'>endfunct
</span></code></pre></td></tr></table></div></figure>


<h3>使用的方法</h3>

<p>进入rebar项目的根目录，sudo vim apps/项目名/src/源码.erl
随后使用bd即可编译出源码.beam,并且移到rel目录下beam应该的位置,而bf则可以启动该rebar应用程序。
需要注意的是，至少要rebar generate成功生成一次rel目录的文件，对于新建文件时尤其要做这一步，否则替换啥呢：）</p>

<h3>后续</h3>

<p>如果能再加入热部署，整个过程就更加轻松了</p>

<h3>参考链接</h3>

<p><a href="http://www.ibm.com/developerworks/cn/linux/l-vim-script-1/"><a href="http://www.ibm.com/developerworks/cn/linux/l-vim-script-1/">http://www.ibm.com/developerworks/cn/linux/l-vim-script-1/</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[How to]在erlang中使用rrdtool进行监控数据的保存]]></title>
    <link href="http://evoupsight.com/blog/2013/10/23/erlang-with-rrdtool/"/>
    <updated>2013-10-23T15:12:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/10/23/erlang-with-rrdtool</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>项目需要保存监控数据，之前用hbase存然后再出图的方式，虽然数据量可以，但整个方式比较落后。</p>

<p>rrdtool是专门为了保存和出图设计的数据库。它的全称为round robin database，我们通常叫它为环状数据库。</p>

<p>关于如何创建rrd数据库的文章可以看这里<a href="http://www.cuddletech.com/articles/rrd/ar01s02.html">http://www.cuddletech.com/articles/rrd/ar01s02.html</a></p>

<h2>准备工作</h2>

<p>在freebsd上安装rrdtool1.2以上的版本</p>

<!-- more -->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /usr/port/databases/rrdtool12
</span><span class='line'>sudo make install clean
</span></code></pre></td></tr></table></div></figure>


<p>erlang对应接口的安装</p>

<p>在项目中rebar.conf对应位置中加入8-11行的内容</p>

<figure class='code'><figcaption><span>rebar.conf start:0 mark:8-11 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">deps</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="n">mochiweb</span><span class="p">,</span> <span class="s">&quot;1.5.1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/mochi/mochiweb.git&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">{</span><span class="n">tag</span><span class="p">,</span> <span class="s">&quot;1.5.1&quot;</span><span class="p">}</span> <span class="p">}},</span>
</span><span class='line'>        <span class="p">{</span><span class="n">&#39;log4erl&#39;</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/ahmednawras/log4erl.git&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&quot;master&quot;</span><span class="p">}</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="n">&#39;rrdtool&#39;</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/Vagabond/erlang-rrdtool.git&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&quot;master&quot;</span><span class="p">}</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">]}.</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="n">sub_dirs</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;apps/monitorserver2&quot;</span><span class="p">,</span> <span class="s">&quot;rel&quot;</span><span class="p">]}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>以及
rel/reltool.config对应位置中加入第13、30行的内容</p>

<figure class='code'><figcaption><span>rebar.conf start:0 mark:13,30 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">sys</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>       <span class="p">{</span><span class="n">lib_dirs</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;../apps&quot;</span><span class="p">,</span> <span class="s">&quot;../deps&quot;</span><span class="p">]},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">erts</span><span class="p">,</span> <span class="p">[{</span><span class="n">mod_cond</span><span class="p">,</span> <span class="n">derived</span><span class="p">},</span> <span class="p">{</span><span class="n">app_file</span><span class="p">,</span> <span class="n">strip</span><span class="p">}]},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">app_file</span><span class="p">,</span> <span class="n">strip</span><span class="p">},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">rel</span><span class="p">,</span> <span class="s">&quot;monitorserver2&quot;</span><span class="p">,</span> <span class="s">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>         <span class="n">kernel</span><span class="p">,</span>
</span><span class='line'>         <span class="n">stdlib</span><span class="p">,</span>
</span><span class='line'>         <span class="n">sasl</span><span class="p">,</span>
</span><span class='line'>         <span class="n">inets</span><span class="p">,</span>
</span><span class='line'>         <span class="n">crypto</span><span class="p">,</span>
</span><span class='line'>         <span class="n">mochiweb</span><span class="p">,</span>
</span><span class='line'>         <span class="n">rrdtool</span><span class="p">,</span>
</span><span class='line'>         <span class="n">monitorserver2</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">rel</span><span class="p">,</span> <span class="s">&quot;start_clean&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>         <span class="n">kernel</span><span class="p">,</span>
</span><span class='line'>         <span class="n">stdlib</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">boot_rel</span><span class="p">,</span> <span class="s">&quot;monitorserver2&quot;</span><span class="p">},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">profile</span><span class="p">,</span> <span class="n">embedded</span><span class="p">},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">exclude</span><span class="p">},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">excl_archive_filters</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;.*&quot;</span><span class="p">]},</span> <span class="c">%% Do not archive built libs</span>
</span><span class='line'>       <span class="p">{</span><span class="n">excl_sys_filters</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;^bin/.*&quot;</span><span class="p">,</span> <span class="s">&quot;^erts.*/bin/(dialyzer|typer)&quot;</span><span class="p">,</span>
</span><span class='line'>                           <span class="s">&quot;^erts.*/(doc|info|include|lib|man|src)&quot;</span><span class="p">]},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">excl_app_filters</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;</span><span class="err">\</span><span class="s">.gitignore&quot;</span><span class="p">]},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">app</span><span class="p">,</span> <span class="n">sasl</span><span class="p">,</span>   <span class="p">[{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">include</span><span class="p">}]},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">app</span><span class="p">,</span> <span class="n">mochiweb</span><span class="p">,</span>   <span class="p">[{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">include</span><span class="p">}]},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">app</span><span class="p">,</span> <span class="n">rrdtool</span><span class="p">,</span>   <span class="p">[{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">include</span><span class="p">}]},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">app</span><span class="p">,</span> <span class="n">crypto</span><span class="p">,</span>   <span class="p">[{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">include</span><span class="p">}]},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">app</span><span class="p">,</span> <span class="n">inets</span><span class="p">,</span>   <span class="p">[{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">include</span><span class="p">}]},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">app</span><span class="p">,</span> <span class="n">stdlib</span><span class="p">,</span> <span class="p">[{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">include</span><span class="p">}]},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">app</span><span class="p">,</span> <span class="n">kernel</span><span class="p">,</span> <span class="p">[{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">include</span><span class="p">}]},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">app</span><span class="p">,</span> <span class="n">mnesia</span><span class="p">,</span> <span class="p">[{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">include</span><span class="p">}]},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">app</span><span class="p">,</span> <span class="n">xmerl</span><span class="p">,</span> <span class="p">[{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">include</span><span class="p">}]},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">app</span><span class="p">,</span> <span class="n">monitorserver2</span><span class="p">,</span> <span class="p">[{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">include</span><span class="p">}]}</span>
</span><span class='line'>      <span class="p">]}.</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="n">target_dir</span><span class="p">,</span> <span class="s">&quot;monitorserver2&quot;</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="n">overlay</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>           <span class="p">{</span><span class="n">mkdir</span><span class="p">,</span> <span class="s">&quot;log/sasl&quot;</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">copy</span><span class="p">,</span> <span class="s">&quot;files/erl&quot;</span><span class="p">,</span> <span class="s">&quot;</span><span class="err">\</span><span class="s">{</span><span class="err">\</span><span class="s">{erts_vsn</span><span class="err">\</span><span class="s">}</span><span class="err">\</span><span class="s">}/bin/erl&quot;</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">copy</span><span class="p">,</span> <span class="s">&quot;files/nodetool&quot;</span><span class="p">,</span> <span class="s">&quot;</span><span class="err">\</span><span class="s">{</span><span class="err">\</span><span class="s">{erts_vsn</span><span class="err">\</span><span class="s">}</span><span class="err">\</span><span class="s">}/bin/nodetool&quot;</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">copy</span><span class="p">,</span> <span class="s">&quot;files/monitorserver2&quot;</span><span class="p">,</span> <span class="s">&quot;bin/monitorserver2&quot;</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">copy</span><span class="p">,</span> <span class="s">&quot;files/monitorserver2.cmd&quot;</span><span class="p">,</span> <span class="s">&quot;bin/monitorserver2.cmd&quot;</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">copy</span><span class="p">,</span> <span class="s">&quot;files/start_erl.cmd&quot;</span><span class="p">,</span> <span class="s">&quot;bin/start_erl.cmd&quot;</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">copy</span><span class="p">,</span> <span class="s">&quot;files/install_upgrade.escript&quot;</span><span class="p">,</span> <span class="s">&quot;bin/install_upgrade.escript&quot;</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">copy</span><span class="p">,</span> <span class="s">&quot;files/sys.config&quot;</span><span class="p">,</span> <span class="s">&quot;releases/</span><span class="err">\</span><span class="s">{</span><span class="err">\</span><span class="s">{rel_vsn</span><span class="err">\</span><span class="s">}</span><span class="err">\</span><span class="s">}/sys.config&quot;</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">copy</span><span class="p">,</span> <span class="s">&quot;files/vm.args&quot;</span><span class="p">,</span> <span class="s">&quot;releases/</span><span class="err">\</span><span class="s">{</span><span class="err">\</span><span class="s">{rel_vsn</span><span class="err">\</span><span class="s">}</span><span class="err">\</span><span class="s">}/vm.args&quot;</span><span class="p">}</span>
</span><span class='line'>          <span class="p">]}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就算安装完成了（需要注意项目使用了rebar）</p>

<h2>创建RRD数据库</h2>

<p>然后我们参考下开源监控软件ganglia的load_one数据库结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rrdtool info load_one.rrd
</span><span class='line'>
</span><span class='line'><span class="nv">filename</span> <span class="o">=</span> <span class="s2">&quot;load_one.rrd&quot;</span>
</span><span class='line'><span class="nv">rrd_version</span> <span class="o">=</span> <span class="s2">&quot;0003&quot;</span>
</span><span class='line'><span class="nv">step</span> <span class="o">=</span> 15
</span><span class='line'><span class="nv">last_update</span> <span class="o">=</span> 1382507991
</span><span class='line'>ds<span class="o">[</span>sum<span class="o">]</span>.type <span class="o">=</span> <span class="s2">&quot;GAUGE&quot;</span>
</span><span class='line'>ds<span class="o">[</span>sum<span class="o">]</span>.minimal_heartbeat <span class="o">=</span> 120
</span><span class='line'>ds<span class="o">[</span>sum<span class="o">]</span>.min <span class="o">=</span> NaN
</span><span class='line'>ds<span class="o">[</span>sum<span class="o">]</span>.max <span class="o">=</span> NaN
</span><span class='line'>ds<span class="o">[</span>sum<span class="o">]</span>.last_ds <span class="o">=</span> <span class="s2">&quot;0.10&quot;</span>
</span><span class='line'>ds<span class="o">[</span>sum<span class="o">]</span>.value <span class="o">=</span> 6.0000000000e-01
</span><span class='line'>ds<span class="o">[</span>sum<span class="o">]</span>.unknown_sec <span class="o">=</span> 0
</span><span class='line'>rra<span class="o">[</span>0<span class="o">]</span>.cf <span class="o">=</span> <span class="s2">&quot;AVERAGE&quot;</span>
</span><span class='line'>rra<span class="o">[</span>0<span class="o">]</span>.rows <span class="o">=</span> 5856
</span><span class='line'>rra<span class="o">[</span>0<span class="o">]</span>.pdp_per_row <span class="o">=</span> 1
</span><span class='line'>rra<span class="o">[</span>0<span class="o">]</span>.xff <span class="o">=</span> 5.0000000000e-01
</span><span class='line'>rra<span class="o">[</span>0<span class="o">]</span>.cdp_prep<span class="o">[</span>0<span class="o">]</span>.value <span class="o">=</span> NaN
</span><span class='line'>rra<span class="o">[</span>0<span class="o">]</span>.cdp_prep<span class="o">[</span>0<span class="o">]</span>.unknown_datapoints <span class="o">=</span> 0
</span><span class='line'>rra<span class="o">[</span>1<span class="o">]</span>.cf <span class="o">=</span> <span class="s2">&quot;AVERAGE&quot;</span>
</span><span class='line'>rra<span class="o">[</span>1<span class="o">]</span>.rows <span class="o">=</span> 20160
</span><span class='line'>rra<span class="o">[</span>1<span class="o">]</span>.pdp_per_row <span class="o">=</span> 4
</span><span class='line'>rra<span class="o">[</span>1<span class="o">]</span>.xff <span class="o">=</span> 5.0000000000e-01
</span><span class='line'>rra<span class="o">[</span>1<span class="o">]</span>.cdp_prep<span class="o">[</span>0<span class="o">]</span>.value <span class="o">=</span> 3.3266666667e-01
</span><span class='line'>rra<span class="o">[</span>1<span class="o">]</span>.cdp_prep<span class="o">[</span>0<span class="o">]</span>.unknown_datapoints <span class="o">=</span> 0
</span><span class='line'>rra<span class="o">[</span>2<span class="o">]</span>.cf <span class="o">=</span> <span class="s2">&quot;AVERAGE&quot;</span>
</span><span class='line'>rra<span class="o">[</span>2<span class="o">]</span>.rows <span class="o">=</span> 52704
</span><span class='line'>rra<span class="o">[</span>2<span class="o">]</span>.pdp_per_row <span class="o">=</span> 40
</span><span class='line'>rra<span class="o">[</span>2<span class="o">]</span>.xff <span class="o">=</span> 5.0000000000e-01
</span><span class='line'>rra<span class="o">[</span>2<span class="o">]</span>.cdp_prep<span class="o">[</span>0<span class="o">]</span>.value <span class="o">=</span> 2.2742000000e+01
</span><span class='line'>rra<span class="o">[</span>2<span class="o">]</span>.cdp_prep<span class="o">[</span>0<span class="o">]</span>.unknown_datapoints <span class="o">=</span> 14
</span></code></pre></td></tr></table></div></figure>


<p>熟悉一下它的结构，数据库的名字叫做load_one.rrd，rrd的版本为3，步长step为15秒，即15秒之内的数据不能再次被写入，为一个最小单位。
然后last_update为最后一次更新的时间戳，数据类型为GAUGE，这是一种直接写入不做平均计算的数据类型。minimal_heartbeat为120秒，意思是120秒内没有数据被更新，系统认为状态未知。
min max为最大和最小。last_ds最后的ds为0.10，最后被写入的数据为6.0000000000e-01，就是0.6，未知的时间为0。
接下来CF的第一个AVERAGE的每行（row）有1个pdp（ Primary Data Point），共有5856个pdp,我们算下代表的时间跨度，15<em>1</em>5856=87840秒，为24.4小时。为啥有0.4小时，估计是出图的时候，为了更好看吧，可以不去管它。这里废话一句：也可以通过如下命令查看实际的时间跨度：
rrdtool dump load_one.rrd > load_one.xml
进去可以看一下是不是时间跨度规划正确。
<img src="http://evoupsight.com/images/evoup/rrdtool_dump.png" alt="Alt text" /></p>

<p>于是我有了我的load数据库</p>

<figure class='code'><figcaption><span>foo.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="nv">PidRrdtool</span><span class="p">}</span><span class="o">=</span><span class="nn">rrdtool</span><span class="p">:</span><span class="nf">start</span><span class="p">(),</span>
</span><span class='line'><span class="nn">rrdtool</span><span class="p">:</span><span class="nf">create</span><span class="p">(</span><span class="nv">PidRrdtool</span><span class="p">,</span> <span class="s">&quot;load.rrd&quot;</span><span class="p">,</span> <span class="p">[{</span><span class="s">&quot;load&quot;</span><span class="p">,</span> <span class="n">&#39;GAUGE&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mi">120</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">]}],</span>
</span><span class='line'>    <span class="p">[{</span><span class="n">&#39;AVERAGE&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5856</span><span class="p">},</span> <span class="p">{</span><span class="n">&#39;AVERAGE&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">20160</span><span class="p">},</span> <span class="p">{</span><span class="n">&#39;AVERAGE&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">52704</span><span class="p">}</span>
</span><span class='line'>    <span class="p">],[{</span><span class="n">step</span><span class="p">,</span><span class="mi">15</span><span class="p">}]).</span>
</span></code></pre></td></tr></table></div></figure>


<p> 需要注意的是这个create会无条件重建数据库，所以每次运行要先判断是否存在，如果不存在
 才调用rrdtool:create函数创建数据库。</p>

<p> 其中最后一个参数为创建选项，可以传{step,15}，代表创建步长为15的数据库。</p>

<h2>更新数据库</h2>

<p>这个比较简单了，就是update</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%写入rrd数据库</span>
</span><span class='line'><span class="c">%%Load为客户端上传的监控到的load数值</span>
</span><span class='line'><span class="nn">rrdtool</span><span class="p">:</span><span class="nf">update</span><span class="p">(</span><span class="nv">PidRrdtool</span><span class="p">,</span> <span class="s">&quot;load.rrd&quot;</span><span class="p">,</span> <span class="p">[{</span><span class="s">&quot;load&quot;</span><span class="p">,</span> <span class="nb">list_to_float</span><span class="p">(</span><span class="nv">Load</span><span class="p">)}],</span> <span class="n">now</span><span class="p">()).</span>
</span></code></pre></td></tr></table></div></figure>


<h2>简单的绘图</h2>

<p>这里用最原始的方法，rrdtool graph来画图</p>

<figure class='code'><figcaption><span>make_graph.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>rrdtool graph  myLoad.png                    <span class="se">\</span>
</span><span class='line'>      --start 1382508875 --end 1382512874         <span class="se">\</span>
</span><span class='line'>      --title <span class="s2">&quot;Load Average yin-arch_ac101eb8&quot;</span>   <span class="se">\</span>
</span><span class='line'>      --v <span class="s2">&quot;Load Average&quot;</span>                          <span class="se">\</span>
</span><span class='line'>      DEF:load<span class="o">=</span>load.rrd:load:AVERAGE              <span class="se">\</span>
</span><span class='line'>      HRULE:1#ff0000:<span class="s2">&quot;warning value&quot;</span>             <span class="se">\</span>
</span><span class='line'>      AREA:load#4A4A4A:load<span class="se">\ </span>average<span class="se">\</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行该脚本，最后绘图效果见此:</p>

<p><img src="http://evoupsight.com/images/evoup/rrdtool_load_graph.png" alt="Alt text" /></p>

<p>其他参考资料：
<a href="http://oss.oetiker.ch/rrdtool/">http://oss.oetiker.ch/rrdtool/</a></p>

<p><a href="https://github.com/Vagabond/erlang-rrdtool">https://github.com/Vagabond/erlang-rrdtool</a></p>

<p><a href="http://blog.sina.com.cn/s/blog_79d1f5e00100test.html">http://blog.sina.com.cn/s/blog_79d1f5e00100test.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[局域网计算机和vmware虚拟机互ping]]></title>
    <link href="http://evoupsight.com/blog/2013/10/22/vmware-ping-in-lan/"/>
    <updated>2013-10-22T13:35:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/10/22/vmware-ping-in-lan</id>
    <content type="html"><![CDATA[<h2>情景描述</h2>

<p>在公司的WIN7电脑上装了vmware进行服务端的开发，通过socket和client端进行通信。现在局域网中有若干台服务器安装了客户端要与vmware虚拟机上的server端进行通讯。由于不是处于一个网段，无法互相ping得地址，进而不能交互，以下为解决问题的过程笔录。</p>

<!-- more -->


<h2>我的环境</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  ,____________________
</span><span class='line'>  |                   |  ,''''''''''''''''''|   ,------------------Y
</span><span class='line'>  |   gateway         |  |   gateway        |   |   gateway        |
</span><span class='line'>  |                   |__|                  |   |                  |
</span><span class='line'>      172.16.27.38    |  |  172.16.27.1     |   |  172.16.30.254   |
</span><span class='line'>  |                   |  |                  |   |                  |
</span><span class='line'>  `.................../  L__________________|   |__________________J
</span><span class='line'>           |                                              |
</span><span class='line'>           |                                              |
</span><span class='line'>           |                                              |
</span><span class='line'>           |                                              |
</span><span class='line'>           |                                              |
</span><span class='line'>           |                                              |
</span><span class='line'>   ,_______|______                                        |
</span><span class='line'>   |             |        ,''''''''''''''`.        ,'''''''''''''`.
</span><span class='line'>   |             |        |               |        |              |
</span><span class='line'>   | WIN7        |        |   freebsd8    |        |   freebsd9   |
</span><span class='line'>   |             |        |               |        |              |
</span><span class='line'>   | VMWARE Host |        | VMWARE client |        |              |
</span><span class='line'>   |             |'''''''''               |        |              |
</span><span class='line'>   |             |        |     server    |        |    client    |
</span><span class='line'>   | 172.16.27.37|        |192.168.216.145|        |172.16.30.184 |
</span><span class='line'>   |             |        |               |        |              |
</span><span class='line'>   |             |        |               |        |              |
</span><span class='line'>   |             |        |               |        |              |
</span><span class='line'>   '`'''''''''''''        `---------------'        '`''''''''''''''</span></code></pre></td></tr></table></div></figure>


<p>A）WIN7所在vmware宿主机的网卡，地址为172.16.27.37/24(24代表子网掩码为255.255.255.0),默认网关172.16.27.38</p>

<p>B）Freebsd8 服务器所在的vmware虚拟机上原有一块NAT网卡em0，地址为192.168.216.145,一开始采用DHCP配置</p>

<p>C）Freebsd9 客户端上只有一块网卡epair38b,地址为172.16.30.184,默认网关为172.16.30.254</p>

<p>记录：</p>

<h2>实现A和B互通</h2>

<p>A到B，VMWARE直接就实现了。
B到A，需要添加一块bridge方式的网卡em0。使用sysinstall添加后，配置为172.16.27.59/24,默认网关172.16.27.38,注意在/etc/resolv.conf中加上这块网卡的dns，这里是172.16.27.38</p>

<h2>实现A和C互通</h2>

<p>A到C，网络规划的时候直接就通了，不在同一网关，在win7的网卡属性TCP/IPv4属性的高级TCP/IP设置中，选IP设置选项卡，然后在默认网关中添加C所在的网关172.16.30.254
C到A，网络规划的时候指定了，/etc/resolv.conf中nameserver 172.16.27.1，另一个网关也直接能通到A，只需要打开WIN7的ping防火墙即可，可以google之。</p>

<h2>实现B和C互通</h2>

<p>B到C，经过以上操作已经可以了。
C到B，同上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非常便捷的ssh信任制作脚本ssh-copy-id]]></title>
    <link href="http://evoupsight.com/blog/2013/10/17/ssh-copy-id/"/>
    <updated>2013-10-17T17:29:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/10/17/ssh-copy-id</id>
    <content type="html"><![CDATA[<p>手册一把原来这个工具就是shell脚本，ssh-copy-id这个工具可以方便的把公钥直接拷贝到对方服务器信任列表。比起来回切换服务器拷贝公钥方便多了。</p>

<!-- more -->


<p>实验：hostA: 172.16.30.184:22  hostB:211.136.104.189:9999</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;ssh-keygen -t rsa
</span><span class='line'>
</span><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>
</span><span class='line'>Enter file in which to save the key <span class="o">(</span>/home/yin/.ssh/id_rsa<span class="o">)</span>:
</span><span class='line'>
</span><span class='line'>/home/yin/.ssh/id_rsa already exists.
</span><span class='line'>
</span><span class='line'>Overwrite <span class="o">(</span>y/n<span class="o">)</span>? y
</span><span class='line'>
</span><span class='line'>Enter passphrase <span class="o">(</span>empty <span class="k">for </span>no passphrase<span class="o">)</span>:
</span><span class='line'>
</span><span class='line'>Enter same passphrase again:
</span><span class='line'>
</span><span class='line'>Your identification has been saved in /home/yin/.ssh/id_rsa.
</span><span class='line'>
</span><span class='line'>Your public key has been saved in /home/yin/.ssh/id_rsa.pub.
</span><span class='line'>
</span><span class='line'>The key fingerprint is:
</span><span class='line'>
</span><span class='line'>74:59:16:2c:01:0c:2a:21:b4:49:8d:0e:51:2f:d9:a4 yin@yin-arch.madhouse.cn
</span><span class='line'>
</span><span class='line'>The key<span class="err">&#39;</span>s randomart image is:
</span><span class='line'>
</span><span class='line'>+--<span class="o">[</span> RSA 2048<span class="o">]</span>----+
</span><span class='line'>
</span><span class='line'>|+<span class="o">==</span> . .o...o+.   |
</span><span class='line'>
</span><span class='line'>|oooO .  . .+.    |
</span><span class='line'>
</span><span class='line'>|ooE +   . o.     |
</span><span class='line'>
</span><span class='line'>| . o   . .       |
</span><span class='line'>
</span><span class='line'>|        S        |
</span><span class='line'>
</span><span class='line'>|                 |
</span><span class='line'>
</span><span class='line'>|                 |
</span><span class='line'>
</span><span class='line'>|                 |
</span><span class='line'>
</span><span class='line'>|                 |
</span><span class='line'>
</span><span class='line'>+-----------------+
</span></code></pre></td></tr></table></div></figure>


<p>然后运行如下脚本，按照提示输入密码即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-copy-id <span class="s1">&#39;-p 9999 -i /usr/home/yin/.ssh/id_rsa.pub yin@211.136.104.189&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考：</p>

<p><a href="http://mikegerwitz.com/ssh-copy-id-and-sshd-port/">http://mikegerwitz.com/ssh-copy-id-and-sshd-port/</a></p>

<p><a href="http://blogread.cn/it/article/6103">http://blogread.cn/it/article/6103</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下模拟df.c源码]]></title>
    <link href="http://evoupsight.com/blog/2013/10/16/linux-df-source-c-code/"/>
    <updated>2013-10-16T18:09:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/10/16/linux-df-source-c-code</id>
    <content type="html"><![CDATA[<p>主要实现df的基本不带参数的功能，连界面都不一样，凑活用，见代码：</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;mntent.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/vfs.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="k">struct</span> <span class="n">mntent</span> <span class="o">*</span><span class="n">ent</span><span class="p">;</span>
</span><span class='line'> <span class="kt">FILE</span> <span class="o">*</span><span class="n">aFile</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="n">aFile</span> <span class="o">=</span> <span class="n">setmntent</span><span class="p">(</span><span class="s">&quot;/etc/mtab&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="n">aFile</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">perror</span><span class="p">(</span><span class="s">&quot;setmntent&quot;</span><span class="p">);</span>
</span><span class='line'>   <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="k">struct</span> <span class="n">statfs</span> <span class="n">diskInfo</span><span class="p">;</span>
</span><span class='line'> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">blocksize</span><span class="p">;</span>
</span><span class='line'> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">totalsize</span><span class="p">;</span>
</span><span class='line'> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">freeDisk</span><span class="p">;</span>
</span><span class='line'> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">availsize</span><span class="p">;</span>
</span><span class='line'> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">used</span><span class="p">;</span>
</span><span class='line'> <span class="k">while</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="p">(</span><span class="n">ent</span> <span class="o">=</span> <span class="n">getmntent</span><span class="p">(</span><span class="n">aFile</span><span class="p">)))</span> <span class="p">{</span> <span class="c1">//获取各挂载点的信息</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;=========================================================================\</span>
</span><span class='line'><span class="s">==================================================</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>   <span class="c1">//根据挂载点，确认磁盘空间</span>
</span><span class='line'>   <span class="n">statfs</span><span class="p">(</span><span class="n">ent</span><span class="o">-&gt;</span><span class="n">mnt_dir</span><span class="p">,</span><span class="o">&amp;</span><span class="n">diskInfo</span><span class="p">);</span>
</span><span class='line'>   <span class="n">blocksize</span> <span class="o">=</span> <span class="n">diskInfo</span><span class="p">.</span><span class="n">f_bsize</span><span class="p">;</span> <span class="c1">//每个block里面包含的字节数</span>
</span><span class='line'>   <span class="n">totalsize</span> <span class="o">=</span> <span class="n">blocksize</span> <span class="o">*</span> <span class="n">diskInfo</span><span class="p">.</span><span class="n">f_blocks</span><span class="p">;</span> <span class="c1">//总的字节数</span>
</span><span class='line'>   <span class="n">freeDisk</span> <span class="o">=</span> <span class="n">diskInfo</span><span class="p">.</span><span class="n">f_bfree</span><span class="o">*</span><span class="n">blocksize</span><span class="p">;</span> <span class="c1">//再计算下剩余的空间大小</span>
</span><span class='line'>   <span class="n">availsize</span> <span class="o">=</span> <span class="n">diskInfo</span><span class="p">.</span><span class="n">f_bavail</span><span class="o">*</span><span class="n">blocksize</span><span class="p">;</span>
</span><span class='line'>   <span class="c1">//&gt;10换算成KB</span>
</span><span class='line'>   <span class="n">used</span><span class="o">=</span><span class="n">totalsize</span><span class="o">-</span><span class="n">freeDisk</span><span class="p">;</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;FS == %s MOUNTPOINT == %s TOTAL_SIZE == %lu KB DISK_FREE == %ld KB USED ==\</span>
</span><span class='line'><span class="s">%ld KB avail == %ld KB</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ent</span><span class="o">-&gt;</span><span class="n">mnt_fsname</span><span class="p">,</span> <span class="n">ent</span><span class="o">-&gt;</span><span class="n">mnt_dir</span><span class="p">,(</span><span class="kt">int</span><span class="p">)(</span><span class="n">totalsize</span><span class="o">&gt;&gt;</span><span class="mi">10</span><span class="p">),</span>
</span><span class='line'><span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">freeDisk</span><span class="o">&gt;&gt;</span><span class="mi">10</span><span class="p">),(</span><span class="kt">int</span><span class="p">)(</span><span class="n">used</span><span class="o">&gt;&gt;</span><span class="mi">10</span><span class="p">),(</span><span class="kt">int</span><span class="p">)(</span><span class="n">availsize</span><span class="o">&gt;&gt;</span><span class="mi">10</span><span class="p">));</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="n">endmntent</span><span class="p">(</span><span class="n">aFile</span><span class="p">);</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;=========================================================================\</span>
</span><span class='line'><span class="s">==================================================</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>附一张运行截图
<img src="http://evoupsight.com/images/evoup/df.png" alt="Alt text" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[erlang版的long2ip函数]]></title>
    <link href="http://evoupsight.com/blog/2013/10/09/erlang-long2ip/"/>
    <updated>2013-10-09T17:56:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/10/09/erlang-long2ip</id>
    <content type="html"><![CDATA[<p>工作中参考网络文章整理了一个整形转IP地址的函数。直接看代码了。</p>

<figure class='code'><figcaption><span>erlang代码片段 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%从整形转换为IP地址元组</span>
</span><span class='line'><span class="nf">long2ip</span><span class="p">(</span><span class="nv">IpInteger</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Integer_to_ip</span><span class="o">=</span><span class="k">fun</span><span class="p">(</span><span class="nv">Ip</span><span class="p">)</span><span class="o">-&gt;</span> <span class="p">{</span><span class="nv">Ip</span> <span class="ow">bsr</span> <span class="mi">24</span><span class="p">,</span> <span class="p">(</span><span class="nv">Ip</span> <span class="ow">band</span> <span class="mi">16711680</span><span class="p">)</span> <span class="ow">bsr</span> <span class="mi">16</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">Ip</span> <span class="ow">band</span> <span class="mi">65280</span><span class="p">)</span> <span class="ow">bsr</span> <span class="mi">8</span><span class="p">,</span> <span class="nv">Ip</span> <span class="ow">band</span> <span class="mi">255</span><span class="p">}</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">Integer_to_ip</span><span class="p">(</span><span class="nv">IpInteger</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样子使用
long2ip（3232290954).
{192,168,216,138}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客搬家到github]]></title>
    <link href="http://evoupsight.com/blog/2013/09/29/change-blog-to-github/"/>
    <updated>2013-09-29T16:27:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/09/29/change-blog-to-github</id>
    <content type="html"><![CDATA[<p>之前使用了将近一年的google app engine建博客，GFW间断性地对ghs.googlehosted.com进行屏蔽，同时用google帐号评论也太逊了，换个吧，开篇！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于log4erl的localtime_to_universaltime报错]]></title>
    <link href="http://evoupsight.com/blog/2013/07/29/log4erl-locatime-to-universaltime-exit-timezone/"/>
    <updated>2013-07-29T09:46:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/07/29/log4erl-locatime-to-universaltime-exit-timezone</id>
    <content type="html"><![CDATA[<h2>问题症状：</h2>

<p>项目遇到编译后运行的一个问题，logerl报错之</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">**</span> <span class="p">{</span><span class="n">appender_died</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>       <span class="p">{</span><span class="n">&#39;EXIT&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>           <span class="p">{</span><span class="n">badarg</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>               <span class="p">[{</span><span class="n">erlang</span><span class="p">,</span><span class="nb">localtime_to_universaltime</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">[{</span> <span class="p">{</span><span class="mi">2013</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">19</span><span class="p">},{</span><span class="mi">15</span><span class="p">,</span><span class="mi">52</span><span class="p">,</span><span class="mi">35</span><span class="p">}</span> <span class="p">},</span><span class="n">true</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">[]},</span>
</span></code></pre></td></tr></table></div></figure>


<p>看来是无法进行本地时间和UTC的转换，继续尝试一下这个localtime_to_universaltime函数</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nv">Eshell</span> <span class="nv">V5</span><span class="p">.</span><span class="mi">9</span><span class="p">.</span><span class="mi">1</span>  <span class="p">(</span><span class="n">abort</span> <span class="n">with</span> <span class="err">^</span><span class="nv">G</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nv">DateTime</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span><span class="mi">2008</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">},{</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span> <span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span> <span class="p">{</span><span class="mi">2008</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">},{</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">localtime_to_universaltime</span><span class="p">(</span><span class="nv">DateTime</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="o">**</span> <span class="n">exception</span> <span class="nn">error</span><span class="p">:</span> <span class="n">bad</span> <span class="n">argument</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">in</span> <span class="n">function</span>  <span class="nn">erlang</span><span class="p">:</span><span class="nb">localtime_to_universaltime</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">called</span> <span class="n">as</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">localtime_to_universaltime</span><span class="p">({</span> <span class="p">{</span><span class="mi">2008</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">},{</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span> <span class="p">},</span><span class="n">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>看来是个log4erl遭遇了在freebsd下调用localtime_to_universaltime函数的bug，原因可能是作者没有考虑到下面的状况：
<a href="http://erlang.org/pipermail/erlang-bugs/2008-May/000787.html" target=_BLANK><a href="http://erlang.org/pipermail/erlang-bugs/2008-May/000787.html">http://erlang.org/pipermail/erlang-bugs/2008-May/000787.html</a></a></p>

<h2>解决方法：</h2>

<p>我的做法是使用sysinstall指令把时区从UTC调整到CST，之后运行居然就一切OK了。</p>

<h2>时区调整：</h2>

<p>关于log4erl如何调整时区到本地时间，查看手册<a href="https://github.com/ahmednawras/log4erl/blob/master/API.txt" target=_BLANK><a href="https://github.com/ahmednawras/log4erl/blob/master/API.txt">https://github.com/ahmednawras/log4erl/blob/master/API.txt</a></a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> I - ISO format with universal GMT <span class="nb">time</span> <span class="o">(</span>equivilant to <span class="s2">&quot;%jT%TZ&quot;</span><span class="o">)</span>.
</span><span class='line'> S - ISO format with <span class="nb">local time </span>and <span class="nb">time </span>zone offset
</span></code></pre></td></tr></table></div></figure>


<p> 也就是在配置中改成%S就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【How to】使用basho的erlang-protobuffs和PHP通讯]]></title>
    <link href="http://evoupsight.com/blog/2013/05/27/erlang-protobuffs-with-php/"/>
    <updated>2013-05-27T13:49:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/05/27/erlang-protobuffs-with-php</id>
    <content type="html"><![CDATA[<p>这几天通过查阅相关资料，终于实现了php和erlang的相互通讯。详细的protocolbuf的入门，可以参见本问最后的参考链接。有文章说google官网实现的protobuf的erlang接口不是很好用，推荐使用basho的erlang-protobuffs修改版本。于是摸索了一番，终于勉强可以使用了，现先介绍如何使用该工具生成消息的erlang源文件。米聊用的分布式数据库riak就是basho公司开发的，其中采用了修改版erlang-protobuffs。</p>

<!-- more -->


<p>可以在这里下载，git://github.com/basho/erlang_protobuffs.git</p>

<p>先安装，我基本没有很好的安装，直接放到临时路径，要生成源代码的时候，进入该目录，生成，然后复制生成好的源代码文件到自己的项目目录里。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>erlang_protobuffs
</span><span class='line'>make all
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以使用了，接下来给出一个测试的protobuf文件</p>

<figure class='code'><figcaption><span>test.proto </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='protobuf'><span class='line'><span class="kd">message</span> <span class="nc">test</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">required</span> <span class="kt">string</span> <span class="na">test1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>进入ebin目录准备生成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>ebin
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="n">erl</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">protobuffs_compile</span><span class="p">:</span><span class="nf">generate_source</span><span class="p">(</span><span class="s">&quot;test.proto&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span><span class="nv">INFO</span> <span class="nv">REPORT</span><span class="o">====</span> <span class="mi">27</span><span class="o">-</span><span class="nv">May</span><span class="o">-</span><span class="mi">2013</span><span class="p">::</span><span class="mi">15</span><span class="p">:</span><span class="mi">31</span><span class="p">:</span><span class="mi">13</span> <span class="o">===</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Writing</span> <span class="n">header</span> <span class="n">file</span> <span class="n">to</span> <span class="s">&quot;test_pb.hrl&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span><span class="nv">INFO</span> <span class="nv">REPORT</span><span class="o">====</span> <span class="mi">27</span><span class="o">-</span><span class="nv">May</span><span class="o">-</span><span class="mi">2013</span><span class="p">::</span><span class="mi">15</span><span class="p">:</span><span class="mi">31</span><span class="p">:</span><span class="mi">13</span> <span class="o">===</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Writing</span> <span class="n">src</span> <span class="n">file</span> <span class="n">to</span> <span class="s">&quot;test_pb.erl&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ok</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样生成就完毕了，一共生成2个文件test_pb.hrl和test_pb.erl。</p>

<p>然后写一个server端测试，照搬erlang程序设计中的最入门的单线程例子改了改，一处理完就断的那种,在代码里引入该文件。</p>

<figure class='code'><figcaption><span>server.erl start:51 mark:51,54-55 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">server</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">compile</span><span class="p">(</span><span class="n">export_all</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">import</span><span class="p">(</span><span class="n">lists</span><span class="p">,</span> <span class="p">[</span><span class="n">reverse</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;test_pb.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start_nano_server</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Listen</span><span class="p">}</span> <span class="o">=</span> <span class="nn">gen_tcp</span><span class="p">:</span><span class="nf">listen</span><span class="p">(</span><span class="mi">2345</span><span class="p">,</span> <span class="p">[</span><span class="n">binary</span><span class="p">,</span> <span class="p">{</span><span class="n">packet</span><span class="p">,</span> <span class="mi">4</span><span class="p">},</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">{</span><span class="n">reuseaddr</span><span class="p">,</span> <span class="n">true</span><span class="p">},</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">{</span><span class="n">active</span><span class="p">,</span> <span class="n">true</span><span class="p">}]),</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Socket</span><span class="p">}</span> <span class="o">=</span> <span class="nn">gen_tcp</span><span class="p">:</span><span class="nf">accept</span><span class="p">(</span><span class="nv">Listen</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>   <span class="nn">gen_tcp</span><span class="p">:</span><span class="nf">close</span><span class="p">(</span><span class="nv">Listen</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">loop</span><span class="p">(</span><span class="nv">Socket</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">Socket</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">receive</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">{</span><span class="n">tcp</span><span class="p">,</span> <span class="nv">Socket</span><span class="p">,</span> <span class="nv">Bin</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>       <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Server received binary = </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,[</span><span class="nv">Bin</span><span class="p">]),</span>
</span><span class='line'>
</span><span class='line'>       <span class="nv">Msg</span><span class="o">=</span><span class="nn">test_pb</span><span class="p">:</span><span class="nf">decode_test</span><span class="p">(</span><span class="nv">Bin</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>       <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Server (unpacked)  </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,[</span><span class="nv">Msg</span><span class="p">]),</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">loop</span><span class="p">(</span><span class="nv">Socket</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">{</span><span class="n">tcp_closed</span><span class="p">,</span> <span class="nv">Socket</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>       <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Server socket closed</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>client的代码</p>

<figure class='code'><figcaption><span>client.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">client</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">compile</span><span class="p">(</span><span class="n">export_all</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">import</span><span class="p">(</span><span class="n">lists</span><span class="p">,</span> <span class="p">[</span><span class="n">reverse</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;test_pb.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">nano_client_eval</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Socket</span><span class="p">}</span> <span class="o">=</span>
</span><span class='line'>
</span><span class='line'>   <span class="nn">gen_tcp</span><span class="p">:</span><span class="nf">connect</span><span class="p">(</span><span class="s">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">2345</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>       <span class="p">[</span><span class="n">binary</span><span class="p">,</span> <span class="p">{</span><span class="n">packet</span><span class="p">,</span> <span class="mi">4</span><span class="p">}]),</span>
</span><span class='line'>
</span><span class='line'>   <span class="nv">Test</span><span class="o">=</span><span class="nl">#test</span><span class="p">{</span><span class="n">test1</span><span class="o">=</span><span class="s">&quot;test1&quot;</span><span class="p">},</span>
</span><span class='line'>
</span><span class='line'>   <span class="nv">Str</span><span class="o">=</span><span class="nn">test_pb</span><span class="p">:</span><span class="nf">encode_test</span><span class="p">(</span><span class="nv">Test</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ok</span> <span class="o">=</span> <span class="nn">gen_tcp</span><span class="p">:</span><span class="nb">send</span><span class="p">(</span><span class="nv">Socket</span><span class="p">,</span> <span class="nv">Str</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>   <span class="nn">gen_tcp</span><span class="p">:</span><span class="nf">close</span><span class="p">(</span><span class="nv">Socket</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要说明的是packet,4这个参数，代表每个数据包的前4个字节为消息头，该头标识了消息体的长度。这样互通是没有问题的，erlang自动为数据包的加上前4个字节的消息头。</p>

<p>接下来难点是php作为客户端，要手工打包消息然后发送。
首先是下载php版本的<a href="https://code.google.com/p/pb4php/">https://code.google.com/p/pb4php/</a>
然后，解压得到protocolbuf，接着创建你的项目，把protocolbuf放到该项目文件夹的根目录下。一样要生成源代码。注意，pb4php不是很智能，如果直接.proto文件中=1没有空格，而不是写成xx = 1是会报错的！</p>

<figure class='code'><figcaption><span>test.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">require_once</span><span class="p">(</span><span class="s2">&quot;./protocolbuf/parser/pb_parser.php&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$parser</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PBParser</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$parser</span><span class="o">-&gt;</span><span class="na">parse</span><span class="p">(</span><span class="s2">&quot;./test.proto&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;done</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>运行test.php后生成pb_proto_test.php</p>

<p>php版本的client的代码</p>

<figure class='code'><figcaption><span>client.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">require_once</span><span class="p">(</span><span class="s2">&quot;./protocolbuf/message/pb_message.php&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">require_once</span><span class="p">(</span><span class="s2">&quot;./pb_proto_test.php&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$test</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">test</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$test</span><span class="o">-&gt;</span><span class="na">set_test1</span><span class="p">(</span><span class="s2">&quot;test php&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$string</span> <span class="o">=</span> <span class="nv">$test</span><span class="o">-&gt;</span><span class="na">SerializeToString</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$sock</span><span class="o">=@</span><span class="nb">socket_create</span><span class="p">(</span><span class="nx">AF_INET</span><span class="p">,</span> <span class="nx">SOCK_STREAM</span><span class="p">,</span> <span class="nx">getprotobyname</span><span class="p">(</span><span class="s1">&#39;tcp&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$sock</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="nb">socket_connect</span><span class="p">(</span><span class="nv">$sock</span><span class="p">,</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="mi">2345</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="nv">$msg</span> <span class="o">=</span> <span class="nx">pack_data</span><span class="p">(</span><span class="nv">$string</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="nb">file_put_contents</span><span class="p">(</span><span class="nb">dirname</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;/resmessage&#39;</span><span class="p">,</span><span class="nv">$msg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="nv">$sent</span> <span class="o">=</span> <span class="o">@</span><span class="nb">socket_write</span><span class="p">(</span><span class="nv">$sock</span><span class="p">,</span> <span class="nv">$msg</span><span class="p">,</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$msg</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">pack_data</span> <span class="p">(</span><span class="nv">$data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="nv">$head</span> <span class="o">=</span><span class="nb">pack</span><span class="p">(</span><span class="s2">&quot;H*&quot;</span><span class="p">,</span> <span class="nx">to_hex_str</span> <span class="p">(</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$data</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'>   <span class="nv">$body</span><span class="o">=</span><span class="nb">pack</span><span class="p">(</span><span class="s2">&quot;A*&quot;</span><span class="p">,</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="nv">$head</span><span class="o">.</span><span class="nv">$body</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">to_hex_str</span> <span class="p">(</span><span class="nv">$num</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="nv">$str</span> <span class="o">=</span> <span class="nb">dechex</span><span class="p">(</span><span class="nv">$num</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="nv">$str</span> <span class="o">=</span> <span class="nb">str_pad</span><span class="p">(</span><span class="nv">$str</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="s2">&quot;0&quot;</span><span class="p">,</span><span class="nx">STR_PAD_LEFT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="nv">$str</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>运行上面的php客户端可以和erlang版本的server.erl服务端实现二进制CS互通。期间由于不理解erlang的packet含义，用抓包查了一下才搞定的。不明白原理的，可以尝试抓一下包，然后测试。同时获取了消息体的长度后，可用php的函数dechex()函数获取十六进制代码，然后有这样一个规律。如果erlang服务端packet参数后为2，则str_pad($str,4,&ldquo;0&rdquo;,STR_PAD_LEFT)然后打包消息头，如果服务端packet参数后跟4，则str_pad($str,8,&ldquo;0&rdquo;,STR_PAD_LEFT)然后打包消息头。</p>

<p>最后，还有一个要注意，erlang版本的protocolbuf不知道为什么，int32和int64最多不能超过10位，在项目里我一概成了string类型。其他，optinal类型对于不一定出现的数据也是很好用的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[How to]使用rebar构建erlang 项目]]></title>
    <link href="http://evoupsight.com/blog/2013/05/04/rebar-build-erlang-project/"/>
    <updated>2013-05-04T14:41:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/05/04/rebar-build-erlang-project</id>
    <content type="html"><![CDATA[<p>rebar这个程序其实是个escript脚本，通过它可以对erlang项目创建、编译、生成和升级。之前一直使用着《Erlang/OTP并发编程实战》EMakefile的方法，进行项目的编译，也很简单，但是后续的又有一套发布的机制。现在很多项目在用rebar，于是我也试了一下，没想到问题还蛮多的，在这里记一下，我只是用了绕过的方法不是很好，因为时间不允许，这里先SORRY一下。我这里的环境为freebsd9.0 amd64 (elrang5.9.1 R15B01),erlang的其他版本，请参看wiki的Release-handling部分调整生成环节的命令。</p>

<p>1）第一步要获取rebar程序，两种方法：自己编译和直接下载。</p>

<!-- more -->


<p>自己编译：
<a href="https://github.com/rebar/rebar">https://github.com/rebar/rebar</a>
直接按照README.md的方法编译出一个rebar。</p>

<p>直接下载：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -o rebar http://cloud.github.com/downloads/basho/rebar/rebar
</span></code></pre></td></tr></table></div></figure>


<p>这个就直接可用了。</p>

<p>无论哪种方式搞定之后，进入自己项目的根目录都要chmod +x rebar给它可执行权限。</p>

<p>2）创建项目</p>

<p>在项目的根目录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/exemplar <span class="nv">$ </span>mkdir -p apps/exemplar
</span><span class='line'>
</span><span class='line'>~/exemplar <span class="nv">$ </span><span class="nb">cd </span>apps/exemplar
</span><span class='line'>
</span><span class='line'>~/exemplar <span class="nv">$ </span>rebar create-app <span class="nv">appid</span><span class="o">=</span>exemplar
</span></code></pre></td></tr></table></div></figure>


<p>这样就在项目根目录下得到了app文件夹，该文件夹下的src文件夹中默认有三个项目源文件，一个src文件，一个主文件，一个监督者文件。接下来就像往常一样的编写erlang代码。（甚至我当初直接在该目录用Emakefile的方式进行调试也是可以的，只是路径稍有变化，这里只带过）</p>

<p>3）生成发布版</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/exemplar <span class="nv">$ </span>mkdir rel
</span><span class='line'>
</span><span class='line'>~/exemplar <span class="nv">$ </span><span class="nb">cd </span>rel
</span></code></pre></td></tr></table></div></figure>


<p>接下来非常怂的问题来了，编辑reltool.config时wiki上说把</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">sys</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>
</span><span class='line'>       <span class="p">{</span><span class="n">lib_dirs</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="n">sys</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">{</span><span class="n">lib_dirs</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;../apps&quot;</span><span class="p">]},</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实还需要加上依赖的路径</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">lib_dirs</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;../apps&quot;</span><span class="p">,</span> <span class="s">&quot;../deps&quot;</span><span class="p">]},</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样才对。</p>

<p>然后还有在  {rel, &ldquo;exemplar&rdquo;, &ldquo;1&rdquo;,</p>

<p>后面一段，生成发布的时候还会提醒要求带上sasl、inet、crypto
而在 {excl_app_filters, [&ldquo;.gitignore&rdquo;]},后面
依次相应要带上</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'>   <span class="p">{</span><span class="n">app</span><span class="p">,</span> <span class="n">sasl</span><span class="p">,</span>   <span class="p">[{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">include</span><span class="p">}]},</span>
</span><span class='line'>   <span class="p">{</span><span class="n">app</span><span class="p">,</span> <span class="n">mochiweb</span><span class="p">,</span>   <span class="p">[{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">include</span><span class="p">}]},</span>
</span><span class='line'>   <span class="p">{</span><span class="n">app</span><span class="p">,</span> <span class="n">inets</span><span class="p">,</span>   <span class="p">[{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">include</span><span class="p">}]},</span>
</span><span class='line'>   <span class="p">{</span><span class="n">app</span><span class="p">,</span> <span class="n">crypto</span><span class="p">,</span>   <span class="p">[{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">include</span><span class="p">}]},</span>
</span></code></pre></td></tr></table></div></figure>


<p>     <br/>
到这里reltool.config的麻烦才告一段落。
最后回到根目录
rebar.config的内容如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">deps</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="n">mochiweb</span><span class="p">,</span> <span class="s">&quot;1.5.1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/mochi/mochiweb.git&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">{</span><span class="n">tag</span><span class="p">,</span> <span class="s">&quot;1.5.1&quot;</span><span class="p">}}},</span>
</span><span class='line'>        <span class="p">{</span><span class="n">&#39;log4erl&#39;</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/ahmednawras/log4erl.git&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&quot;master&quot;</span><span class="p">}}</span>
</span><span class='line'><span class="p">{</span><span class="n">sub_dirs</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;apps/exemplar&quot;</span><span class="p">,</span> <span class="s">&quot;rel&quot;</span><span class="p">]}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>好了，rebar.config，我这里也不多说，反正我是试了各种版本，要么生成的so变成了exemplar_drv.so，要么干脆就无法生成。我最后放到Makefile里一并解决了。
下面是这个Makefile的内容，其中make.sh是自行生成erlang的NIF外围C/C++程序扩展so的编译脚本，这个要注意一下(我没有创建apps/c_src这个文件夹，而是在apps文件夹下又放了个files文件，里面是c的源文件，这样make.sh的内容就大概是gcc -Wall -o $APP_PREFIX/priv/nif.so -fpic -shared -I $ERL_LIB/erts-$ERL_VER/include/ apps/files/nif.c 这样子，反正还是要生成到priv路径就对了)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="err">cat</span> <span class="err">Makefile</span>
</span><span class='line'><span class="nf">all</span><span class="o">:</span> <span class="m">compile</span>
</span><span class='line'><span class="nf">depends</span><span class="o">:</span>
</span><span class='line'>        ./rebar get-deps
</span><span class='line'>        ./rebar update-deps
</span><span class='line'><span class="nf">compile</span><span class="o">:</span>
</span><span class='line'>        ./rebar compile
</span><span class='line'>        ./make.sh
</span><span class='line'><span class="nf">clean</span><span class="o">:</span>
</span><span class='line'>        ./rebar clean
</span><span class='line'><span class="nf">release</span><span class="o">:</span>
</span><span class='line'>        ./rebar generate
</span><span class='line'>        mkdir ./rel/exemplar/priv
</span><span class='line'>        cp -r ./apps/exemplar/priv/* ./rel/exemplar/priv/
</span><span class='line'>        chmod +x ./rel/exemplar/bin/exemplar
</span><span class='line'><span class="nf">.PHONY</span><span class="o">:</span> <span class="m">all depends compile</span>
</span></code></pre></td></tr></table></div></figure>


<p>做Makefile的方法，也是我参考了github上一些开源erlang项目的想到的办法。
所有这一切做完按照如下方式就可以生成发布了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>make clean
</span><span class='line'>make depends
</span></code></pre></td></tr></table></div></figure>


<p></p>

<pre><code>编辑./deps/log4erl/src/log4erl.app.src文件，把{vsn, "0.9.0"}修改为{vsn, ""}，新版本的没试过，可能版本号不一致，请自行修改！
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>make release
</span></code></pre></td></tr></table></div></figure>


<p>基本上要注意的就是这些，以下为参考链接：</p>

<p><a href="https://github.com/rebar/rebar/wiki">https://github.com/rebar/rebar/wiki</a></p>

<p><a href="https://github.com/rebar/rebar/wiki/Release-handling">https://github.com/rebar/rebar/wiki/Release-handling</a></p>

<p><a href="http://cryolite.iteye.com/blog/1159448">http://cryolite.iteye.com/blog/1159448</a>  (rebar工具使用备忘录，这个比较早期so_specs已经被port_specs取代了，有需要的联系起来看看吧)</p>

<p><a href="http://blog.linezing.com/2011/04/rebar%EF%BC%9Aerlang%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7">http://blog.linezing.com/2011/04/rebar%EF%BC%9Aerlang%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[erlang调用C库函数(NIF 方式)]]></title>
    <link href="http://evoupsight.com/blog/2013/03/01/erlang-c-nif/"/>
    <updated>2013-03-01T13:39:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/03/01/erlang-c-nif</id>
    <content type="html"><![CDATA[<p>新客户端要求节省系统开销，对于监控的项目，如cpu的load不要通过shell的方式（如top）来获取，通过阅读先关开源软件的代码发现了getloadavg这个C标准库函数。考虑erlang三种和C外围程序交互的方式中，如果开发同步程序的话，NIF（本地函数）是在最高效的。但也要注意一下不要把费事阻塞的操作写到NIF中去，否则会vm会一直等待。</p>

<p>好久没写C的动态库了，记得上次还是学习vc的时候去调用dll,还好unix下做动态库很容易。这就开始，拿到《erlang OTP并发编程》翻到十二章，发现该书OTP的版本有R13和R14。我手头的版本是R15，</p>

<!-- more -->


<p>参考了例子和这篇文章《Erlang NIF简析》<a href="http://blog.csdn.net/keyeagle/article/details/7009208">http://blog.csdn.net/keyeagle/article/details/7009208</a></p>

<p>终于实验成功。</p>

<figure class='code'><figcaption><span>cgetloadavg.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;erl_nif.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">ERL_NIF_TERM</span> <span class="nf">getloadavg_ex</span><span class="p">(</span><span class="n">ErlNifEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="n">ERL_NIF_TERM</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="kt">double</span> <span class="n">load</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>   <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">30</span><span class="p">];</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="n">getloadavg</span><span class="p">(</span><span class="n">load</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">==-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;%f&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;%f&quot;</span><span class="p">,</span> <span class="n">load</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">enif_make_string</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">ERL_NIF_LATIN1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">ErlNifFunc</span> <span class="n">nif_funcs</span><span class="p">[]</span> <span class="o">=</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="p">{</span><span class="s">&quot;getloadavg_ex&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">getloadavg_ex</span><span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">ERL_NIF_INIT</span><span class="p">(</span><span class="n">getloadtest</span><span class="p">,</span><span class="n">nif_funcs</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="nb">NULL</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下写下简单的调用过程：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gcc -o getloadtest.so -fpic -shared -I /usr/local/lib/erlang/erts-5.9.1/include/ cgetloadavg.c
</span></code></pre></td></tr></table></div></figure>


<p>还没有在app里试验，如果是标准app</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gcc -o ./priv/getloadtest.so -fpic -shared -I /usr/local/lib/erlang/erts-5.9.1/include/ cgetloadavg.c
</span></code></pre></td></tr></table></div></figure>


<p>就可以生成供NIF调用的动态链接库</p>

<p>然后是erlang的，调用很简单：</p>

<figure class='code'><figcaption><span>getloadtest.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">getloadtest</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">getloadavg_ex</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">on_load</span><span class="p">(</span><span class="n">init</span><span class="o">/</span><span class="mi">0</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">init</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>   <span class="nn">erlang</span><span class="p">:</span><span class="nf">load_nif</span><span class="p">(</span><span class="s">&quot;./getloadtest&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">getloadavg_ex</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>   <span class="s">&quot;NIF library not loaded&quot;</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Eshell V5.9.1  <span class="o">(</span>abort with ^G<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>1&gt; c<span class="o">(</span>getloadtest<span class="o">)</span>.
</span><span class='line'>
</span><span class='line'><span class="o">{</span>ok,getloadtest<span class="o">}</span>
</span><span class='line'>
</span><span class='line'>2&gt; getloadtest:getloadavg_ex<span class="o">()</span>.
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;2.263184&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>reference:</p>

<p><a href="http://www.erlang.org/doc/tutorial/nif.html">http://www.erlang.org/doc/tutorial/nif.html</a></p>

<p><a href="http://www.erlang.org/doc/man/erl_nif.html">http://www.erlang.org/doc/man/erl_nif.html</a></p>

<p><a href="http://blog.csdn.net/d52787790/article/details/7103288">http://blog.csdn.net/d52787790/article/details/7103288</a></p>

<p><a href="http://blog.csdn.net/keyeagle/article/details/7009208">http://blog.csdn.net/keyeagle/article/details/7009208</a></p>

<p><a href="http://www.freebsd.org/cgi/man.cgi?query=getloadavg">http://www.freebsd.org/cgi/man.cgi?query=getloadavg</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[转]Erlang监测系统CPU、内存和磁盘]]></title>
    <link href="http://evoupsight.com/blog/2013/02/27/erlang-monitor-cpu-memory-disk/"/>
    <updated>2013-02-27T13:59:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/02/27/erlang-monitor-cpu-memory-disk</id>
    <content type="html"><![CDATA[<p>os_mon
Erlang的os_mon服务中提供了一些用于监测系统信息的服务</p>

<p><font color="red">(PS:经过测试，freebsd上使用get_disk_data无法获取到磁盘的数据)</font></p>

<p>cpu_sup：监测CPU负载和使用率（Unix）</p>

<p>disksup：监测磁盘（Unix、Windows）</p>

<p>memsup：监测内存（Unix、Windows、VxWorks）</p>

<p>os_sup：监测系统日志（Solaris、Windows）</p>

<!-- more -->


<p>使用os_mon进行监测先必须启动监测服务application:start(os_mon) ，因为os_mon服务依赖于sasl服务，先必须启
动sasl服务，application:start(sasl) ，否则会返回{ error,{not_started,sasl} } 错误。os_mon提供的四种监测服
务中默认会启动三种服务：cpu_sup、disksup和memsup，如果需要自己设置启动的监测服务，可以修改os_mon.app
文件中的配置参数</p>

<p>start_cpu_sup = bool()</p>

<p>start_disksup = bool()</p>

<p>start_memsup = bool()</p>

<p>start_os_sup = bool()</p>

<p>等于true时启动，等于false时不启动。os_mon.app文件在erlang的安装目录下../erl5.8.3/lib/os_mon-2.2.5
/ebin 。</p>

<p>cpu_sup</p>

<p>cpu监测在5.8.3版本中只能用于Solaris和Linux操作系统，负载值与Unix进程运行前在队列中的排队时间成正比，
因此值越大意味着负载越高，返回值除以256为rup和top命令中显示的值。avg1/0,avg5/0 和avg15/0 函数计算负载，
util/0 和util/1 函数计算CPU使用率。在Linux系统中，必须保证/proc文件目录能被cpu_sup服务访问，如果不能监
测服务会停止</p>

<p>模块中的函数列表</p>

<p>nprocs() &ndash;> UnixProcesses | {error, Reason}</p>

<p>返回UNIX进程数</p>

<p>avg1() &ndash;> SystemLoad | {error, Reason}</p>

<p>返回最后1分钟系统的负载</p>

<p>avg5() &ndash;> SystemLoad | {error, Reason}</p>

<p>返回最后5分钟系统的负载</p>

<p>avg15() &ndash;> SystemLoad | {error, Reason}</p>

<p>返回最后15分钟系统的负载</p>

<p>util() &ndash;> CpuUtil | {error, Reason}</p>

<p>返回CPU使用率</p>

<p>util(Opts) &ndash;> UtilSpec | {error, Reason}</p>

<p>返回CPU使用率的详细信息</p>

<p>调用这些函数取CPU监测数据时，如果前后两次调用，数值没有变化时显示为0，有点奇怪</p>

<p>disksup</p>

<p>disksup是一个用来监测磁盘空间的进程，适用于Unix和Windows系统。监测服务定期检查磁盘，对于每个磁盘或分
区，在它使用超过一定的可用空间量，通过{ {disk_almost_full，MountedOn}，[] } 设置产生报警。在Unix下所有的
本地磁盘都会被监测，包括存在的交换分区。在WIN32下所有类型为“FIXED_DISK”逻辑驱动器都会被检查。
配置监控间隔时间和阀值</p>

<p>disk_space_check_interval = int()>0</p>

<p>监测间隔时间，单位为分钟，默认为30分钟。</p>

<p>disk_almost_full_threshold = float()</p>

<p>监测阀值，磁盘使用率达到多少时产生告警，默认为80，单位是百分比。</p>

<p>模块中的函数列表</p>

<p>get_disk_data() &ndash;> [DiskData]</p>

<p>返回最后一次磁盘检查结果</p>

<p>get_check_interval() &ndash;> MS</p>

<p>获取监测间隔时间，单位是毫秒</p>

<p>set_check_interval(Minutes) &ndash;> ok</p>

<p>设置监测间隔时间，这个设置在下一次监测时生效，服务退出后，这个值会失效，重启服务后使用默认值</p>

<p>get_almost_full_threshold() &ndash;> Percent</p>

<p>获取监测阀值，为磁盘使用率</p>

<p>set_almost_full_threshold(Float) &ndash;> ok</p>

<p>设置监测阀值，服务重启后，设置失效，使用默认值</p>

<p>memsup</p>

<p>memsup用来监控系统内存和各个进程内存的使用率，适用于Unix、Windows和VxWorks系统，定时监测内存，如果内
存使用超过系统分配的一定值，通过{system_memory_high_watermark, []} 设置产生告警。如果系统中任何Erlang
进程使用内存超过在总内存中的一定百分比，通过设置{process_memory_high_watermark,Pid} 产生告警。</p>

<p>配置监测间隔时间和阀值</p>

<p>memory_check_interval = int()>0</p>

<p>以分钟为刻度，默认为1分钟</p>

<p>system_memory_high_watermark = float()</p>

<p>内存使用阀值，默认为80，单位是百分比</p>

<p>process_memory_high_watermark = float()</p>

<p>单个Erlang进程使用阀值，默认为5，单位是百分比</p>

<p>memsup_helper_timeout = int()>0</p>

<p>等待监测结果的超时时间，默认为30秒</p>

<p>memsup_system_only = bool()</p>

<p>设置是否只监控系统内存使用率还是同时监测Erlang进程内存使用率，默认为false</p>

<p>模块中的函数列表</p>

<p>get_memory_data() &ndash;> {Total,Allocated,Worst}</p>

<p>获取系统总内存，使用内存，每个Erlang进程的使用内存</p>

<p>get_system_memory_data() &ndash;> MemDataList</p>

<p>获取系统内存使用的详细信息</p>

<p>get_os_wordsize() &ndash;> Wordsize</p>

<p>获取操作系统的位数</p>

<p>get_check_interval() &ndash;> MS</p>

<p>获取监测间隔时间，单位毫秒</p>

<p>set_check_interval(Minutes) &ndash;> ok</p>

<p>设置监测间隔时间，单位分钟</p>

<p>get_procmem_high_watermark() &ndash;> int()</p>

<p>获取每一进程内存使用告警阀值</p>

<p>set_procmem_high_watermark(Float) &ndash;> ok</p>

<p>设置每一进程内存告警阀值</p>

<p>get_sysmem_high_watermark() &ndash;> int()</p>

<p>获取系统内存使用阀值</p>

<p>set_sysmem_high_watermark(Float) &ndash;> ok</p>

<p>设置系统内存使用阀值</p>

<p>get_helper_timeout() &ndash;> Seconds</p>

<p>获取监测数据返回等待时间</p>

<p>set_helper_timeout(Seconds) &ndash;> ok</p>

<p>设置监测数据返回等待时间</p>

<p>从lib/megaco/src/tcp/megaco_tcp_connection.erl摘抄的代码, 挺详细的关于系统的信息:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nv">SchedId</span>      <span class="o">=</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">system_info</span><span class="p">(</span><span class="n">scheduler_id</span><span class="p">),</span>
</span><span class='line'><span class="nv">SchedNum</span>     <span class="o">=</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">system_info</span><span class="p">(</span><span class="n">schedulers</span><span class="p">),</span>
</span><span class='line'><span class="nv">ProcCount</span>    <span class="o">=</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">system_info</span><span class="p">(</span><span class="n">process_count</span><span class="p">),</span>
</span><span class='line'><span class="nv">ProcLimit</span>    <span class="o">=</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">system_info</span><span class="p">(</span><span class="n">process_limit</span><span class="p">),</span>
</span><span class='line'><span class="nv">ProcMemUsed</span>  <span class="o">=</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">memory</span><span class="p">(</span><span class="n">processes_used</span><span class="p">),</span>
</span><span class='line'><span class="nv">ProcMemAlloc</span> <span class="o">=</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">memory</span><span class="p">(</span><span class="n">processes</span><span class="p">),</span>
</span><span class='line'><span class="nv">MemTot</span>       <span class="o">=</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">memory</span><span class="p">(</span><span class="n">total</span><span class="p">),</span>
</span><span class='line'><span class="nf">error_msg</span><span class="p">(</span><span class="s">&quot;abormal termination: &quot;</span>
</span><span class='line'>          <span class="s">&quot;</span><span class="si">~n</span><span class="s">   Scheduler id:                         </span><span class="si">~p</span><span class="s">&quot;</span>
</span><span class='line'>          <span class="s">&quot;</span><span class="si">~n</span><span class="s">   Num scheduler:                        </span><span class="si">~p</span><span class="s">&quot;</span>
</span><span class='line'>          <span class="s">&quot;</span><span class="si">~n</span><span class="s">   Process count:                        </span><span class="si">~p</span><span class="s">&quot;</span>
</span><span class='line'>          <span class="s">&quot;</span><span class="si">~n</span><span class="s">   Process limit:                        </span><span class="si">~p</span><span class="s">&quot;</span>
</span><span class='line'>          <span class="s">&quot;</span><span class="si">~n</span><span class="s">   Memory used by erlang processes:      </span><span class="si">~p</span><span class="s">&quot;</span>
</span><span class='line'>          <span class="s">&quot;</span><span class="si">~n</span><span class="s">   Memory allocated by erlang processes: </span><span class="si">~p</span><span class="s">&quot;</span>
</span><span class='line'>          <span class="s">&quot;</span><span class="si">~n</span><span class="s">   The total amount of memory allocated: </span><span class="si">~p</span><span class="s">&quot;</span>
</span><span class='line'>          <span class="s">&quot;</span><span class="si">~n~p</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="p">[</span><span class="nv">SchedId</span><span class="p">,</span> <span class="nv">SchedNum</span><span class="p">,</span> <span class="nv">ProcCount</span><span class="p">,</span> <span class="nv">ProcLimit</span><span class="p">,</span>
</span><span class='line'>           <span class="nv">ProcMemUsed</span><span class="p">,</span> <span class="nv">ProcMemAlloc</span><span class="p">,</span> <span class="nv">MemTot</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">]),</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
