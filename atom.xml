<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Evoup`s Blog]]></title>
  <link href="http://evoupsight.com/atom.xml" rel="self"/>
  <link href="http://evoupsight.com/"/>
  <updated>2013-10-22T15:04:45+08:00</updated>
  <id>http://evoupsight.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[局域网计算机和vmware虚拟机互ping]]></title>
    <link href="http://evoupsight.com/blog/2013/10/22/vmware-ping-in-lan/"/>
    <updated>2013-10-22T13:35:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/10/22/vmware-ping-in-lan</id>
    <content type="html"><![CDATA[<h2>情景描述</h2>

<p>在公司的WIN7电脑上装了vmware进行服务端的开发，通过socket和client端进行通信。现在局域网中有若干台服务器安装了客户端要与vmware虚拟机上的server端进行通讯。由于不是处于一个网段，无法互相ping得地址，进而不能交互，以下为解决问题的过程笔录。</p>

<!-- more -->


<h2>我的环境</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  ,____________________
</span><span class='line'>  |                   |  ,''''''''''''''''''|   ,------------------Y
</span><span class='line'>  |   gateway         |  |   gateway        |   |   gateway        |
</span><span class='line'>  |                   |__|                  |   |                  |
</span><span class='line'>      172.16.27.38    |  |  172.16.27.1     |   |  172.16.30.254   |
</span><span class='line'>  |                   |  |                  |   |                  |
</span><span class='line'>  `.................../  L__________________|   |__________________J
</span><span class='line'>           |                                              |
</span><span class='line'>           |                                              |
</span><span class='line'>           |                                              |
</span><span class='line'>           |                                              |
</span><span class='line'>           |                                              |
</span><span class='line'>           |                                              |
</span><span class='line'>   ,_______|______                                        |
</span><span class='line'>   |             |        ,''''''''''''''`.        ,'''''''''''''`.
</span><span class='line'>   |             |        |               |        |              |
</span><span class='line'>   | WIN7        |        |   freebsd8    |        |   freebsd9   |
</span><span class='line'>   |             |        |               |        |              |
</span><span class='line'>   | VMWARE Host |        | VMWARE client |        |              |
</span><span class='line'>   |             |'''''''''               |        |              |
</span><span class='line'>   |             |        |     server    |        |    client    |
</span><span class='line'>   | 172.16.27.37|        |192.168.216.145|        |172.16.30.184 |
</span><span class='line'>   |             |        |               |        |              |
</span><span class='line'>   |             |        |               |        |              |
</span><span class='line'>   |             |        |               |        |              |
</span><span class='line'>   '`'''''''''''''        `---------------'        '`''''''''''''''</span></code></pre></td></tr></table></div></figure>


<p>A）WIN7 vmware所在宿主机的网卡，地址为172.16.27.37/24(24代表子网掩码为255.255.255.0),默认网关172.16.27.38</p>

<p>B）freebsd8 服务器所在的vmware上原有一块NAT网卡em0，地址为192.168.216.145,一开始采用DHCP配置</p>

<p>C）freebsd9 客户端上只有一块网卡epair38b,地址为172.16.30.184,默认网关为172.16.30.254</p>

<p>记录：</p>

<h2>实现A和B互通</h2>

<p>A到B，VMWARE直接就实现了。
B到A，需要添加一块bridge方式的网卡em0。使用sysinstall添加后，配置为172.16.27.59/24,默认网关172.16.27.38</p>

<h2>实现A和C互通</h2>

<p>A到C，网络规划的时候直接就通了，不在同一网关，在win7的网卡属性TCP/IPv4属性的高级TCP/IP设置中，选IP设置选项卡，然后在默认网关中添加C所在的网关172.16.30.254
C到A，网络规划的时候指定了，/etc/resolv.conf中nameserver 172.16.27.1，另一个网关也直接能通到A，只需要打开WIN7的ping防火墙即可，可以google之。</p>

<h2>实现B和C互通</h2>

<p>B到C，经过以上操作已经可以了。
C到B，同上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非常便捷的ssh信任制作脚本ssh-copy-id]]></title>
    <link href="http://evoupsight.com/blog/2013/10/17/ssh-copy-id/"/>
    <updated>2013-10-17T17:29:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/10/17/ssh-copy-id</id>
    <content type="html"><![CDATA[<p>手册一把原来这个工具就是shell脚本，ssh-copy-id这个工具可以方便的把公钥直接拷贝到对方服务器信任列表。比起来回切换服务器拷贝公钥方便多了。</p>

<!-- more -->


<p>实验：hostA: 172.16.30.184:22  hostB:211.136.104.189:9999</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;ssh-keygen -t rsa
</span><span class='line'>
</span><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>
</span><span class='line'>Enter file in which to save the key <span class="o">(</span>/home/yin/.ssh/id_rsa<span class="o">)</span>:
</span><span class='line'>
</span><span class='line'>/home/yin/.ssh/id_rsa already exists.
</span><span class='line'>
</span><span class='line'>Overwrite <span class="o">(</span>y/n<span class="o">)</span>? y
</span><span class='line'>
</span><span class='line'>Enter passphrase <span class="o">(</span>empty <span class="k">for </span>no passphrase<span class="o">)</span>:
</span><span class='line'>
</span><span class='line'>Enter same passphrase again:
</span><span class='line'>
</span><span class='line'>Your identification has been saved in /home/yin/.ssh/id_rsa.
</span><span class='line'>
</span><span class='line'>Your public key has been saved in /home/yin/.ssh/id_rsa.pub.
</span><span class='line'>
</span><span class='line'>The key fingerprint is:
</span><span class='line'>
</span><span class='line'>74:59:16:2c:01:0c:2a:21:b4:49:8d:0e:51:2f:d9:a4 yin@yin-arch.madhouse.cn
</span><span class='line'>
</span><span class='line'>The key<span class="err">&#39;</span>s randomart image is:
</span><span class='line'>
</span><span class='line'>+--<span class="o">[</span> RSA 2048<span class="o">]</span>----+
</span><span class='line'>
</span><span class='line'>|+<span class="o">==</span> . .o...o+.   |
</span><span class='line'>
</span><span class='line'>|oooO .  . .+.    |
</span><span class='line'>
</span><span class='line'>|ooE +   . o.     |
</span><span class='line'>
</span><span class='line'>| . o   . .       |
</span><span class='line'>
</span><span class='line'>|        S        |
</span><span class='line'>
</span><span class='line'>|                 |
</span><span class='line'>
</span><span class='line'>|                 |
</span><span class='line'>
</span><span class='line'>|                 |
</span><span class='line'>
</span><span class='line'>|                 |
</span><span class='line'>
</span><span class='line'>+-----------------+
</span></code></pre></td></tr></table></div></figure>


<p>然后运行如下脚本，按照提示输入密码即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-copy-id <span class="s1">&#39;-p 9999 -i /usr/home/yin/.ssh/id_rsa.pub yin@211.136.104.189&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考：</p>

<p><a href="http://mikegerwitz.com/ssh-copy-id-and-sshd-port/">http://mikegerwitz.com/ssh-copy-id-and-sshd-port/</a></p>

<p><a href="http://blogread.cn/it/article/6103">http://blogread.cn/it/article/6103</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下模拟df.c源码]]></title>
    <link href="http://evoupsight.com/blog/2013/10/16/linux-df-source-c-code/"/>
    <updated>2013-10-16T18:09:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/10/16/linux-df-source-c-code</id>
    <content type="html"><![CDATA[<p>主要实现df的基本不带参数的功能，连界面都不一样，凑活用，见代码：</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;mntent.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/vfs.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="k">struct</span> <span class="n">mntent</span> <span class="o">*</span><span class="n">ent</span><span class="p">;</span>
</span><span class='line'> <span class="kt">FILE</span> <span class="o">*</span><span class="n">aFile</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="n">aFile</span> <span class="o">=</span> <span class="n">setmntent</span><span class="p">(</span><span class="s">&quot;/etc/mtab&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="n">aFile</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">perror</span><span class="p">(</span><span class="s">&quot;setmntent&quot;</span><span class="p">);</span>
</span><span class='line'>   <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="k">struct</span> <span class="n">statfs</span> <span class="n">diskInfo</span><span class="p">;</span>
</span><span class='line'> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">blocksize</span><span class="p">;</span>
</span><span class='line'> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">totalsize</span><span class="p">;</span>
</span><span class='line'> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">freeDisk</span><span class="p">;</span>
</span><span class='line'> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">availsize</span><span class="p">;</span>
</span><span class='line'> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">used</span><span class="p">;</span>
</span><span class='line'> <span class="k">while</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="p">(</span><span class="n">ent</span> <span class="o">=</span> <span class="n">getmntent</span><span class="p">(</span><span class="n">aFile</span><span class="p">)))</span> <span class="p">{</span> <span class="c1">//获取各挂载点的信息</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;=========================================================================\</span>
</span><span class='line'><span class="s">==================================================</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>   <span class="c1">//根据挂载点，确认磁盘空间</span>
</span><span class='line'>   <span class="n">statfs</span><span class="p">(</span><span class="n">ent</span><span class="o">-&gt;</span><span class="n">mnt_dir</span><span class="p">,</span><span class="o">&amp;</span><span class="n">diskInfo</span><span class="p">);</span>
</span><span class='line'>   <span class="n">blocksize</span> <span class="o">=</span> <span class="n">diskInfo</span><span class="p">.</span><span class="n">f_bsize</span><span class="p">;</span> <span class="c1">//每个block里面包含的字节数</span>
</span><span class='line'>   <span class="n">totalsize</span> <span class="o">=</span> <span class="n">blocksize</span> <span class="o">*</span> <span class="n">diskInfo</span><span class="p">.</span><span class="n">f_blocks</span><span class="p">;</span> <span class="c1">//总的字节数</span>
</span><span class='line'>   <span class="n">freeDisk</span> <span class="o">=</span> <span class="n">diskInfo</span><span class="p">.</span><span class="n">f_bfree</span><span class="o">*</span><span class="n">blocksize</span><span class="p">;</span> <span class="c1">//再计算下剩余的空间大小</span>
</span><span class='line'>   <span class="n">availsize</span> <span class="o">=</span> <span class="n">diskInfo</span><span class="p">.</span><span class="n">f_bavail</span><span class="o">*</span><span class="n">blocksize</span><span class="p">;</span>
</span><span class='line'>   <span class="c1">//&gt;10换算成KB</span>
</span><span class='line'>   <span class="n">used</span><span class="o">=</span><span class="n">totalsize</span><span class="o">-</span><span class="n">freeDisk</span><span class="p">;</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;FS == %s MOUNTPOINT == %s TOTAL_SIZE == %lu KB DISK_FREE == %ld KB USED ==\</span>
</span><span class='line'><span class="s">%ld KB avail == %ld KB</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ent</span><span class="o">-&gt;</span><span class="n">mnt_fsname</span><span class="p">,</span> <span class="n">ent</span><span class="o">-&gt;</span><span class="n">mnt_dir</span><span class="p">,(</span><span class="kt">int</span><span class="p">)(</span><span class="n">totalsize</span><span class="o">&gt;&gt;</span><span class="mi">10</span><span class="p">),</span>
</span><span class='line'><span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">freeDisk</span><span class="o">&gt;&gt;</span><span class="mi">10</span><span class="p">),(</span><span class="kt">int</span><span class="p">)(</span><span class="n">used</span><span class="o">&gt;&gt;</span><span class="mi">10</span><span class="p">),(</span><span class="kt">int</span><span class="p">)(</span><span class="n">availsize</span><span class="o">&gt;&gt;</span><span class="mi">10</span><span class="p">));</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="n">endmntent</span><span class="p">(</span><span class="n">aFile</span><span class="p">);</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;=========================================================================\</span>
</span><span class='line'><span class="s">==================================================</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>附一张运行截图
<img src="http://evoupsight.com/images/evoup/df.png" alt="Alt text" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[erlang版的long2ip函数]]></title>
    <link href="http://evoupsight.com/blog/2013/10/09/erlang-long2ip/"/>
    <updated>2013-10-09T17:56:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/10/09/erlang-long2ip</id>
    <content type="html"><![CDATA[<p>工作中参考网络文章整理了一个整形转IP地址的函数。直接看代码了。</p>

<figure class='code'><figcaption><span>erlang代码片段 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%从整形转换为IP地址元组</span>
</span><span class='line'><span class="nf">long2ip</span><span class="p">(</span><span class="nv">IpInteger</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Integer_to_ip</span><span class="o">=</span><span class="k">fun</span><span class="p">(</span><span class="nv">Ip</span><span class="p">)</span><span class="o">-&gt;</span> <span class="p">{</span><span class="nv">Ip</span> <span class="ow">bsr</span> <span class="mi">24</span><span class="p">,</span> <span class="p">(</span><span class="nv">Ip</span> <span class="ow">band</span> <span class="mi">16711680</span><span class="p">)</span> <span class="ow">bsr</span> <span class="mi">16</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">Ip</span> <span class="ow">band</span> <span class="mi">65280</span><span class="p">)</span> <span class="ow">bsr</span> <span class="mi">8</span><span class="p">,</span> <span class="nv">Ip</span> <span class="ow">band</span> <span class="mi">255</span><span class="p">}</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">Integer_to_ip</span><span class="p">(</span><span class="nv">IpInteger</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样子使用
long2ip（3232290954).
{192,168,216,138}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客搬家到github]]></title>
    <link href="http://evoupsight.com/blog/2013/09/29/change-blog-to-github/"/>
    <updated>2013-09-29T16:27:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/09/29/change-blog-to-github</id>
    <content type="html"><![CDATA[<p>之前使用了将近一年的google app engine建博客，GFW间断性地对ghs.googlehosted.com进行屏蔽，同时用google帐号评论也太逊了，换个吧，开篇！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于log4erl的localtime_to_universaltime报错]]></title>
    <link href="http://evoupsight.com/blog/2013/07/29/log4erl-locatime-to-universaltime-exit-timezone/"/>
    <updated>2013-07-29T09:46:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/07/29/log4erl-locatime-to-universaltime-exit-timezone</id>
    <content type="html"><![CDATA[<h2>问题症状：</h2>

<p>项目遇到编译后运行的一个问题，logerl报错之</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">**</span> <span class="p">{</span><span class="n">appender_died</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>       <span class="p">{</span><span class="n">&#39;EXIT&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>           <span class="p">{</span><span class="n">badarg</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>               <span class="p">[{</span><span class="n">erlang</span><span class="p">,</span><span class="nb">localtime_to_universaltime</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">[{</span> <span class="p">{</span><span class="mi">2013</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">19</span><span class="p">},{</span><span class="mi">15</span><span class="p">,</span><span class="mi">52</span><span class="p">,</span><span class="mi">35</span><span class="p">}</span> <span class="p">},</span><span class="n">true</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">[]},</span>
</span></code></pre></td></tr></table></div></figure>


<p>看来是无法进行本地时间和UTC的转换，继续尝试一下这个localtime_to_universaltime函数</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nv">Eshell</span> <span class="nv">V5</span><span class="p">.</span><span class="mi">9</span><span class="p">.</span><span class="mi">1</span>  <span class="p">(</span><span class="n">abort</span> <span class="n">with</span> <span class="err">^</span><span class="nv">G</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nv">DateTime</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span><span class="mi">2008</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">},{</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span> <span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span> <span class="p">{</span><span class="mi">2008</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">},{</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">localtime_to_universaltime</span><span class="p">(</span><span class="nv">DateTime</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="o">**</span> <span class="n">exception</span> <span class="nn">error</span><span class="p">:</span> <span class="n">bad</span> <span class="n">argument</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">in</span> <span class="n">function</span>  <span class="nn">erlang</span><span class="p">:</span><span class="nb">localtime_to_universaltime</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">called</span> <span class="n">as</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">localtime_to_universaltime</span><span class="p">({</span> <span class="p">{</span><span class="mi">2008</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">},{</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span> <span class="p">},</span><span class="n">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>看来是个log4erl遭遇了在freebsd下调用localtime_to_universaltime函数的bug，原因可能是作者没有考虑到下面的状况：
<a href="http://erlang.org/pipermail/erlang-bugs/2008-May/000787.html" target=_BLANK><a href="http://erlang.org/pipermail/erlang-bugs/2008-May/000787.html">http://erlang.org/pipermail/erlang-bugs/2008-May/000787.html</a></a></p>

<h2>解决方法：</h2>

<p>我的做法是使用sysinstall指令把时区从UTC调整到CST，之后运行居然就一切OK了。</p>

<h2>时区调整：</h2>

<p>关于log4erl如何调整时区到本地时间，查看手册<a href="https://github.com/ahmednawras/log4erl/blob/master/API.txt" target=_BLANK><a href="https://github.com/ahmednawras/log4erl/blob/master/API.txt">https://github.com/ahmednawras/log4erl/blob/master/API.txt</a></a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> I - ISO format with universal GMT <span class="nb">time</span> <span class="o">(</span>equivilant to <span class="s2">&quot;%jT%TZ&quot;</span><span class="o">)</span>.
</span><span class='line'> S - ISO format with <span class="nb">local time </span>and <span class="nb">time </span>zone offset
</span></code></pre></td></tr></table></div></figure>


<p> 也就是在配置中改成%S就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【How to】使用basho的erlang-protobuffs和PHP通讯]]></title>
    <link href="http://evoupsight.com/blog/2013/05/27/erlang-protobuffs-with-php/"/>
    <updated>2013-05-27T13:49:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/05/27/erlang-protobuffs-with-php</id>
    <content type="html"><![CDATA[<p>这几天通过查阅相关资料，终于实现了php和erlang的相互通讯。详细的protocolbuf的入门，可以参见本问最后的参考链接。有文章说google官网实现的protobuf的erlang接口不是很好用，推荐使用basho的erlang-protobuffs修改版本。于是摸索了一番，终于勉强可以使用了，现先介绍如何使用该工具生成消息的erlang源文件。米聊用的分布式数据库riak就是basho公司开发的，其中采用了修改版erlang-protobuffs。</p>

<!-- more -->


<p>可以在这里下载，git://github.com/basho/erlang_protobuffs.git</p>

<p>先安装，我基本没有很好的安装，直接放到临时路径，要生成源代码的时候，进入该目录，生成，然后复制生成好的源代码文件到自己的项目目录里。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>erlang_protobuffs
</span><span class='line'>make all
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以使用了，接下来给出一个测试的protobuf文件</p>

<figure class='code'><figcaption><span>test.proto </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='protobuf'><span class='line'><span class="kd">message</span> <span class="nc">test</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">required</span> <span class="kt">string</span> <span class="na">test1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>进入ebin目录准备生成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>ebin
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="n">erl</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">protobuffs_compile</span><span class="p">:</span><span class="nf">generate_source</span><span class="p">(</span><span class="s">&quot;test.proto&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span><span class="nv">INFO</span> <span class="nv">REPORT</span><span class="o">====</span> <span class="mi">27</span><span class="o">-</span><span class="nv">May</span><span class="o">-</span><span class="mi">2013</span><span class="p">::</span><span class="mi">15</span><span class="p">:</span><span class="mi">31</span><span class="p">:</span><span class="mi">13</span> <span class="o">===</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Writing</span> <span class="n">header</span> <span class="n">file</span> <span class="n">to</span> <span class="s">&quot;test_pb.hrl&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span><span class="nv">INFO</span> <span class="nv">REPORT</span><span class="o">====</span> <span class="mi">27</span><span class="o">-</span><span class="nv">May</span><span class="o">-</span><span class="mi">2013</span><span class="p">::</span><span class="mi">15</span><span class="p">:</span><span class="mi">31</span><span class="p">:</span><span class="mi">13</span> <span class="o">===</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Writing</span> <span class="n">src</span> <span class="n">file</span> <span class="n">to</span> <span class="s">&quot;test_pb.erl&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ok</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样生成就完毕了，一共生成2个文件test_pb.hrl和test_pb.erl。</p>

<p>然后写一个server端测试，照搬erlang程序设计中的最入门的单线程例子改了改，一处理完就断的那种,在代码里引入该文件。</p>

<figure class='code'><figcaption><span>server.erl start:51 mark:51,54-55 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">server</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">compile</span><span class="p">(</span><span class="n">export_all</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">import</span><span class="p">(</span><span class="n">lists</span><span class="p">,</span> <span class="p">[</span><span class="n">reverse</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;test_pb.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start_nano_server</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Listen</span><span class="p">}</span> <span class="o">=</span> <span class="nn">gen_tcp</span><span class="p">:</span><span class="nf">listen</span><span class="p">(</span><span class="mi">2345</span><span class="p">,</span> <span class="p">[</span><span class="n">binary</span><span class="p">,</span> <span class="p">{</span><span class="n">packet</span><span class="p">,</span> <span class="mi">4</span><span class="p">},</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">{</span><span class="n">reuseaddr</span><span class="p">,</span> <span class="n">true</span><span class="p">},</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">{</span><span class="n">active</span><span class="p">,</span> <span class="n">true</span><span class="p">}]),</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Socket</span><span class="p">}</span> <span class="o">=</span> <span class="nn">gen_tcp</span><span class="p">:</span><span class="nf">accept</span><span class="p">(</span><span class="nv">Listen</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>   <span class="nn">gen_tcp</span><span class="p">:</span><span class="nf">close</span><span class="p">(</span><span class="nv">Listen</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">loop</span><span class="p">(</span><span class="nv">Socket</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">Socket</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">receive</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">{</span><span class="n">tcp</span><span class="p">,</span> <span class="nv">Socket</span><span class="p">,</span> <span class="nv">Bin</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>       <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Server received binary = </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,[</span><span class="nv">Bin</span><span class="p">]),</span>
</span><span class='line'>
</span><span class='line'>       <span class="nv">Msg</span><span class="o">=</span><span class="nn">test_pb</span><span class="p">:</span><span class="nf">decode_test</span><span class="p">(</span><span class="nv">Bin</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>       <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Server (unpacked)  </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,[</span><span class="nv">Msg</span><span class="p">]),</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">loop</span><span class="p">(</span><span class="nv">Socket</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">{</span><span class="n">tcp_closed</span><span class="p">,</span> <span class="nv">Socket</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>       <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Server socket closed</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>client的代码</p>

<figure class='code'><figcaption><span>client.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">client</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">compile</span><span class="p">(</span><span class="n">export_all</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">import</span><span class="p">(</span><span class="n">lists</span><span class="p">,</span> <span class="p">[</span><span class="n">reverse</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;test_pb.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">nano_client_eval</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Socket</span><span class="p">}</span> <span class="o">=</span>
</span><span class='line'>
</span><span class='line'>   <span class="nn">gen_tcp</span><span class="p">:</span><span class="nf">connect</span><span class="p">(</span><span class="s">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">2345</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>       <span class="p">[</span><span class="n">binary</span><span class="p">,</span> <span class="p">{</span><span class="n">packet</span><span class="p">,</span> <span class="mi">4</span><span class="p">}]),</span>
</span><span class='line'>
</span><span class='line'>   <span class="nv">Test</span><span class="o">=</span><span class="nl">#test</span><span class="p">{</span><span class="n">test1</span><span class="o">=</span><span class="s">&quot;test1&quot;</span><span class="p">},</span>
</span><span class='line'>
</span><span class='line'>   <span class="nv">Str</span><span class="o">=</span><span class="nn">test_pb</span><span class="p">:</span><span class="nf">encode_test</span><span class="p">(</span><span class="nv">Test</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ok</span> <span class="o">=</span> <span class="nn">gen_tcp</span><span class="p">:</span><span class="nb">send</span><span class="p">(</span><span class="nv">Socket</span><span class="p">,</span> <span class="nv">Str</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>   <span class="nn">gen_tcp</span><span class="p">:</span><span class="nf">close</span><span class="p">(</span><span class="nv">Socket</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要说明的是packet,4这个参数，代表每个数据包的前4个字节为消息头，该头标识了消息体的长度。这样互通是没有问题的，erlang自动为数据包的加上前4个字节的消息头。</p>

<p>接下来难点是php作为客户端，要手工打包消息然后发送。
首先是下载php版本的<a href="https://code.google.com/p/pb4php/">https://code.google.com/p/pb4php/</a>
然后，解压得到protocolbuf，接着创建你的项目，把protocolbuf放到该项目文件夹的根目录下。一样要生成源代码。注意，pb4php不是很智能，如果直接.proto文件中=1没有空格，而不是写成xx = 1是会报错的！</p>

<figure class='code'><figcaption><span>test.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">require_once</span><span class="p">(</span><span class="s2">&quot;./protocolbuf/parser/pb_parser.php&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$parser</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PBParser</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$parser</span><span class="o">-&gt;</span><span class="na">parse</span><span class="p">(</span><span class="s2">&quot;./test.proto&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;done</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>运行test.php后生成pb_proto_test.php</p>

<p>php版本的client的代码</p>

<figure class='code'><figcaption><span>client.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">require_once</span><span class="p">(</span><span class="s2">&quot;./protocolbuf/message/pb_message.php&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">require_once</span><span class="p">(</span><span class="s2">&quot;./pb_proto_test.php&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$test</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">test</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$test</span><span class="o">-&gt;</span><span class="na">set_test1</span><span class="p">(</span><span class="s2">&quot;test php&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$string</span> <span class="o">=</span> <span class="nv">$test</span><span class="o">-&gt;</span><span class="na">SerializeToString</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$sock</span><span class="o">=@</span><span class="nb">socket_create</span><span class="p">(</span><span class="nx">AF_INET</span><span class="p">,</span> <span class="nx">SOCK_STREAM</span><span class="p">,</span> <span class="nx">getprotobyname</span><span class="p">(</span><span class="s1">&#39;tcp&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$sock</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="nb">socket_connect</span><span class="p">(</span><span class="nv">$sock</span><span class="p">,</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="mi">2345</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="nv">$msg</span> <span class="o">=</span> <span class="nx">pack_data</span><span class="p">(</span><span class="nv">$string</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="nb">file_put_contents</span><span class="p">(</span><span class="nb">dirname</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;/resmessage&#39;</span><span class="p">,</span><span class="nv">$msg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="nv">$sent</span> <span class="o">=</span> <span class="o">@</span><span class="nb">socket_write</span><span class="p">(</span><span class="nv">$sock</span><span class="p">,</span> <span class="nv">$msg</span><span class="p">,</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$msg</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">pack_data</span> <span class="p">(</span><span class="nv">$data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="nv">$head</span> <span class="o">=</span><span class="nb">pack</span><span class="p">(</span><span class="s2">&quot;H*&quot;</span><span class="p">,</span> <span class="nx">to_hex_str</span> <span class="p">(</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$data</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'>   <span class="nv">$body</span><span class="o">=</span><span class="nb">pack</span><span class="p">(</span><span class="s2">&quot;A*&quot;</span><span class="p">,</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="nv">$head</span><span class="o">.</span><span class="nv">$body</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">to_hex_str</span> <span class="p">(</span><span class="nv">$num</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="nv">$str</span> <span class="o">=</span> <span class="nb">dechex</span><span class="p">(</span><span class="nv">$num</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="nv">$str</span> <span class="o">=</span> <span class="nb">str_pad</span><span class="p">(</span><span class="nv">$str</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="s2">&quot;0&quot;</span><span class="p">,</span><span class="nx">STR_PAD_LEFT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="nv">$str</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>运行上面的php客户端可以和erlang版本的server.erl服务端实现二进制CS互通。期间由于不理解erlang的packet含义，用抓包查了一下才搞定的。不明白原理的，可以尝试抓一下包，然后测试。同时获取了消息体的长度后，可用php的函数dechex()函数获取十六进制代码，然后有这样一个规律。如果erlang服务端packet参数后为2，则str_pad($str,4,&ldquo;0&rdquo;,STR_PAD_LEFT)然后打包消息头，如果服务端packet参数后跟4，则str_pad($str,8,&ldquo;0&rdquo;,STR_PAD_LEFT)然后打包消息头。</p>

<p>最后，还有一个要注意，erlang版本的protocolbuf不知道为什么，int32和int64最多不能超过10位，在项目里我一概成了string类型。其他，optinal类型对于不一定出现的数据也是很好用的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[How to]使用rebar构建erlang 项目]]></title>
    <link href="http://evoupsight.com/blog/2013/05/04/rebar-build-erlang-project/"/>
    <updated>2013-05-04T14:41:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/05/04/rebar-build-erlang-project</id>
    <content type="html"><![CDATA[<p>rebar这个程序其实是个escript脚本，通过它可以对erlang项目创建、编译、生成和升级。之前一直使用着《Erlang/OTP并发编程实战》EMakefile的方法，进行项目的编译，也很简单，但是后续的又有一套发布的机制。现在很多项目在用rebar，于是我也试了一下，没想到问题还蛮多的，在这里记一下，我只是用了绕过的方法不是很好，因为时间不允许，这里先SORRY一下。我这里的环境为freebsd9.0 amd64 (elrang5.9.1 R15B01),erlang的其他版本，请参看wiki的Release-handling部分调整生成环节的命令。</p>

<p>1）第一步要获取rebar程序，两种方法：自己编译和直接下载。</p>

<!-- more -->


<p>自己编译：
<a href="https://github.com/rebar/rebar">https://github.com/rebar/rebar</a>
直接按照README.md的方法编译出一个rebar。</p>

<p>直接下载：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -o rebar http://cloud.github.com/downloads/basho/rebar/rebar
</span></code></pre></td></tr></table></div></figure>


<p>这个就直接可用了。</p>

<p>无论哪种方式搞定之后，进入自己项目的根目录都要chmod +x rebar给它可执行权限。</p>

<p>2）创建项目</p>

<p>在项目的根目录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/exemplar <span class="nv">$ </span>mkdir -p apps/exemplar
</span><span class='line'>
</span><span class='line'>~/exemplar <span class="nv">$ </span><span class="nb">cd </span>apps/exemplar
</span><span class='line'>
</span><span class='line'>~/exemplar <span class="nv">$ </span>rebar create-app <span class="nv">appid</span><span class="o">=</span>exemplar
</span></code></pre></td></tr></table></div></figure>


<p>这样就在项目根目录下得到了app文件夹，该文件夹下的src文件夹中默认有三个项目源文件，一个src文件，一个主文件，一个监督者文件。接下来就像往常一样的编写erlang代码。（甚至我当初直接在该目录用Emakefile的方式进行调试也是可以的，只是路径稍有变化，这里只带过）</p>

<p>3）生成发布版</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/exemplar <span class="nv">$ </span>mkdir rel
</span><span class='line'>
</span><span class='line'>~/exemplar <span class="nv">$ </span><span class="nb">cd </span>rel
</span></code></pre></td></tr></table></div></figure>


<p>接下来非常怂的问题来了，编辑reltool.config时wiki上说把</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">sys</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>
</span><span class='line'>       <span class="p">{</span><span class="n">lib_dirs</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="n">sys</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">{</span><span class="n">lib_dirs</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;../apps&quot;</span><span class="p">]},</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实还需要加上依赖的路径</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">lib_dirs</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;../apps&quot;</span><span class="p">,</span> <span class="s">&quot;../deps&quot;</span><span class="p">]},</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样才对。</p>

<p>然后还有在  {rel, &ldquo;exemplar&rdquo;, &ldquo;1&rdquo;,</p>

<p>后面一段，生成发布的时候还会提醒要求带上sasl、inet、crypto
而在 {excl_app_filters, [&ldquo;.gitignore&rdquo;]},后面
依次相应要带上</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'>   <span class="p">{</span><span class="n">app</span><span class="p">,</span> <span class="n">sasl</span><span class="p">,</span>   <span class="p">[{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">include</span><span class="p">}]},</span>
</span><span class='line'>   <span class="p">{</span><span class="n">app</span><span class="p">,</span> <span class="n">mochiweb</span><span class="p">,</span>   <span class="p">[{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">include</span><span class="p">}]},</span>
</span><span class='line'>   <span class="p">{</span><span class="n">app</span><span class="p">,</span> <span class="n">inets</span><span class="p">,</span>   <span class="p">[{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">include</span><span class="p">}]},</span>
</span><span class='line'>   <span class="p">{</span><span class="n">app</span><span class="p">,</span> <span class="n">crypto</span><span class="p">,</span>   <span class="p">[{</span><span class="n">incl_cond</span><span class="p">,</span> <span class="n">include</span><span class="p">}]},</span>
</span></code></pre></td></tr></table></div></figure>


<p>     <br/>
到这里reltool.config的麻烦才告一段落。
最后回到根目录
rebar.config的内容如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">deps</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="n">mochiweb</span><span class="p">,</span> <span class="s">&quot;1.5.1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/mochi/mochiweb.git&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">{</span><span class="n">tag</span><span class="p">,</span> <span class="s">&quot;1.5.1&quot;</span><span class="p">}}},</span>
</span><span class='line'>        <span class="p">{</span><span class="n">&#39;log4erl&#39;</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/ahmednawras/log4erl.git&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&quot;master&quot;</span><span class="p">}}</span>
</span><span class='line'><span class="p">{</span><span class="n">sub_dirs</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;apps/exemplar&quot;</span><span class="p">,</span> <span class="s">&quot;rel&quot;</span><span class="p">]}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>好了，rebar.config，我这里也不多说，反正我是试了各种版本，要么生成的so变成了exemplar_drv.so，要么干脆就无法生成。我最后放到Makefile里一并解决了。
下面是这个Makefile的内容，其中make.sh是自行生成erlang的NIF外围C/C++程序扩展so的编译脚本，这个要注意一下(我没有创建apps/c_src这个文件夹，而是在apps文件夹下又放了个files文件，里面是c的源文件，这样make.sh的内容就大概是gcc -Wall -o $APP_PREFIX/priv/nif.so -fpic -shared -I $ERL_LIB/erts-$ERL_VER/include/ apps/files/nif.c 这样子，反正还是要生成到priv路径就对了)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="err">cat</span> <span class="err">Makefile</span>
</span><span class='line'><span class="nf">all</span><span class="o">:</span> <span class="m">compile</span>
</span><span class='line'><span class="nf">depends</span><span class="o">:</span>
</span><span class='line'>        ./rebar get-deps
</span><span class='line'>        ./rebar update-deps
</span><span class='line'><span class="nf">compile</span><span class="o">:</span>
</span><span class='line'>        ./rebar compile
</span><span class='line'>        ./make.sh
</span><span class='line'><span class="nf">clean</span><span class="o">:</span>
</span><span class='line'>        ./rebar clean
</span><span class='line'><span class="nf">release</span><span class="o">:</span>
</span><span class='line'>        ./rebar generate
</span><span class='line'>        mkdir ./rel/exemplar/priv
</span><span class='line'>        cp -r ./apps/exemplar/priv/* ./rel/exemplar/priv/
</span><span class='line'>        chmod +x ./rel/exemplar/bin/exemplar
</span><span class='line'><span class="nf">.PHONY</span><span class="o">:</span> <span class="m">all depends compile</span>
</span></code></pre></td></tr></table></div></figure>


<p>做Makefile的方法，也是我参考了github上一些开源erlang项目的想到的办法。
所有这一切做完按照如下方式就可以生成发布了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>make clean
</span><span class='line'>make depends
</span></code></pre></td></tr></table></div></figure>


<p></p>

<pre><code>编辑./deps/log4erl/src/log4erl.app.src文件，把{vsn, "0.9.0"}修改为{vsn, ""}，新版本的没试过，可能版本号不一致，请自行修改！
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>make release
</span></code></pre></td></tr></table></div></figure>


<p>基本上要注意的就是这些，以下为参考链接：</p>

<p><a href="https://github.com/rebar/rebar/wiki">https://github.com/rebar/rebar/wiki</a></p>

<p><a href="https://github.com/rebar/rebar/wiki/Release-handling">https://github.com/rebar/rebar/wiki/Release-handling</a></p>

<p><a href="http://cryolite.iteye.com/blog/1159448">http://cryolite.iteye.com/blog/1159448</a>  (rebar工具使用备忘录，这个比较早期so_specs已经被port_specs取代了，有需要的联系起来看看吧)</p>

<p><a href="http://blog.linezing.com/2011/04/rebar%EF%BC%9Aerlang%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7">http://blog.linezing.com/2011/04/rebar%EF%BC%9Aerlang%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[erlang调用C库函数(NIF 方式)]]></title>
    <link href="http://evoupsight.com/blog/2013/03/01/erlang-c-nif/"/>
    <updated>2013-03-01T13:39:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/03/01/erlang-c-nif</id>
    <content type="html"><![CDATA[<p>新客户端要求节省系统开销，对于监控的项目，如cpu的load不要通过shell的方式（如top）来获取，通过阅读先关开源软件的代码发现了getloadavg这个C标准库函数。考虑erlang三种和C外围程序交互的方式中，如果开发同步程序的话，NIF（本地函数）是在最高效的。但也要注意一下不要把费事阻塞的操作写到NIF中去，否则会vm会一直等待。</p>

<p>好久没写C的动态库了，记得上次还是学习vc的时候去调用dll,还好unix下做动态库很容易。这就开始，拿到《erlang OTP并发编程》翻到十二章，发现该书OTP的版本有R13和R14。我手头的版本是R15，</p>

<!-- more -->


<p>参考了例子和这篇文章《Erlang NIF简析》<a href="http://blog.csdn.net/keyeagle/article/details/7009208">http://blog.csdn.net/keyeagle/article/details/7009208</a></p>

<p>终于实验成功。</p>

<figure class='code'><figcaption><span>cgetloadavg.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;erl_nif.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">ERL_NIF_TERM</span> <span class="nf">getloadavg_ex</span><span class="p">(</span><span class="n">ErlNifEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="n">ERL_NIF_TERM</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="kt">double</span> <span class="n">load</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>   <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">30</span><span class="p">];</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="n">getloadavg</span><span class="p">(</span><span class="n">load</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">==-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;%f&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;%f&quot;</span><span class="p">,</span> <span class="n">load</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">enif_make_string</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">ERL_NIF_LATIN1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">ErlNifFunc</span> <span class="n">nif_funcs</span><span class="p">[]</span> <span class="o">=</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="p">{</span><span class="s">&quot;getloadavg_ex&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">getloadavg_ex</span><span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">ERL_NIF_INIT</span><span class="p">(</span><span class="n">getloadtest</span><span class="p">,</span><span class="n">nif_funcs</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="nb">NULL</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下写下简单的调用过程：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gcc -o getloadtest.so -fpic -shared -I /usr/local/lib/erlang/erts-5.9.1/include/ cgetloadavg.c
</span></code></pre></td></tr></table></div></figure>


<p>还没有在app里试验，如果是标准app</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gcc -o ./priv/getloadtest.so -fpic -shared -I /usr/local/lib/erlang/erts-5.9.1/include/ cgetloadavg.c
</span></code></pre></td></tr></table></div></figure>


<p>就可以生成供NIF调用的动态链接库</p>

<p>然后是erlang的，调用很简单：</p>

<figure class='code'><figcaption><span>getloadtest.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">getloadtest</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">getloadavg_ex</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">on_load</span><span class="p">(</span><span class="n">init</span><span class="o">/</span><span class="mi">0</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">init</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>   <span class="nn">erlang</span><span class="p">:</span><span class="nf">load_nif</span><span class="p">(</span><span class="s">&quot;./getloadtest&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">getloadavg_ex</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>   <span class="s">&quot;NIF library not loaded&quot;</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Eshell V5.9.1  <span class="o">(</span>abort with ^G<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>1&gt; c<span class="o">(</span>getloadtest<span class="o">)</span>.
</span><span class='line'>
</span><span class='line'><span class="o">{</span>ok,getloadtest<span class="o">}</span>
</span><span class='line'>
</span><span class='line'>2&gt; getloadtest:getloadavg_ex<span class="o">()</span>.
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;2.263184&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>reference:</p>

<p><a href="http://www.erlang.org/doc/tutorial/nif.html">http://www.erlang.org/doc/tutorial/nif.html</a></p>

<p><a href="http://www.erlang.org/doc/man/erl_nif.html">http://www.erlang.org/doc/man/erl_nif.html</a></p>

<p><a href="http://blog.csdn.net/d52787790/article/details/7103288">http://blog.csdn.net/d52787790/article/details/7103288</a></p>

<p><a href="http://blog.csdn.net/keyeagle/article/details/7009208">http://blog.csdn.net/keyeagle/article/details/7009208</a></p>

<p><a href="http://www.freebsd.org/cgi/man.cgi?query=getloadavg">http://www.freebsd.org/cgi/man.cgi?query=getloadavg</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[转]Erlang监测系统CPU、内存和磁盘]]></title>
    <link href="http://evoupsight.com/blog/2013/02/27/erlang-monitor-cpu-memory-disk/"/>
    <updated>2013-02-27T13:59:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/02/27/erlang-monitor-cpu-memory-disk</id>
    <content type="html"><![CDATA[<p>os_mon
Erlang的os_mon服务中提供了一些用于监测系统信息的服务</p>

<p><font color="red">(PS:经过测试，freebsd上使用get_disk_data无法获取到磁盘的数据)</font></p>

<p>cpu_sup：监测CPU负载和使用率（Unix）</p>

<p>disksup：监测磁盘（Unix、Windows）</p>

<p>memsup：监测内存（Unix、Windows、VxWorks）</p>

<p>os_sup：监测系统日志（Solaris、Windows）</p>

<!-- more -->


<p>使用os_mon进行监测先必须启动监测服务application:start(os_mon) ，因为os_mon服务依赖于sasl服务，先必须启
动sasl服务，application:start(sasl) ，否则会返回{ error,{not_started,sasl} } 错误。os_mon提供的四种监测服
务中默认会启动三种服务：cpu_sup、disksup和memsup，如果需要自己设置启动的监测服务，可以修改os_mon.app
文件中的配置参数</p>

<p>start_cpu_sup = bool()</p>

<p>start_disksup = bool()</p>

<p>start_memsup = bool()</p>

<p>start_os_sup = bool()</p>

<p>等于true时启动，等于false时不启动。os_mon.app文件在erlang的安装目录下../erl5.8.3/lib/os_mon-2.2.5
/ebin 。</p>

<p>cpu_sup</p>

<p>cpu监测在5.8.3版本中只能用于Solaris和Linux操作系统，负载值与Unix进程运行前在队列中的排队时间成正比，
因此值越大意味着负载越高，返回值除以256为rup和top命令中显示的值。avg1/0,avg5/0 和avg15/0 函数计算负载，
util/0 和util/1 函数计算CPU使用率。在Linux系统中，必须保证/proc文件目录能被cpu_sup服务访问，如果不能监
测服务会停止</p>

<p>模块中的函数列表</p>

<p>nprocs() &ndash;> UnixProcesses | {error, Reason}</p>

<p>返回UNIX进程数</p>

<p>avg1() &ndash;> SystemLoad | {error, Reason}</p>

<p>返回最后1分钟系统的负载</p>

<p>avg5() &ndash;> SystemLoad | {error, Reason}</p>

<p>返回最后5分钟系统的负载</p>

<p>avg15() &ndash;> SystemLoad | {error, Reason}</p>

<p>返回最后15分钟系统的负载</p>

<p>util() &ndash;> CpuUtil | {error, Reason}</p>

<p>返回CPU使用率</p>

<p>util(Opts) &ndash;> UtilSpec | {error, Reason}</p>

<p>返回CPU使用率的详细信息</p>

<p>调用这些函数取CPU监测数据时，如果前后两次调用，数值没有变化时显示为0，有点奇怪</p>

<p>disksup</p>

<p>disksup是一个用来监测磁盘空间的进程，适用于Unix和Windows系统。监测服务定期检查磁盘，对于每个磁盘或分
区，在它使用超过一定的可用空间量，通过{ {disk_almost_full，MountedOn}，[] } 设置产生报警。在Unix下所有的
本地磁盘都会被监测，包括存在的交换分区。在WIN32下所有类型为“FIXED_DISK”逻辑驱动器都会被检查。
配置监控间隔时间和阀值</p>

<p>disk_space_check_interval = int()>0</p>

<p>监测间隔时间，单位为分钟，默认为30分钟。</p>

<p>disk_almost_full_threshold = float()</p>

<p>监测阀值，磁盘使用率达到多少时产生告警，默认为80，单位是百分比。</p>

<p>模块中的函数列表</p>

<p>get_disk_data() &ndash;> [DiskData]</p>

<p>返回最后一次磁盘检查结果</p>

<p>get_check_interval() &ndash;> MS</p>

<p>获取监测间隔时间，单位是毫秒</p>

<p>set_check_interval(Minutes) &ndash;> ok</p>

<p>设置监测间隔时间，这个设置在下一次监测时生效，服务退出后，这个值会失效，重启服务后使用默认值</p>

<p>get_almost_full_threshold() &ndash;> Percent</p>

<p>获取监测阀值，为磁盘使用率</p>

<p>set_almost_full_threshold(Float) &ndash;> ok</p>

<p>设置监测阀值，服务重启后，设置失效，使用默认值</p>

<p>memsup</p>

<p>memsup用来监控系统内存和各个进程内存的使用率，适用于Unix、Windows和VxWorks系统，定时监测内存，如果内
存使用超过系统分配的一定值，通过{system_memory_high_watermark, []} 设置产生告警。如果系统中任何Erlang
进程使用内存超过在总内存中的一定百分比，通过设置{process_memory_high_watermark,Pid} 产生告警。</p>

<p>配置监测间隔时间和阀值</p>

<p>memory_check_interval = int()>0</p>

<p>以分钟为刻度，默认为1分钟</p>

<p>system_memory_high_watermark = float()</p>

<p>内存使用阀值，默认为80，单位是百分比</p>

<p>process_memory_high_watermark = float()</p>

<p>单个Erlang进程使用阀值，默认为5，单位是百分比</p>

<p>memsup_helper_timeout = int()>0</p>

<p>等待监测结果的超时时间，默认为30秒</p>

<p>memsup_system_only = bool()</p>

<p>设置是否只监控系统内存使用率还是同时监测Erlang进程内存使用率，默认为false</p>

<p>模块中的函数列表</p>

<p>get_memory_data() &ndash;> {Total,Allocated,Worst}</p>

<p>获取系统总内存，使用内存，每个Erlang进程的使用内存</p>

<p>get_system_memory_data() &ndash;> MemDataList</p>

<p>获取系统内存使用的详细信息</p>

<p>get_os_wordsize() &ndash;> Wordsize</p>

<p>获取操作系统的位数</p>

<p>get_check_interval() &ndash;> MS</p>

<p>获取监测间隔时间，单位毫秒</p>

<p>set_check_interval(Minutes) &ndash;> ok</p>

<p>设置监测间隔时间，单位分钟</p>

<p>get_procmem_high_watermark() &ndash;> int()</p>

<p>获取每一进程内存使用告警阀值</p>

<p>set_procmem_high_watermark(Float) &ndash;> ok</p>

<p>设置每一进程内存告警阀值</p>

<p>get_sysmem_high_watermark() &ndash;> int()</p>

<p>获取系统内存使用阀值</p>

<p>set_sysmem_high_watermark(Float) &ndash;> ok</p>

<p>设置系统内存使用阀值</p>

<p>get_helper_timeout() &ndash;> Seconds</p>

<p>获取监测数据返回等待时间</p>

<p>set_helper_timeout(Seconds) &ndash;> ok</p>

<p>设置监测数据返回等待时间</p>

<p>从lib/megaco/src/tcp/megaco_tcp_connection.erl摘抄的代码, 挺详细的关于系统的信息:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nv">SchedId</span>      <span class="o">=</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">system_info</span><span class="p">(</span><span class="n">scheduler_id</span><span class="p">),</span>
</span><span class='line'><span class="nv">SchedNum</span>     <span class="o">=</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">system_info</span><span class="p">(</span><span class="n">schedulers</span><span class="p">),</span>
</span><span class='line'><span class="nv">ProcCount</span>    <span class="o">=</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">system_info</span><span class="p">(</span><span class="n">process_count</span><span class="p">),</span>
</span><span class='line'><span class="nv">ProcLimit</span>    <span class="o">=</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">system_info</span><span class="p">(</span><span class="n">process_limit</span><span class="p">),</span>
</span><span class='line'><span class="nv">ProcMemUsed</span>  <span class="o">=</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">memory</span><span class="p">(</span><span class="n">processes_used</span><span class="p">),</span>
</span><span class='line'><span class="nv">ProcMemAlloc</span> <span class="o">=</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">memory</span><span class="p">(</span><span class="n">processes</span><span class="p">),</span>
</span><span class='line'><span class="nv">MemTot</span>       <span class="o">=</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">memory</span><span class="p">(</span><span class="n">total</span><span class="p">),</span>
</span><span class='line'><span class="nf">error_msg</span><span class="p">(</span><span class="s">&quot;abormal termination: &quot;</span>
</span><span class='line'>          <span class="s">&quot;</span><span class="si">~n</span><span class="s">   Scheduler id:                         </span><span class="si">~p</span><span class="s">&quot;</span>
</span><span class='line'>          <span class="s">&quot;</span><span class="si">~n</span><span class="s">   Num scheduler:                        </span><span class="si">~p</span><span class="s">&quot;</span>
</span><span class='line'>          <span class="s">&quot;</span><span class="si">~n</span><span class="s">   Process count:                        </span><span class="si">~p</span><span class="s">&quot;</span>
</span><span class='line'>          <span class="s">&quot;</span><span class="si">~n</span><span class="s">   Process limit:                        </span><span class="si">~p</span><span class="s">&quot;</span>
</span><span class='line'>          <span class="s">&quot;</span><span class="si">~n</span><span class="s">   Memory used by erlang processes:      </span><span class="si">~p</span><span class="s">&quot;</span>
</span><span class='line'>          <span class="s">&quot;</span><span class="si">~n</span><span class="s">   Memory allocated by erlang processes: </span><span class="si">~p</span><span class="s">&quot;</span>
</span><span class='line'>          <span class="s">&quot;</span><span class="si">~n</span><span class="s">   The total amount of memory allocated: </span><span class="si">~p</span><span class="s">&quot;</span>
</span><span class='line'>          <span class="s">&quot;</span><span class="si">~n~p</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="p">[</span><span class="nv">SchedId</span><span class="p">,</span> <span class="nv">SchedNum</span><span class="p">,</span> <span class="nv">ProcCount</span><span class="p">,</span> <span class="nv">ProcLimit</span><span class="p">,</span>
</span><span class='line'>           <span class="nv">ProcMemUsed</span><span class="p">,</span> <span class="nv">ProcMemAlloc</span><span class="p">,</span> <span class="nv">MemTot</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">]),</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[log4erl 安装使用]]></title>
    <link href="http://evoupsight.com/blog/2013/02/04/log4erl-install-using/"/>
    <updated>2013-02-04T16:57:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/02/04/log4erl-install-using</id>
    <content type="html"><![CDATA[<p>目前项目急需一套可记录到文件并能自动轮询的机制的日志系统，考虑良久，最后置自带gen_event和标准日志函数于不顾，决定用log4erl。</p>

<!-- more -->


<p>支持多日志</p>

<p>当前文件Appender仅支持基于大小的日志文件滚动</p>

<p>支持默认Logger,未指定Logger时系统提供默认Logger</p>

<p>5个预定义的日志级别(debug, info, warn, error, fatal)</p>

<p>一个error_logger的日志处理器</p>

<p>支持用户指定日志级别</p>

<p>支持日志格式化</p>

<p>支持控制台日志</p>

<p>支持smtp formatter</p>

<p>支持XML格式的日志</p>

<p>支持syslog</p>

<p>支持在运行时改变Appender的格式和级别.</p>

<p>下载地址：<a href="https://github.com/ahmednawras/log4erl">https://github.com/ahmednawras/log4erl</a></p>

<p>官方手册：<a href="http://code.google.com/p/log4erl/wiki/Log4erl_Manual_2">http://code.google.com/p/log4erl/wiki/Log4erl_Manual_2</a></p>

<p>安装log4erl</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>log4erl
</span><span class='line'>make
</span></code></pre></td></tr></table></div></figure>


<p>安装的过程中会要求mochiweb的库文件也被安装 Dependency not available: mochiweb-1.5.1</p>

<p>只需要先make depends就可以了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>log4erl
</span><span class='line'>erl
</span><span class='line'>&gt; make:all<span class="o">([{</span>outdir,<span class="s2">&quot;../ebin&quot;</span><span class="o">}])</span>.
</span></code></pre></td></tr></table></div></figure>


<p>然后安装到erlang的库文件中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp -Rf log4erl /usr/local/lib/erlang/lib/log4erl
</span></code></pre></td></tr></table></div></figure>


<p>进入erl应用目录后</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>erl
</span><span class='line'>&gt; application:start<span class="o">(</span>log4erl<span class="o">)</span>.
</span></code></pre></td></tr></table></div></figure>


<p>然后创建好应用的log配置文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&gt;</span> <span class="nn">log4erl</span><span class="p">:</span><span class="nf">conf</span><span class="p">(</span><span class="s">&quot;priv/log4erl.conf&quot;</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里说一句，这是在log4erl的目录，如果是自己的应用，到priv目录下创建log4erl.conf就可以了。log4j默认提供了2个配置文件，可以根据需要自己选择一个进行修改，文章最后提供了这2个文件。</p>

<p>或者可以使用编程方式来动态配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&gt;</span> <span class="nn">log4erl</span><span class="p">:</span><span class="nf">add_logger</span><span class="p">(</span><span class="n">messages_log</span><span class="p">).</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nn">log4erl</span><span class="p">:</span><span class="nf">add_console_appender</span><span class="p">(</span><span class="n">messages_log</span><span class="p">,</span> <span class="n">cmd_logs</span><span class="p">,</span> <span class="p">{</span><span class="n">warn</span><span class="p">,</span> <span class="s">&quot;[%L] %l%n&quot;</span><span class="p">}).</span>
</span></code></pre></td></tr></table></div></figure>


<p>API的使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&gt;</span> <span class="nn">log4erl</span><span class="p">:</span><span class="nf">info</span><span class="p">(</span><span class="s">&quot;Information message&quot;</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>日志的等级</p>

<p>all = debug  &lt; info &lt; warn &lt; error &lt; fatal &lt; none</p>

<p>shell下的测试</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="n">erl</span>
</span><span class='line'><span class="o">&gt;</span><span class="nn">application</span><span class="p">:</span><span class="nf">start</span><span class="p">(</span><span class="n">log4erl</span><span class="p">).</span>
</span><span class='line'><span class="o">&gt;</span><span class="nn">log4erl_conf</span><span class="p">:</span><span class="nf">conf</span><span class="p">(</span><span class="s">&quot;/path/to/conf/file&quot;</span><span class="p">).</span>
</span><span class='line'><span class="o">&gt;</span><span class="nn">log4erl</span><span class="p">:</span><span class="nf">log</span><span class="p">(</span><span class="n">warn</span><span class="p">,</span><span class="s">&quot;log something&quot;</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<hr>


<p>最后提供1个默认配置文件，可以结合官方文档进行设置。一般log4erl_conf:conf只接收其中之一的文件路径。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% Default logger</span>
</span><span class='line'><span class="c">%% it includes a file appender and a console appender</span>
</span><span class='line'><span class="n">logger</span><span class="p">{</span>
</span><span class='line'>        <span class="n">file_appender</span> <span class="n">app2</span><span class="p">{</span>
</span><span class='line'>                <span class="n">dir</span> <span class="o">=</span> <span class="s">&quot;/tmp/&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">level</span> <span class="o">=</span> <span class="n">info</span><span class="p">,</span>
</span><span class='line'>                <span class="n">file</span> <span class="o">=</span> <span class="n">madmonitor2</span><span class="p">,</span>
</span><span class='line'>                <span class="n">type</span> <span class="o">=</span> <span class="n">time</span><span class="p">,</span>
</span><span class='line'>                <span class="n">max</span> <span class="o">=</span> <span class="mi">600</span><span class="p">,</span>
</span><span class='line'>                <span class="n">suffix</span> <span class="o">=</span> <span class="n">log</span><span class="p">,</span>
</span><span class='line'>                <span class="n">rotation</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>                <span class="n">format</span> <span class="o">=</span> <span class="n">&#39;[%L]: %S, %l%n&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">console_appender</span> <span class="n">app1</span><span class="p">{</span>
</span><span class='line'>                <span class="n">level</span> <span class="o">=</span> <span class="n">warn</span><span class="p">,</span>
</span><span class='line'>                <span class="n">format</span> <span class="o">=</span> <span class="n">&#39;%T %j [%L] %l%n&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其他注意：使用记录到文件的方式，不支持中文！事先最好全部转换到英文格式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[freebsd安装ganglia3.4]]></title>
    <link href="http://evoupsight.com/blog/2012/10/22/freebsd-install-ganglia3-dot-4/"/>
    <updated>2012-10-22T11:24:00+08:00</updated>
    <id>http://evoupsight.com/blog/2012/10/22/freebsd-install-ganglia3-dot-4</id>
    <content type="html"><![CDATA[<h2>Ganglia是什么?</h2>

<p>简单的说，这是一个开源的系统监控软件，本身通过rrdtool这个软件作为数据载体，以及SNMP协议采集监控数据，最终在管理界面上呈现出监控图表数据的系统。</p>

<!-- more -->


<h2>安装小记</h2>

<p>首先是下载ganglia</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://downloads.sourceforge.net/project/ganglia/
</span><span class='line'>wget http://oss.oetiker.ch/rrdtool/pub/rrdtool-1.4.7.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>先安装rrdtool</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure --prefix<span class="o">=</span>/usr/lib32/rrdtool --disable-perl
</span><span class='line'>make <span class="o">&amp;&amp;</span> make install
</span></code></pre></td></tr></table></div></figure>


<p>(Ps:安装过程有缺少包的解决，可以尝试先从port安装好rrdtool之后deinstall rrdtool，这样依赖的包就都有了，因为port直接安装rrdtool后ganglia不认，所以手动编译)</p>

<p>再来是ganglia</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure --with-gmetad --with-librrd<span class="o">=</span>/usr/lib32/rrdtool
</span><span class='line'>make <span class="o">&amp;&amp;</span> make install
</span></code></pre></td></tr></table></div></figure>


<p>报告</p>

<p>Checking for apr</p>

<p>checking for apr-1-config&hellip; no</p>

<p>configure: error: apr-1-config binary not found in path</p>

<p>没有安装apache2</p>

<p>先安装mysql</p>

<p>whereis mysql51-server</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget ftp://ftp.fi.muni.cz/pub/mysql/Downloads/MySQL-5.1/mysql-5.1.60.tar.gz
</span><span class='line'>sudo make <span class="nv">WITH_CHARSET</span><span class="o">=</span>utf8 <span class="nv">WITH_XCHARSET</span><span class="o">=</span>all install clean
</span><span class='line'>sudo make install
</span></code></pre></td></tr></table></div></figure>


<p>安装httpd</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://labs.renren.com/apache-mirror/httpd/httpd-2.2.23.tar.gz
</span><span class='line'>./configure --prefix<span class="o">=</span>/usr/local/apache2 --enable-modules<span class="o">=</span>so --enable-rewrite
</span><span class='line'>make <span class="o">&amp;&amp;</span> make install
</span></code></pre></td></tr></table></div></figure>


<p>安装php</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://cn.php.net/get/php-5.3.6.tar.gz/from/this/mirror
</span><span class='line'>tar –zxvf php-5.3.6.tar.gz
</span><span class='line'><span class="nb">cd </span>php-5.3.6
</span><span class='line'>./configure --prefix<span class="o">=</span>/usr/local/php --with-apxs2<span class="o">=</span>/usr/local/apache2/bin/apxs --with-config-file-path<span class="o">=</span>/usr/local/lib --with-mysql<span class="o">=</span>/usr
</span><span class='line'>make <span class="o">&amp;&amp;</span> make install
</span></code></pre></td></tr></table></div></figure>


<p>将php5的库复制到apache的modules里</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo cp –p .libs/libphp5.so /usr/local/apache2/modules
</span><span class='line'>sudo chown cdh:cdh /usr/local/apache2/modules/libphp5.so
</span></code></pre></td></tr></table></div></figure>


<p>复制php5配置文件</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo cp php.ini-development /usr/local/php/lib/php/php.ini
</span></code></pre></td></tr></table></div></figure>


<p>修改http.conf 兼容php5</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vim /usr/local/apache2/conf/httpd.conf
</span></code></pre></td></tr></table></div></figure>


<p>加上</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>AddType application/x-httpd-php .php
</span><span class='line'><span class="c">#LoadModule php5_module modules/libphp5.so</span>
</span></code></pre></td></tr></table></div></figure>


<p>把上面的#号去掉</p>

<p>DirectoryIndex index.html</p>

<p>在后面加 index.php</p>

<p>DocumentRoot &ldquo;/usr/local/apache2/htdocs&rdquo;</p>

<p>把/usr/local/apache2/htdocs改为你存放网页文件的路径</p>

<p>AddDefaultCharset iso8859-1</p>

<p>把后面的iso8859-1改为gb2312 或者是干脆off</p>

<p>更详细的请参考<a href="http://article.21e.cn">http://article.21e.cn</a></p>

<p>到这里看下访问一下浏览器，php应该工作ok</p>

<p>继续编译ganglia</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ./configure --with-gmetad --with-librrd<span class="o">=</span>/usr/lib32/rrdtool
</span></code></pre></td></tr></table></div></figure>


<p>configure: error: apr-1-config binary not found in path</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>whereis apr1
</span><span class='line'><span class="nb">cd</span> /usr/ports/devel/apr1
</span><span class='line'>sudo make install clean <span class="o">&amp;&amp;</span> rehash
</span></code></pre></td></tr></table></div></figure>


<p>回来继续编译，报告缺少libconfuse not found</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /usr/ports/devel/libconfuse/
</span><span class='line'>sudo make install clean <span class="o">&amp;&amp;</span> rehash
</span></code></pre></td></tr></table></div></figure>


<p>报告缺少expat.h</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /usr/ports/textproc/expat2
</span><span class='line'>sudo make install clean <span class="o">&amp;&amp;</span> rehash
</span></code></pre></td></tr></table></div></figure>


<p>问题依旧修改配置</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ./configure --with-gmetad --with-librrd<span class="o">=</span>/usr/lib32/rrdtool --with-libexpat<span class="o">=</span>/usr/local/
</span><span class='line'>sudo make
</span><span class='line'>sudo make install
</span></code></pre></td></tr></table></div></figure>


<p>安装完成！</p>

<p>测试gmetad的运行</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /usr/local/sbin/gmetad -d 5
</span><span class='line'>
</span><span class='line'>Going to run as user nobody
</span><span class='line'>
</span><span class='line'>Please make sure that /var/db/ganglia/rrds exists: No such file or directory
</span><span class='line'>
</span><span class='line'>sudo mkdir -p /var/db/ganglia/rrds
</span><span class='line'>
</span><span class='line'>sudo /usr/local/sbin/gmetad -d 5
</span><span class='line'>
</span><span class='line'>Going to run as user nobody
</span><span class='line'>
</span><span class='line'>Please make sure that /var/db/ganglia/rrds is owned by nobody
</span><span class='line'>
</span><span class='line'>sudo chown -R nobody:nobody /var/db/ganglia/
</span><span class='line'>
</span><span class='line'>Going to run as user nobody
</span><span class='line'>
</span><span class='line'>Sources are ...
</span><span class='line'>
</span><span class='line'>Source: <span class="o">[</span>my cluster, step 15<span class="o">]</span> has 1 sources
</span><span class='line'>
</span><span class='line'>        127.0.0.1
</span><span class='line'>
</span><span class='line'>xml listening on port 8651
</span><span class='line'>
</span><span class='line'>interactive xml listening on port 8652
</span><span class='line'>
</span><span class='line'>cleanup thread has been started
</span><span class='line'>
</span><span class='line'>Data thread 34460440576 is monitoring <span class="o">[</span>my cluster<span class="o">]</span> data <span class="nb">source</span>
</span><span class='line'>
</span><span class='line'><span class="nb">        </span>127.0.0.1
</span><span class='line'>
</span><span class='line'>data_thread<span class="o">()</span> <span class="k">for</span> <span class="o">[</span>my cluster<span class="o">]</span> failed to contact node 127.0.0.1
</span><span class='line'>
</span><span class='line'>data_thread<span class="o">()</span> got no answer from any <span class="o">[</span>my cluster<span class="o">]</span> datasource
</span><span class='line'>
</span><span class='line'>data_thread<span class="o">()</span> <span class="k">for</span> <span class="o">[</span>my cluster<span class="o">]</span> failed to contact node 127.0.0.1
</span><span class='line'>
</span><span class='line'>data_thread<span class="o">()</span> got no answer from any <span class="o">[</span>my cluster<span class="o">]</span> datasource
</span><span class='line'>
</span><span class='line'>data_thread<span class="o">()</span> <span class="k">for</span> <span class="o">[</span>my cluster<span class="o">]</span> failed to contact node 127.0.0.1
</span><span class='line'>
</span><span class='line'>data_thread<span class="o">()</span> got no answer from any <span class="o">[</span>my cluster<span class="o">]</span> datasource
</span><span class='line'>
</span><span class='line'>sudo /usr/local/sbin/gmond -d 5
</span></code></pre></td></tr></table></div></figure>


<p>看上去运行正常了</p>

<p>基本可以。</p>

<p>开始装界面。不要装3.5.3有些图开不了，3.5.2经过测试没有问题。</p>

<p><a href="http://sourceforge.net/projects/ganglia/files/ganglia-web/3.5.2/ganglia-web-3.5.2.tar.gz/download">http://sourceforge.net/projects/ganglia/files/ganglia-web/3.5.2/ganglia-web-3.5.2.tar.gz/download</a></p>

<p>注意web要求rrd数据库的路径只能是/var/lib/ganglia/rrds</p>

<p>由于之前是装在了/var/db/ganglia/rrds</p>

<p>则</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /var/lib
</span><span class='line'>sudo ln -s /var/db/ganglia ganglia
</span></code></pre></td></tr></table></div></figure>


<p>然后访问浏览器</p>

<p><a href="http://192.168.174.133/ganglia/">http://192.168.174.133/ganglia/</a></p>

<p>此时</p>

<p>There was an error collecting ganglia data (127.0.0.1:8652): fsockopen error: Connection refused</p>

<p>因为没有打开gmond和gmetad，打开发现界面ok了，但是没有数据！</p>

<p>怀疑是php没有安装rrdtool的扩展,继续安装php的rrdtool扩展</p>

<p><a href="http://pecl.php.net/package/rrd">http://pecl.php.net/package/rrd</a></p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ./configure --with-php-config<span class="o">=</span>/usr/local/php/bin/php-config --with-rrd-binary<span class="o">=</span>/usr/lib32/rrdtool/bin/rrdtool
</span></code></pre></td></tr></table></div></figure>


<p>配置报错找不到rrdtool的头文件，直接定位configure文件进行修改</p>

<p>for i in /usr /usr/local /usr/local/rrdtool /opt; do</p>

<p>改成我装的路径</p>

<p>for i in /usr /usr/local /usr/local/rrdtool /opt /usr/lib32/rrdtool; do</p>

<p>改了之后</p>

<p>configure: error: rrd lib version seems older than 1.3.0, update to 1.3.0+</p>

<p>通过后还是报错</p>

<p>error: too many arguments to function &lsquo;rrd_lastupdate&rsquo;</p>

<p>参考这里<a href="https://bugs.php.net/bug.php?id=59558">https://bugs.php.net/bug.php?id=59558</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">-</span> <span class="k">if</span> <span class="p">(</span><span class="n">rrd_lastupdate</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">last_update</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ds_cnt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ds_namv</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span> <span class="k">if</span> <span class="p">(</span><span class="n">rrd_lastupdate_r</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">last_update</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ds_cnt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ds_namv</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>装完看到phpinfo里有了。</p>

<p>之后还要修改conf_default.php文件</p>

<p>graphite_rrd_dir变量，指向ganglia存放rrd的目录，我的是/var/db/ganglia/rrds</p>

<p>还有一个$conf[&lsquo;rrdtool&rsquo;]变量，指向rrdtool的安装位置，我的是/usr/lib32/rrdtool/bin/rrdtool</p>

<p>应该就差不多了！这样如果还不行，检查自身人品，然后看下/var/log/message</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[遭遇nginx upstream sent too big header]]></title>
    <link href="http://evoupsight.com/blog/2011/09/11/nginx-upstream-sent-too-big-header/"/>
    <updated>2011-09-11T23:20:00+08:00</updated>
    <id>http://evoupsight.com/blog/2011/09/11/nginx-upstream-sent-too-big-header</id>
    <content type="html"><![CDATA[<p>遭遇nginx upstream sent too big header while reading response header from upstream</p>

<p>这个问题会导致输出502头信息。</p>

<p>nginx配置中要加以下2行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>fastcgi_buffer_size 128k;
</span><span class='line'>fastcgi_buffers 8 128k;
</span></code></pre></td></tr></table></div></figure>


<p>一加果然就不报错了！原因是nginx处理header太大了，还有一个原因就是我写程序的时候发header太多了，只能发一次，程序还要调整啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[freebsd下hbase安装]]></title>
    <link href="http://evoupsight.com/blog/2011/07/30/freebsd-install-hbase/"/>
    <updated>2011-07-30T21:51:00+08:00</updated>
    <id>http://evoupsight.com/blog/2011/07/30/freebsd-install-hbase</id>
    <content type="html"><![CDATA[<p>安装JDK补遗,port中该文件已经无法获取。关键是下载到diablo-caffe-freebsd7-i386-1.6.0_07-b02.tar.bz</p>

<p><a href="http://www.freebsdfoundation.org/cgi-bin/download?download=diablo-caffe-freebsd7-amd64-1.6.0_07-b02.tar.bz2">http://www.freebsdfoundation.org/cgi-bin/download?download=diablo-caffe-freebsd7-amd64-1.6.0_07-b02.tar.bz2</a></p>

<!-- more -->


<p>下完就放到/usr/port/distfile</p>

<p>进到/usr/ports/java/diablo-jdk16之后也要把timezone那个选取消。</p>

<p>再装jdk16/usr/port/java/jdk16</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo axel http://www.java.net/download/jdk6/6u3/promoted/b05/jdk-6u3-fcs-src-b05-jrl-24_sep_2007.jar
</span><span class='line'>sudo mv jdk-6u3-fcs-src-b05-jrl-24_sep_2007.jar php-5.3.8.tar.bz2 /usr/ports/distfiles/
</span></code></pre></td></tr></table></div></figure>


<p>装apache-ant，自动的，如果不行cd /usr/port/devel/apache-ant/ sudo make install clean</p>

<p>而且要有足够的SWAP空间！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>setenv JAVA_HOME /usr/local/jdk1.6.0/
</span></code></pre></td></tr></table></div></figure>


<p>PATH我没有设置</p>

<p>然后是hbase的安装，拿到权威手册翻一翻就能知道</p>

<p>单个节点的启动方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ./bin/start-hbase.sh
</span><span class='line'>sudo ./bin/hbase-daemon.sh start thrift
</span></code></pre></td></tr></table></div></figure>


<p>hshell的进入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ./bin/hbase shell
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言变参宏]]></title>
    <link href="http://evoupsight.com/blog/2011/06/05/lighttpd-change-parameter-define/"/>
    <updated>2011-06-05T23:29:00+08:00</updated>
    <id>http://evoupsight.com/blog/2011/06/05/lighttpd-change-parameter-define</id>
    <content type="html"><![CDATA[<p>研究lighttpd1.4.28代码的时候，到缓存调用部分，有这么一句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">buffer_copy_string_len</span><span class="p">(</span><span class="n">modules</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">,</span> <span class="n">CONST_STR_LEN</span><span class="p">(</span><span class="s">&quot;server.modules&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>而此参数声明的时候是这样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">buffer_copy_string_len</span><span class="p">(</span><span class="n">buffer</span> <span class="o">*</span><span class="n">b</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">s_len</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>怎么是三个参？从CONST_STR_LEN入手，这是一个宏</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define CONST_STR_LEN(x) x, x ? sizeof(x) - 1 : 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>这不就成了三个参了？记一笔&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言宏定义技巧(常用宏定义)(转)]]></title>
    <link href="http://evoupsight.com/blog/2011/01/16/c-common-define/"/>
    <updated>2011-01-16T13:43:00+08:00</updated>
    <id>http://evoupsight.com/blog/2011/01/16/c-common-define</id>
    <content type="html"><![CDATA[<p>写好C语言，漂亮的宏定义很重要，使用宏定义可以防止出错，提高可移植性，可读性，方便性 等等。下面列举一些成熟软件中常用得宏定义。。。。。。</p>

<p>1，防止一个头文件被重复包含</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifndef COMDEF_H </span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define COMDEF_H </span>
</span><span class='line'>
</span><span class='line'><span class="c1">//头文件内容 </span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>2，重新定义一些类型，防止由于各种平台和编译器的不同，而产生的类型字节数差异，方便移植。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">boolean</span><span class="p">;</span> <span class="cm">/* Boolean value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">uint32</span><span class="p">;</span> <span class="cm">/* Unsigned 32 bit value */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">uint16</span><span class="p">;</span> <span class="cm">/* Unsigned 16 bit value */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">uint8</span><span class="p">;</span> <span class="cm">/* Unsigned 8 bit value */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">signed</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">int32</span><span class="p">;</span> <span class="cm">/* Signed 32 bit value */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">signed</span> <span class="kt">short</span> <span class="n">int16</span><span class="p">;</span> <span class="cm">/* Signed 16 bit value */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">signed</span> <span class="kt">char</span> <span class="n">int8</span><span class="p">;</span> <span class="cm">/* Signed 8 bit value */</span>
</span></code></pre></td></tr></table></div></figure>


<p>//下面的不建议使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">byte</span><span class="p">;</span> <span class="cm">/* Unsigned 8 bit value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">word</span><span class="p">;</span> <span class="cm">/* Unsinged 16 bit value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">dword</span><span class="p">;</span> <span class="cm">/* Unsigned 32 bit value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">uint1</span><span class="p">;</span> <span class="cm">/* Unsigned 8 bit value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">uint2</span><span class="p">;</span> <span class="cm">/* Unsigned 16 bit value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">uint4</span><span class="p">;</span> <span class="cm">/* Unsigned 32 bit value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">signed</span> <span class="kt">char</span> <span class="n">int1</span><span class="p">;</span> <span class="cm">/* Signed 8 bit value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">signed</span> <span class="kt">short</span> <span class="n">int2</span><span class="p">;</span> <span class="cm">/* Signed 16 bit value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">int4</span><span class="p">;</span> <span class="cm">/* Signed 32 bit value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">signed</span> <span class="kt">long</span> <span class="n">sint31</span><span class="p">;</span> <span class="cm">/* Signed 32 bit value */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">signed</span> <span class="kt">short</span> <span class="n">sint15</span><span class="p">;</span> <span class="cm">/* Signed 16 bit value */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">signed</span> <span class="kt">char</span> <span class="n">sint7</span><span class="p">;</span> <span class="cm">/* Signed 8 bit value */</span>
</span></code></pre></td></tr></table></div></figure>


<p>3，得到指定地址上的一个字节或字</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define MEM_B( x ) ( *( (byte *) (x) ) ) </span>
</span><span class='line'><span class="cp">#define MEM_W( x ) ( *( (word *) (x) ) ) </span>
</span></code></pre></td></tr></table></div></figure>


<p>4，求最大值和最小值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define MAX( x, y ) ( ((x) &gt; (y)) ? (x) : (y) ) </span>
</span><span class='line'><span class="cp">#define MIN( x, y ) ( ((x) &lt; (y)) ? (x) : (y) ) </span>
</span></code></pre></td></tr></table></div></figure>


<p>5，得到一个field在结构体(struct)中的偏移量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define FPOS( type, field ) \ </span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*lint -e545 */</span> <span class="p">(</span> <span class="p">(</span><span class="n">dword</span><span class="p">)</span> <span class="o">&amp;</span><span class="p">((</span> <span class="n">type</span> <span class="o">*</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span><span class="o">-&gt;</span> <span class="n">field</span> <span class="p">)</span> <span class="cm">/*lint +e545 */</span>
</span></code></pre></td></tr></table></div></figure>


<p>6,得到一个结构体中field所占用的字节数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define FSIZ( type, field ) sizeof( ((type *) 0)-&gt;field ) </span>
</span></code></pre></td></tr></table></div></figure>


<p>7，按照LSB格式把两个字节转化为一个Word</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define FLIPW( ray ) ( (((word) (ray)[0]) * 256) + (ray)[1] ) </span>
</span></code></pre></td></tr></table></div></figure>


<p>8，按照LSB格式把一个Word转化为两个字节</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define FLOPW( ray, val ) \ </span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">ray</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">val</span><span class="p">)</span> <span class="o">/</span> <span class="mi">256</span><span class="p">);</span> <span class="err">\</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">ray</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">val</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>9，得到一个变量的地址（word宽度）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define B_PTR( var ) ( (byte *) (void *) &amp;(var) ) </span>
</span><span class='line'><span class="cp">#define W_PTR( var ) ( (word *) (void *) &amp;(var) ) </span>
</span></code></pre></td></tr></table></div></figure>


<p>10，得到一个字的高位和低位字节</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define WORD_LO(xxx) ((byte) ((word)(xxx) &amp; 255)) </span>
</span><span class='line'><span class="cp">#define WORD_HI(xxx) ((byte) ((word)(xxx) &gt;&gt; 8)) </span>
</span></code></pre></td></tr></table></div></figure>


<p>11，返回一个比X大的最接近的8的倍数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define RND8( x ) ((((x) + 7) / 8 ) * 8 ) </span>
</span></code></pre></td></tr></table></div></figure>


<p>12，将一个字母转换为大写</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define UPCASE( c ) ( ((c) &gt;= &#39;a&#39; &amp;&amp; (c) &lt;= &#39;z&#39;) ? ((c) - 0x20) : (c) ) </span>
</span></code></pre></td></tr></table></div></figure>


<p>13，判断字符是不是10进值的数字</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define DECCHK( c ) ((c) &gt;= &#39;0&#39; &amp;&amp; (c) &lt;= &#39;9&#39;) </span>
</span></code></pre></td></tr></table></div></figure>


<p>14，判断字符是不是16进值的数字</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define HEXCHK( c ) ( ((c) &gt;= &#39;0&#39; &amp;&amp; (c) &lt;= &#39;9&#39;) ||\ </span>
</span><span class='line'><span class="p">((</span><span class="n">c</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="sc">&#39;F&#39;</span><span class="p">)</span> <span class="o">||</span><span class="err">\</span>
</span><span class='line'><span class="p">((</span><span class="n">c</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="sc">&#39;a&#39;</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="sc">&#39;f&#39;</span><span class="p">)</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>15，防止溢出的一个方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define INC_SAT( val ) (val = ((val)+1 &gt; (val)) ? (val)+1 : (val)) </span>
</span></code></pre></td></tr></table></div></figure>


<p>16，返回数组元素的个数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define ARR_SIZE( a ) ( sizeof( (a) ) / sizeof( (a[0]) ) )</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>17，返回一个无符号数n尾的值MOD_BY_POWER_OF_TWO(X,n)=X%(2<sup>n</sup>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define MOD_BY_POWER_OF_TWO( val, mod_by ) \ </span>
</span><span class='line'><span class="p">(</span> <span class="p">(</span><span class="n">dword</span><span class="p">)(</span><span class="n">val</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">dword</span><span class="p">)((</span><span class="n">mod_by</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>18，对于IO空间映射在存储空间的结构，输入输出处理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define inp(port) (*((volatile byte *) (port))) </span>
</span><span class='line'><span class="cp">#define inpw(port) (*((volatile word *) (port))) </span>
</span><span class='line'><span class="cp">#define inpdw(port) (*((volatile dword *)(port))) </span>
</span><span class='line'><span class="cp">#define outp(port, val) (*((volatile byte *) (port)) = ((byte) (val))) </span>
</span><span class='line'><span class="cp">#define outpw(port, val) (*((volatile word *) (port)) = ((word) (val))) </span>
</span><span class='line'><span class="cp">#define outpdw(port, val) (*((volatile dword *) (port)) = ((dword) (val))) </span>
</span></code></pre></td></tr></table></div></figure>


<p>[2005-9-9添加]</p>

<p>19,使用一些宏跟踪调试</p>

<p>A N S I标准说明了五个预定义的宏名。它们是：</p>

<p>_ L I N E _</p>

<p>_ F I L E _</p>

<p>_ D A T E _</p>

<p>_ T I M E _</p>

<p>_ S T D C _</p>

<p>如果编译不是标准的，则可能仅支持以上宏名中的几个，或根本不支持。记住编译程序</p>

<p>也许还提供其它预定义的宏名。</p>

<p>_ L I N E <em>及</em> F I L E _宏指令在有关# l i n e的部分中已讨论，这里讨论其余的宏名。</p>

<p>_ D AT E _宏指令含有形式为月/日/年的串，表示源文件被翻译到代码时的日期。</p>

<p>源代码翻译到目标代码的时间作为串包含在<em> T I M E </em>中。串形式为时：分：秒。</p>

<p>如果实现是标准的，则宏<em> S T D C </em>含有十进制常量1。如果它含有任何其它数，则实现是</p>

<p>非标准的。</p>

<p>可以定义宏，例如:</p>

<p>当定义了_DEBUG，输出数据信息和所在文件所在行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifdef _DEBUG </span>
</span><span class='line'><span class="cp">#define DEBUGMSG(msg,date) printf(msg);printf(“%d%d%d”,date,_LINE_,_FILE_) </span>
</span><span class='line'><span class="cp">#else </span>
</span><span class='line'><span class="cp">#define DEBUGMSG(msg,date) </span>
</span><span class='line'><span class="cp">#endif </span>
</span></code></pre></td></tr></table></div></figure>


<p>20，宏定义防止使用是错误</p>

<p>用小括号包含。</p>

<p>例如：#define ADD(a,b) （a+b）</p>

<p>用do{}while(0)语句包含多语句防止错误</p>

<p>例如：#difne DO(a,b) a+b;\</p>

<p>a++;</p>

<p>应用时：if(….)</p>

<p>DO(a,b); //产生错误</p>

<p>else</p>

<p>解决方法: #difne DO(a,b) do{a+b;\</p>

<p>a++;}while(0)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[头文件中变量赋值方法]]></title>
    <link href="http://evoupsight.com/blog/2010/12/15/header-file-variable-assign/"/>
    <updated>2010-12-15T00:04:00+08:00</updated>
    <id>http://evoupsight.com/blog/2010/12/15/header-file-variable-assign</id>
    <content type="html"><![CDATA[<p>先看这段文字</p>

<!-- more -->




<hr>


<p>今天看C++ Primer关于头文件定义的一节，其中说到，头文件应用于声明而不是用于定义。其实，C++标准并没有规定头文件中不能定义 变量，只不过如果在头文件中定义变量，而该头文件又被多次包含的话，会造成变量的重新定义。
这里还涉及到另一个问题，需要提前说明，即使用预处理器避免多重包含。这里的多重包含指的是同一个文件直接或者间接的包含一个头文件多次，例如a.h包含 b.h，a.cpp同时包含a.h和b.h，a.cpp就两次包含了b.h。但由于b.h中具有避免多重包含的措施，a.cpp中还是只包含了b.h一 次。而包含的意思其实就是在预处理阶段用被包含文件的内容代替此包含语句。
回到头文件定义变量的问题上，如果在头文件中定义了变量，避免多重包含的措施只能避免该头文件在同一个编译单元内被包含一次，在不同的编译单元内还是会被多次包含的，这样就造成了变量的重复定义。
但是也有例外，如果const对象在编译时可以确定其值，可以将其放在头文件中定义。这么做是有原因的——const对象默认情况下是定义该变量的文件的 局部变量，这样即使此头文件被多个包含，都不会在包含这些文件中重复定义此变量，所有对于这个const对象的引用全都指向在头文件中定义的对象。如果在 const对象定义的时候声明extern，const对象就变得和普通非const对象一样，从而失去此特性（非const对象的默认属性为 extern）。
C++中的很多用法都不是标准C++规定的，但是由于各种原因，已经是约定俗成或是惯常用法，至于原因以及除此之外的其他用法完全可以不必深究，否则很容易钻牛角尖！</p>

<hr>


<p>今天移植gamedev里文章讲到的一个例子的时候碰到了这个问题，要在头文件里给一个变量定义。</p>

<p>最后这样就可以了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//16Bit format for video card</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">PixelFormat</span> <span class="o">=</span> <span class="n">PF_555</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>之前有些程序把一些库的变量定义都放到了主文件中，搞得非常难看，这下搞定了。
相应的在头文件里定义结构用typedef而不要去用struct！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[目前看到的对内存对齐问题最好的解释]]></title>
    <link href="http://evoupsight.com/blog/2010/11/30/memory-alignment/"/>
    <updated>2010-11-30T12:14:00+08:00</updated>
    <id>http://evoupsight.com/blog/2010/11/30/memory-alignment</id>
    <content type="html"><![CDATA[<p>简单的说，对于一个class或是struct：</p>

<p>按里面所占字节最大的类型为位域任何变量的存储不能跨位域 比如：</p>

<!-- more -->


<p>对于</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">A</span> <span class="p">{</span>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以int类型所占字节为位域，也就是4 然后，对于a，四个字节对于c，一个字节，后面三个字节不能用来存储b，因为b是四个，如果用这三个，那么必将剩余一个，根据原则，不可跨位域</p>

<p>所以存放形式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa
</span><span class='line'>
</span><span class='line'>cccccccc XXXXXXXX XXXXXXXX XXXXXXXX
</span><span class='line'>
</span><span class='line'>bbbbbbbb bbbbbbbb bbbbbbbb bbbbbbbb
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++实现crc32]]></title>
    <link href="http://evoupsight.com/blog/2010/11/26/crc32-cpp/"/>
    <updated>2010-11-26T19:07:00+08:00</updated>
    <id>http://evoupsight.com/blog/2010/11/26/crc32-cpp</id>
    <content type="html"><![CDATA[<p>直接参考如下连接
<a href="http://stackoverflow.com/questions/302914/crc32-c-or-c-implementation">http://stackoverflow.com/questions/302914/crc32-c-or-c-implementation</a></p>

<p>或者boost、Crypto++</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[typedef小结]]></title>
    <link href="http://evoupsight.com/blog/2010/11/25/typedef-summary/"/>
    <updated>2010-11-25T14:52:00+08:00</updated>
    <id>http://evoupsight.com/blog/2010/11/25/typedef-summary</id>
    <content type="html"><![CDATA[<p>在头文件里typedef的再inlcude到源文件里，这样就可以省去struct xx obj;直接xx obj;</p>

<p>对于动态分配内存的时候也可以</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">xx</span> <span class="o">*</span> <span class="n">obj</span><span class="o">=</span> <span class="p">(</span><span class="n">xx</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">xx</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
