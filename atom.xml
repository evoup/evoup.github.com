<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Evoup`s Blog]]></title>
  <link href="http://evoupsight.com/atom.xml" rel="self"/>
  <link href="http://evoupsight.com/"/>
  <updated>2013-10-11T16:33:25+08:00</updated>
  <id>http://evoupsight.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[erlang版的long2ip函数]]></title>
    <link href="http://evoupsight.com/blog/2013/10/09/erlang-long2ip/"/>
    <updated>2013-10-09T17:56:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/10/09/erlang-long2ip</id>
    <content type="html"><![CDATA[<p>工作中参考网络文章整理了一个整形转IP地址的函数。直接看代码了。</p>

<figure class='code'><figcaption><span>erlang代码片段 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%从整形转换为IP地址元组</span>
</span><span class='line'><span class="nf">long2ip</span><span class="p">(</span><span class="nv">IpInteger</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Integer_to_ip</span><span class="o">=</span><span class="k">fun</span><span class="p">(</span><span class="nv">Ip</span><span class="p">)</span><span class="o">-&gt;</span> <span class="p">{</span><span class="nv">Ip</span> <span class="ow">bsr</span> <span class="mi">24</span><span class="p">,</span> <span class="p">(</span><span class="nv">Ip</span> <span class="ow">band</span> <span class="mi">16711680</span><span class="p">)</span> <span class="ow">bsr</span> <span class="mi">16</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">Ip</span> <span class="ow">band</span> <span class="mi">65280</span><span class="p">)</span> <span class="ow">bsr</span> <span class="mi">8</span><span class="p">,</span> <span class="nv">Ip</span> <span class="ow">band</span> <span class="mi">255</span><span class="p">}</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">Integer_to_ip</span><span class="p">(</span><span class="nv">IpInteger</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样子使用
long2ip（3232290954).
{192,168,216,138}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客搬家到github]]></title>
    <link href="http://evoupsight.com/blog/2013/09/29/change-blog-to-github/"/>
    <updated>2013-09-29T16:27:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/09/29/change-blog-to-github</id>
    <content type="html"><![CDATA[<p>之前使用了将近一年的google app engine建博客，GFW间断性地对ghs.googlehosted.com进行屏蔽，同时用google帐号评论也太逊了，换个吧，开篇！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[freebsd install ganglia3.4]]></title>
    <link href="http://evoupsight.com/blog/2012/10/22/freebsd-install-ganglia3-dot-4/"/>
    <updated>2012-10-22T11:24:00+08:00</updated>
    <id>http://evoupsight.com/blog/2012/10/22/freebsd-install-ganglia3-dot-4</id>
    <content type="html"><![CDATA[<h2>Ganglia是什么?</h2>

<p>简单的说，这是一个开源的系统监控软件，本身通过rrdtool这个软件作为数据载体，以及SNMP协议采集监控数据，最终在管理界面上呈现出监控图表数据的系统。</p>

<!-- more -->


<h2>安装小记</h2>

<p>首先是下载ganglia</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://downloads.sourceforge.net/project/ganglia/
</span><span class='line'>wget http://oss.oetiker.ch/rrdtool/pub/rrdtool-1.4.7.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>先安装rrdtool</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure --prefix<span class="o">=</span>/usr/lib32/rrdtool --disable-perl
</span><span class='line'>make <span class="o">&amp;&amp;</span> make install
</span></code></pre></td></tr></table></div></figure>


<p>(Ps:安装过程有缺少包的解决，可以尝试先从port安装好rrdtool之后deinstall rrdtool，这样依赖的包就都有了，因为port直接安装rrdtool后ganglia不认，所以手动编译)</p>

<p>再来是ganglia</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure --with-gmetad --with-librrd<span class="o">=</span>/usr/lib32/rrdtool
</span><span class='line'>make <span class="o">&amp;&amp;</span> make install
</span></code></pre></td></tr></table></div></figure>


<p>报告</p>

<p>Checking for apr</p>

<p>checking for apr-1-config&hellip; no</p>

<p>configure: error: apr-1-config binary not found in path</p>

<p>没有安装apache2</p>

<p>先安装mysql</p>

<p>whereis mysql51-server</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget ftp://ftp.fi.muni.cz/pub/mysql/Downloads/MySQL-5.1/mysql-5.1.60.tar.gz
</span><span class='line'>sudo make <span class="nv">WITH_CHARSET</span><span class="o">=</span>utf8 <span class="nv">WITH_XCHARSET</span><span class="o">=</span>all install clean
</span><span class='line'>sudo make install
</span></code></pre></td></tr></table></div></figure>


<p>安装httpd</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://labs.renren.com/apache-mirror/httpd/httpd-2.2.23.tar.gz
</span><span class='line'>./configure --prefix<span class="o">=</span>/usr/local/apache2 --enable-modules<span class="o">=</span>so --enable-rewrite
</span><span class='line'>make <span class="o">&amp;&amp;</span> make install
</span></code></pre></td></tr></table></div></figure>


<p>安装php</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://cn.php.net/get/php-5.3.6.tar.gz/from/this/mirror
</span><span class='line'>tar –zxvf php-5.3.6.tar.gz
</span><span class='line'><span class="nb">cd </span>php-5.3.6
</span><span class='line'>./configure --prefix<span class="o">=</span>/usr/local/php --with-apxs2<span class="o">=</span>/usr/local/apache2/bin/apxs --with-config-file-path<span class="o">=</span>/usr/local/lib --with-mysql<span class="o">=</span>/usr
</span><span class='line'>make <span class="o">&amp;&amp;</span> make install
</span></code></pre></td></tr></table></div></figure>


<p>将php5的库复制到apache的modules里</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo cp –p .libs/libphp5.so /usr/local/apache2/modules
</span><span class='line'>sudo chown cdh:cdh /usr/local/apache2/modules/libphp5.so
</span></code></pre></td></tr></table></div></figure>


<p>复制php5配置文件</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo cp php.ini-development /usr/local/php/lib/php/php.ini
</span></code></pre></td></tr></table></div></figure>


<p>修改http.conf 兼容php5</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vim /usr/local/apache2/conf/httpd.conf
</span></code></pre></td></tr></table></div></figure>


<p>加上</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>AddType application/x-httpd-php .php
</span><span class='line'><span class="c">#LoadModule php5_module modules/libphp5.so</span>
</span></code></pre></td></tr></table></div></figure>


<p>把上面的#号去掉</p>

<p>DirectoryIndex index.html</p>

<p>在后面加 index.php</p>

<p>DocumentRoot &ldquo;/usr/local/apache2/htdocs&rdquo;</p>

<p>把/usr/local/apache2/htdocs改为你存放网页文件的路径</p>

<p>AddDefaultCharset iso8859-1</p>

<p>把后面的iso8859-1改为gb2312 或者是干脆off</p>

<p>更详细的请参考<a href="http://article.21e.cn">http://article.21e.cn</a></p>

<p>到这里看下访问一下浏览器，php应该工作ok</p>

<p>继续编译ganglia</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ./configure --with-gmetad --with-librrd<span class="o">=</span>/usr/lib32/rrdtool
</span></code></pre></td></tr></table></div></figure>


<p>configure: error: apr-1-config binary not found in path</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>whereis apr1
</span><span class='line'><span class="nb">cd</span> /usr/ports/devel/apr1
</span><span class='line'>sudo make install clean <span class="o">&amp;&amp;</span> rehash
</span></code></pre></td></tr></table></div></figure>


<p>回来继续编译，报告缺少libconfuse not found</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /usr/ports/devel/libconfuse/
</span><span class='line'>sudo make install clean <span class="o">&amp;&amp;</span> rehash
</span></code></pre></td></tr></table></div></figure>


<p>报告缺少expat.h</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /usr/ports/textproc/expat2
</span><span class='line'>sudo make install clean <span class="o">&amp;&amp;</span> rehash
</span></code></pre></td></tr></table></div></figure>


<p>问题依旧修改配置</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ./configure --with-gmetad --with-librrd<span class="o">=</span>/usr/lib32/rrdtool --with-libexpat<span class="o">=</span>/usr/local/
</span><span class='line'>sudo make
</span><span class='line'>sudo make install
</span></code></pre></td></tr></table></div></figure>


<p>安装完成！</p>

<p>测试gmetad的运行</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /usr/local/sbin/gmetad -d 5
</span><span class='line'>
</span><span class='line'>Going to run as user nobody
</span><span class='line'>
</span><span class='line'>Please make sure that /var/db/ganglia/rrds exists: No such file or directory
</span><span class='line'>
</span><span class='line'>sudo mkdir -p /var/db/ganglia/rrds
</span><span class='line'>
</span><span class='line'>sudo /usr/local/sbin/gmetad -d 5
</span><span class='line'>
</span><span class='line'>Going to run as user nobody
</span><span class='line'>
</span><span class='line'>Please make sure that /var/db/ganglia/rrds is owned by nobody
</span><span class='line'>
</span><span class='line'>sudo chown -R nobody:nobody /var/db/ganglia/
</span><span class='line'>
</span><span class='line'>Going to run as user nobody
</span><span class='line'>
</span><span class='line'>Sources are ...
</span><span class='line'>
</span><span class='line'>Source: <span class="o">[</span>my cluster, step 15<span class="o">]</span> has 1 sources
</span><span class='line'>
</span><span class='line'>        127.0.0.1
</span><span class='line'>
</span><span class='line'>xml listening on port 8651
</span><span class='line'>
</span><span class='line'>interactive xml listening on port 8652
</span><span class='line'>
</span><span class='line'>cleanup thread has been started
</span><span class='line'>
</span><span class='line'>Data thread 34460440576 is monitoring <span class="o">[</span>my cluster<span class="o">]</span> data <span class="nb">source</span>
</span><span class='line'>
</span><span class='line'><span class="nb">        </span>127.0.0.1
</span><span class='line'>
</span><span class='line'>data_thread<span class="o">()</span> <span class="k">for</span> <span class="o">[</span>my cluster<span class="o">]</span> failed to contact node 127.0.0.1
</span><span class='line'>
</span><span class='line'>data_thread<span class="o">()</span> got no answer from any <span class="o">[</span>my cluster<span class="o">]</span> datasource
</span><span class='line'>
</span><span class='line'>data_thread<span class="o">()</span> <span class="k">for</span> <span class="o">[</span>my cluster<span class="o">]</span> failed to contact node 127.0.0.1
</span><span class='line'>
</span><span class='line'>data_thread<span class="o">()</span> got no answer from any <span class="o">[</span>my cluster<span class="o">]</span> datasource
</span><span class='line'>
</span><span class='line'>data_thread<span class="o">()</span> <span class="k">for</span> <span class="o">[</span>my cluster<span class="o">]</span> failed to contact node 127.0.0.1
</span><span class='line'>
</span><span class='line'>data_thread<span class="o">()</span> got no answer from any <span class="o">[</span>my cluster<span class="o">]</span> datasource
</span><span class='line'>
</span><span class='line'>sudo /usr/local/sbin/gmond -d 5
</span></code></pre></td></tr></table></div></figure>


<p>看上去运行正常了</p>

<p>基本可以。</p>

<p>开始装界面。不要装3.5.3有些图开不了，3.5.2经过测试没有问题。</p>

<p><a href="http://sourceforge.net/projects/ganglia/files/ganglia-web/3.5.2/ganglia-web-3.5.2.tar.gz/download">http://sourceforge.net/projects/ganglia/files/ganglia-web/3.5.2/ganglia-web-3.5.2.tar.gz/download</a></p>

<p>注意web要求rrd数据库的路径只能是/var/lib/ganglia/rrds</p>

<p>由于之前是装在了/var/db/ganglia/rrds</p>

<p>则</p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /var/lib
</span><span class='line'>sudo ln -s /var/db/ganglia ganglia
</span></code></pre></td></tr></table></div></figure>


<p>然后访问浏览器</p>

<p><a href="http://192.168.174.133/ganglia/">http://192.168.174.133/ganglia/</a></p>

<p>此时</p>

<p>There was an error collecting ganglia data (127.0.0.1:8652): fsockopen error: Connection refused</p>

<p>因为没有打开gmond和gmetad，打开发现界面ok了，但是没有数据！</p>

<p>怀疑是php没有安装rrdtool的扩展,继续安装php的rrdtool扩展</p>

<p><a href="http://pecl.php.net/package/rrd">http://pecl.php.net/package/rrd</a></p>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ./configure --with-php-config<span class="o">=</span>/usr/local/php/bin/php-config --with-rrd-binary<span class="o">=</span>/usr/lib32/rrdtool/bin/rrdtool
</span></code></pre></td></tr></table></div></figure>


<p>配置报错找不到rrdtool的头文件，直接定位configure文件进行修改</p>

<p>for i in /usr /usr/local /usr/local/rrdtool /opt; do</p>

<p>改成我装的路径</p>

<p>for i in /usr /usr/local /usr/local/rrdtool /opt /usr/lib32/rrdtool; do</p>

<p>改了之后</p>

<p>configure: error: rrd lib version seems older than 1.3.0, update to 1.3.0+</p>

<p>通过后还是报错</p>

<p>error: too many arguments to function &lsquo;rrd_lastupdate&rsquo;</p>

<p>参考这里<a href="https://bugs.php.net/bug.php?id=59558">https://bugs.php.net/bug.php?id=59558</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">-</span> <span class="k">if</span> <span class="p">(</span><span class="n">rrd_lastupdate</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">last_update</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ds_cnt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ds_namv</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span> <span class="k">if</span> <span class="p">(</span><span class="n">rrd_lastupdate_r</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">last_update</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ds_cnt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ds_namv</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>装完看到phpinfo里有了。</p>

<p>之后还要修改conf_default.php文件</p>

<p>graphite_rrd_dir变量，指向ganglia存放rrd的目录，我的是/var/db/ganglia/rrds</p>

<p>还有一个$conf[&lsquo;rrdtool&rsquo;]变量，指向rrdtool的安装位置，我的是/usr/lib32/rrdtool/bin/rrdtool</p>

<p>应该就差不多了！这样如果还不行，检查自身人品，然后看下/var/log/message</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[遭遇nginx upstream sent too big header]]></title>
    <link href="http://evoupsight.com/blog/2011/09/11/nginx-upstream-sent-too-big-header/"/>
    <updated>2011-09-11T23:20:00+08:00</updated>
    <id>http://evoupsight.com/blog/2011/09/11/nginx-upstream-sent-too-big-header</id>
    <content type="html"><![CDATA[<p>遭遇nginx upstream sent too big header while reading response header from upstream</p>

<p>这个问题会导致输出502头信息。</p>

<p>nginx配置中要加以下2行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>fastcgi_buffer_size 128k;
</span><span class='line'>fastcgi_buffers 8 128k;
</span></code></pre></td></tr></table></div></figure>


<p>一加果然就不报错了！原因是nginx处理header太大了，还有一个原因就是我写程序的时候发header太多了，只能发一次，程序还要调整啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[freebsd下hbase安装]]></title>
    <link href="http://evoupsight.com/blog/2011/07/30/freebsd-install-base/"/>
    <updated>2011-07-30T21:51:00+08:00</updated>
    <id>http://evoupsight.com/blog/2011/07/30/freebsd-install-base</id>
    <content type="html"><![CDATA[<p>安装JDK补遗,port中该文件已经无法获取，原因是版权。关键是下载到diablo-caffe-freebsd7-i386-1.6.0_07-b02.tar.bz</p>

<p><a href="http://www.freebsdfoundation.org/cgi-bin/download?download=diablo-caffe-freebsd7-amd64-1.6.0_07-b02.tar.bz2">http://www.freebsdfoundation.org/cgi-bin/download?download=diablo-caffe-freebsd7-amd64-1.6.0_07-b02.tar.bz2</a></p>

<p>下完就放到/usr/port/distfile</p>

<p>进到/usr/ports/java/diablo-jdk16之后也要把timezone那个选取消。</p>

<p>再装jdk16/usr/port/java/jdk16</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo axel http://www.java.net/download/jdk6/6u3/promoted/b05/jdk-6u3-fcs-src-b05-jrl-24_sep_2007.jar
</span><span class='line'>sudo mv jdk-6u3-fcs-src-b05-jrl-24_sep_2007.jar php-5.3.8.tar.bz2 /usr/ports/distfiles/
</span></code></pre></td></tr></table></div></figure>


<p>装apache-ant，自动的，如果不行cd /usr/port/devel/apache-ant/ sudo make install clean</p>

<p>而且要有足够的SWAP空间！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>setenv JAVA_HOME /usr/local/jdk1.6.0/
</span></code></pre></td></tr></table></div></figure>


<p>PATH我没有设置</p>

<p>然后是hbase的安装，拿到权威手册翻一翻就能知道</p>

<p>单个节点的启动方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ./bin/start-hbase.sh
</span><span class='line'>sudo ./bin/hbase-daemon.sh start thrift
</span></code></pre></td></tr></table></div></figure>


<p>hshell的进入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ./bin/hbase shell
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言变参宏]]></title>
    <link href="http://evoupsight.com/blog/2011/06/05/lighttpd-change-parameter-define/"/>
    <updated>2011-06-05T23:29:00+08:00</updated>
    <id>http://evoupsight.com/blog/2011/06/05/lighttpd-change-parameter-define</id>
    <content type="html"><![CDATA[<p>研究lighttpd1.4.28代码的时候，到缓存调用部分，有这么一句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">buffer_copy_string_len</span><span class="p">(</span><span class="n">modules</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">,</span> <span class="n">CONST_STR_LEN</span><span class="p">(</span><span class="s">&quot;server.modules&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>而此参数声明的时候是这样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">buffer_copy_string_len</span><span class="p">(</span><span class="n">buffer</span> <span class="o">*</span><span class="n">b</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">s_len</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>怎么是三个参？从CONST_STR_LEN入手，这是一个宏</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define CONST_STR_LEN(x) x, x ? sizeof(x) - 1 : 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>这不就成了三个参了？记一笔&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言宏定义技巧(常用宏定义)(转)]]></title>
    <link href="http://evoupsight.com/blog/2011/01/16/c-common-define/"/>
    <updated>2011-01-16T13:43:00+08:00</updated>
    <id>http://evoupsight.com/blog/2011/01/16/c-common-define</id>
    <content type="html"><![CDATA[<p>写好C语言，漂亮的宏定义很重要，使用宏定义可以防止出错，提高可移植性，可读性，方便性 等等。下面列举一些成熟软件中常用得宏定义。。。。。。</p>

<p>1，防止一个头文件被重复包含</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifndef COMDEF_H </span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define COMDEF_H </span>
</span><span class='line'>
</span><span class='line'><span class="c1">//头文件内容 </span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span>
</span></code></pre></td></tr></table></div></figure>


<p>2，重新定义一些类型，防止由于各种平台和编译器的不同，而产生的类型字节数差异，方便移植。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">boolean</span><span class="p">;</span> <span class="cm">/* Boolean value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">uint32</span><span class="p">;</span> <span class="cm">/* Unsigned 32 bit value */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">uint16</span><span class="p">;</span> <span class="cm">/* Unsigned 16 bit value */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">uint8</span><span class="p">;</span> <span class="cm">/* Unsigned 8 bit value */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">signed</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">int32</span><span class="p">;</span> <span class="cm">/* Signed 32 bit value */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">signed</span> <span class="kt">short</span> <span class="n">int16</span><span class="p">;</span> <span class="cm">/* Signed 16 bit value */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">signed</span> <span class="kt">char</span> <span class="n">int8</span><span class="p">;</span> <span class="cm">/* Signed 8 bit value */</span>
</span></code></pre></td></tr></table></div></figure>


<p>//下面的不建议使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">byte</span><span class="p">;</span> <span class="cm">/* Unsigned 8 bit value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">word</span><span class="p">;</span> <span class="cm">/* Unsinged 16 bit value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">dword</span><span class="p">;</span> <span class="cm">/* Unsigned 32 bit value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">uint1</span><span class="p">;</span> <span class="cm">/* Unsigned 8 bit value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">uint2</span><span class="p">;</span> <span class="cm">/* Unsigned 16 bit value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">uint4</span><span class="p">;</span> <span class="cm">/* Unsigned 32 bit value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">signed</span> <span class="kt">char</span> <span class="n">int1</span><span class="p">;</span> <span class="cm">/* Signed 8 bit value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">signed</span> <span class="kt">short</span> <span class="n">int2</span><span class="p">;</span> <span class="cm">/* Signed 16 bit value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">int4</span><span class="p">;</span> <span class="cm">/* Signed 32 bit value type. */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">signed</span> <span class="kt">long</span> <span class="n">sint31</span><span class="p">;</span> <span class="cm">/* Signed 32 bit value */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">signed</span> <span class="kt">short</span> <span class="n">sint15</span><span class="p">;</span> <span class="cm">/* Signed 16 bit value */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">signed</span> <span class="kt">char</span> <span class="n">sint7</span><span class="p">;</span> <span class="cm">/* Signed 8 bit value */</span>
</span></code></pre></td></tr></table></div></figure>


<p>3，得到指定地址上的一个字节或字</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define MEM_B( x ) ( *( (byte *) (x) ) ) </span>
</span><span class='line'><span class="cp">#define MEM_W( x ) ( *( (word *) (x) ) ) </span>
</span></code></pre></td></tr></table></div></figure>


<p>4，求最大值和最小值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define MAX( x, y ) ( ((x) &gt; (y)) ? (x) : (y) ) </span>
</span><span class='line'><span class="cp">#define MIN( x, y ) ( ((x) &lt; (y)) ? (x) : (y) ) </span>
</span></code></pre></td></tr></table></div></figure>


<p>5，得到一个field在结构体(struct)中的偏移量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define FPOS( type, field ) \ </span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*lint -e545 */</span> <span class="p">(</span> <span class="p">(</span><span class="n">dword</span><span class="p">)</span> <span class="o">&amp;</span><span class="p">((</span> <span class="n">type</span> <span class="o">*</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span><span class="o">-&gt;</span> <span class="n">field</span> <span class="p">)</span> <span class="cm">/*lint +e545 */</span>
</span></code></pre></td></tr></table></div></figure>


<p>6,得到一个结构体中field所占用的字节数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define FSIZ( type, field ) sizeof( ((type *) 0)-&gt;field ) </span>
</span></code></pre></td></tr></table></div></figure>


<p>7，按照LSB格式把两个字节转化为一个Word</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define FLIPW( ray ) ( (((word) (ray)[0]) * 256) + (ray)[1] ) </span>
</span></code></pre></td></tr></table></div></figure>


<p>8，按照LSB格式把一个Word转化为两个字节</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define FLOPW( ray, val ) \ </span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">ray</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">val</span><span class="p">)</span> <span class="o">/</span> <span class="mi">256</span><span class="p">);</span> <span class="err">\</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">ray</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">val</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>9，得到一个变量的地址（word宽度）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define B_PTR( var ) ( (byte *) (void *) &amp;(var) ) </span>
</span><span class='line'><span class="cp">#define W_PTR( var ) ( (word *) (void *) &amp;(var) ) </span>
</span></code></pre></td></tr></table></div></figure>


<p>10，得到一个字的高位和低位字节</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define WORD_LO(xxx) ((byte) ((word)(xxx) &amp; 255)) </span>
</span><span class='line'><span class="cp">#define WORD_HI(xxx) ((byte) ((word)(xxx) &gt;&gt; 8)) </span>
</span></code></pre></td></tr></table></div></figure>


<p>11，返回一个比X大的最接近的8的倍数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define RND8( x ) ((((x) + 7) / 8 ) * 8 ) </span>
</span></code></pre></td></tr></table></div></figure>


<p>12，将一个字母转换为大写</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define UPCASE( c ) ( ((c) &gt;= &#39;a&#39; &amp;&amp; (c) &lt;= &#39;z&#39;) ? ((c) - 0x20) : (c) ) </span>
</span></code></pre></td></tr></table></div></figure>


<p>13，判断字符是不是10进值的数字</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define DECCHK( c ) ((c) &gt;= &#39;0&#39; &amp;&amp; (c) &lt;= &#39;9&#39;) </span>
</span></code></pre></td></tr></table></div></figure>


<p>14，判断字符是不是16进值的数字</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define HEXCHK( c ) ( ((c) &gt;= &#39;0&#39; &amp;&amp; (c) &lt;= &#39;9&#39;) ||\ </span>
</span><span class='line'><span class="p">((</span><span class="n">c</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="sc">&#39;F&#39;</span><span class="p">)</span> <span class="o">||</span><span class="err">\</span>
</span><span class='line'><span class="p">((</span><span class="n">c</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="sc">&#39;a&#39;</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="sc">&#39;f&#39;</span><span class="p">)</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>15，防止溢出的一个方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define INC_SAT( val ) (val = ((val)+1 &gt; (val)) ? (val)+1 : (val)) </span>
</span></code></pre></td></tr></table></div></figure>


<p>16，返回数组元素的个数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define ARR_SIZE( a ) ( sizeof( (a) ) / sizeof( (a[0]) ) )</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>17，返回一个无符号数n尾的值MOD_BY_POWER_OF_TWO(X,n)=X%(2<sup>n</sup>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define MOD_BY_POWER_OF_TWO( val, mod_by ) \ </span>
</span><span class='line'><span class="p">(</span> <span class="p">(</span><span class="n">dword</span><span class="p">)(</span><span class="n">val</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">dword</span><span class="p">)((</span><span class="n">mod_by</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>18，对于IO空间映射在存储空间的结构，输入输出处理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define inp(port) (*((volatile byte *) (port))) </span>
</span><span class='line'><span class="cp">#define inpw(port) (*((volatile word *) (port))) </span>
</span><span class='line'><span class="cp">#define inpdw(port) (*((volatile dword *)(port))) </span>
</span><span class='line'><span class="cp">#define outp(port, val) (*((volatile byte *) (port)) = ((byte) (val))) </span>
</span><span class='line'><span class="cp">#define outpw(port, val) (*((volatile word *) (port)) = ((word) (val))) </span>
</span><span class='line'><span class="cp">#define outpdw(port, val) (*((volatile dword *) (port)) = ((dword) (val))) </span>
</span></code></pre></td></tr></table></div></figure>


<p>[2005-9-9添加]</p>

<p>19,使用一些宏跟踪调试</p>

<p>A N S I标准说明了五个预定义的宏名。它们是：</p>

<p>_ L I N E _</p>

<p>_ F I L E _</p>

<p>_ D A T E _</p>

<p>_ T I M E _</p>

<p>_ S T D C _</p>

<p>如果编译不是标准的，则可能仅支持以上宏名中的几个，或根本不支持。记住编译程序</p>

<p>也许还提供其它预定义的宏名。</p>

<p>_ L I N E <em>及</em> F I L E _宏指令在有关# l i n e的部分中已讨论，这里讨论其余的宏名。</p>

<p>_ D AT E _宏指令含有形式为月/日/年的串，表示源文件被翻译到代码时的日期。</p>

<p>源代码翻译到目标代码的时间作为串包含在<em> T I M E </em>中。串形式为时：分：秒。</p>

<p>如果实现是标准的，则宏<em> S T D C </em>含有十进制常量1。如果它含有任何其它数，则实现是</p>

<p>非标准的。</p>

<p>可以定义宏，例如:</p>

<p>当定义了_DEBUG，输出数据信息和所在文件所在行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifdef _DEBUG </span>
</span><span class='line'><span class="cp">#define DEBUGMSG(msg,date) printf(msg);printf(“%d%d%d”,date,_LINE_,_FILE_) </span>
</span><span class='line'><span class="cp">#else </span>
</span><span class='line'><span class="cp">#define DEBUGMSG(msg,date) </span>
</span><span class='line'><span class="cp">#endif </span>
</span></code></pre></td></tr></table></div></figure>


<p>20，宏定义防止使用是错误</p>

<p>用小括号包含。</p>

<p>例如：#define ADD(a,b) （a+b）</p>

<p>用do{}while(0)语句包含多语句防止错误</p>

<p>例如：#difne DO(a,b) a+b;\</p>

<p>a++;</p>

<p>应用时：if(….)</p>

<p>DO(a,b); //产生错误</p>

<p>else</p>

<p>解决方法: #difne DO(a,b) do{a+b;\</p>

<p>a++;}while(0)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[头文件中变量赋值方法]]></title>
    <link href="http://evoupsight.com/blog/2010/12/15/header-file-variable-assign/"/>
    <updated>2010-12-15T00:04:00+08:00</updated>
    <id>http://evoupsight.com/blog/2010/12/15/header-file-variable-assign</id>
    <content type="html"><![CDATA[<p>先看这段文字</p>

<hr>


<p>今天看C++ Primer关于头文件定义的一节，其中说到，头文件应用于声明而不是用于定义。其实，C++标准并没有规定头文件中不能定义 变量，只不过如果在头文件中定义变量，而该头文件又被多次包含的话，会造成变量的重新定义。
这里还涉及到另一个问题，需要提前说明，即使用预处理器避免多重包含。这里的多重包含指的是同一个文件直接或者间接的包含一个头文件多次，例如a.h包含 b.h，a.cpp同时包含a.h和b.h，a.cpp就两次包含了b.h。但由于b.h中具有避免多重包含的措施，a.cpp中还是只包含了b.h一 次。而包含的意思其实就是在预处理阶段用被包含文件的内容代替此包含语句。
回到头文件定义变量的问题上，如果在头文件中定义了变量，避免多重包含的措施只能避免该头文件在同一个编译单元内被包含一次，在不同的编译单元内还是会被多次包含的，这样就造成了变量的重复定义。
但是也有例外，如果const对象在编译时可以确定其值，可以将其放在头文件中定义。这么做是有原因的——const对象默认情况下是定义该变量的文件的 局部变量，这样即使此头文件被多个包含，都不会在包含这些文件中重复定义此变量，所有对于这个const对象的引用全都指向在头文件中定义的对象。如果在 const对象定义的时候声明extern，const对象就变得和普通非const对象一样，从而失去此特性（非const对象的默认属性为 extern）。
C++中的很多用法都不是标准C++规定的，但是由于各种原因，已经是约定俗成或是惯常用法，至于原因以及除此之外的其他用法完全可以不必深究，否则很容易钻牛角尖！</p>

<hr>


<p>今天移植gamedev里文章讲到的一个例子的时候碰到了这个问题，要在头文件里给一个变量定义。</p>

<p>最后这样就可以了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//16Bit format for video card</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">PixelFormat</span> <span class="o">=</span> <span class="n">PF_555</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>之前有些程序把一些库的变量定义都放到了主文件中，搞得非常难看，这下搞定了。
相应的在头文件里定义结构用typedef而不要去用struct！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[目前看到的对内存对齐问题最好的解释]]></title>
    <link href="http://evoupsight.com/blog/2010/11/30/memory-alignment/"/>
    <updated>2010-11-30T12:14:00+08:00</updated>
    <id>http://evoupsight.com/blog/2010/11/30/memory-alignment</id>
    <content type="html"><![CDATA[<p>简单的说，对于一个class或是struct：</p>

<p>按里面所占字节最大的类型为位域任何变量的存储不能跨位域 比如：</p>

<p>对于</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">A</span> <span class="p">{</span>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以int类型所占字节为位域，也就是4 然后，对于a，四个字节对于c，一个字节，后面三个字节不能用来存储b，因为b是四个，如果用这三个，那么必将剩余一个，根据原则，不可跨位域</p>

<p>所以存放形式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa
</span><span class='line'>
</span><span class='line'>cccccccc XXXXXXXX XXXXXXXX XXXXXXXX
</span><span class='line'>
</span><span class='line'>bbbbbbbb bbbbbbbb bbbbbbbb bbbbbbbb
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++实现crc32]]></title>
    <link href="http://evoupsight.com/blog/2010/11/26/crc32-cpp/"/>
    <updated>2010-11-26T19:07:00+08:00</updated>
    <id>http://evoupsight.com/blog/2010/11/26/crc32-cpp</id>
    <content type="html"><![CDATA[<p>直接参考如下连接
<a href="http://stackoverflow.com/questions/302914/crc32-c-or-c-implementation">http://stackoverflow.com/questions/302914/crc32-c-or-c-implementation</a></p>

<p>或者boost、Crypto++</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[typedef小结]]></title>
    <link href="http://evoupsight.com/blog/2010/11/25/typedef-summary/"/>
    <updated>2010-11-25T14:52:00+08:00</updated>
    <id>http://evoupsight.com/blog/2010/11/25/typedef-summary</id>
    <content type="html"><![CDATA[<p>在头文件里typedef的再inlcude到源文件里，这样就可以省去struct xx obj;直接xx obj;</p>

<p>对于动态分配内存的时候也可以</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">xx</span> <span class="o">*</span> <span class="n">obj</span><span class="o">=</span> <span class="p">(</span><span class="n">xx</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">xx</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gcc静态编译]]></title>
    <link href="http://evoupsight.com/blog/2010/11/18/gcc-static-compile/"/>
    <updated>2010-11-18T16:50:00+08:00</updated>
    <id>http://evoupsight.com/blog/2010/11/18/gcc-static-compile</id>
    <content type="html"><![CDATA[<p>制作静态动态库参考这篇文章《Creating a shared and static library with the gnu compiler [gcc]》
<a href="http://www.adp-gmbh.ch/cpp/gcc/create_lib.html">http://www.adp-gmbh.ch/cpp/gcc/create_lib.html</a>
编译静态库
先找一下源文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . -name <span class="s2">&quot;*.c&quot;</span>
</span><span class='line'>./sfhashfcn.c
</span><span class='line'>./test.c
</span><span class='line'>./sfmemcap.c
</span><span class='line'>./sfxhash.c
</span><span class='line'>./sfprimetable.c
</span></code></pre></td></tr></table></div></figure>


<p>生成中间文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gcc -c sfhashfcn.c -o sfhashfcn.o
</span><span class='line'>gcc -c sfmemcap.c -o sfmemcap.o
</span><span class='line'>gcc -c sfxhash.c -o sfxhash.o
</span><span class='line'>gcc -c sfprimetable.c -o sfprimetable.o
</span></code></pre></td></tr></table></div></figure>


<p>生成静态库</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ar rcs libthash.a sfmemcap.o sfxhash.o sfprimetable.o sfhashfcn.o
</span></code></pre></td></tr></table></div></figure>


<p>最后链接（注意libxx.a，最后链接参数是-lxx）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gcc -static test.c -L. -lthash -o statically_linked_test
</span></code></pre></td></tr></table></div></figure>


<p>如果c++的项目要使用c的静态库则需要在引用的头文件的外面加上如下的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">#</span><span class="n">include</span> <span class="s">&quot;header.h&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[freebsd下如何创建和使用Ctag]]></title>
    <link href="http://evoupsight.com/blog/2010/07/23/freebsd-ctag/"/>
    <updated>2010-07-23T14:48:00+08:00</updated>
    <id>http://evoupsight.com/blog/2010/07/23/freebsd-ctag</id>
    <content type="html"><![CDATA[<p>以php语言为例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . -name <span class="s2">&quot;*.php&quot;</span> -exec exctags --language-force<span class="o">=</span>php <span class="o">{}</span> +
</span></code></pre></td></tr></table></div></figure>


<p>在freebsd里面，一开始我还是去ctags.sourceforge.net下载编译安装了ctags，老实说freebsd自带的ctags一点也不好用，除了不能直接ctags -R *以外，据说vim的taglist还不支持这个语法，还是要去下载的这个版本。但是和freebsd默认的ctags就冲突了！</p>

<p>于是就直接port安装了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">pwd</span>
</span><span class='line'>/usr/bin/
</span><span class='line'>mv ctags ctags.orig
</span><span class='line'>ln -s /usr/local/bin/ctags ctags
</span></code></pre></td></tr></table></div></figure>


<p>对于c语言可能包含的h文件的方法，我采用如下的方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . -regex <span class="s2">&quot;.*\.\(c\|h\)&quot;</span> -exec exctags <span class="o">{}</span> +
</span></code></pre></td></tr></table></div></figure>


<p>题外话，要将find到的文件移动到其他目录，可以这么干
find . -name &ldquo;*.h&rdquo; -exec mv {} temp/ \;</p>

<p>彩色查找CM_MISC关键字</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . ! -path <span class="s2">&quot;*.svn*&quot;</span> -type f -exec grep -n --color CM_MISC <span class="o">{}</span> <span class="se">\;</span>
</span></code></pre></td></tr></table></div></figure>


<p>替换全部代码中的abc为123，排除svn文件夹</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . ! -path <span class="s2">&quot;*.svn*&quot;</span> -type f -exec sed -i <span class="s2">&quot;s/abc/123/g&quot;</span> <span class="o">{}</span> <span class="se">\;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我最后在~/.cshrc的配置文件中直接把查找关键字做成一个别名，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span>f <span class="s2">&quot;find . \( -path &#39;*.svn*&#39; -o -path &#39;*.fcgi*&#39; -o -path &#39;*tags*&#39; -o -name &#39;*.o&#39; -o -name &#39;*.so&#39; -o -name &#39;*.a&#39; \) -p    rune -o -name .git -prune -o -print | xargs grep -in --color&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样查找某个字符串的时候只需要输入如下指令即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>f <span class="s1">&#39;字符串&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单例模式C语言版]]></title>
    <link href="http://evoupsight.com/blog/2010/06/21/singleton-c-language/"/>
    <updated>2010-06-21T07:38:00+08:00</updated>
    <id>http://evoupsight.com/blog/2010/06/21/singleton-c-language</id>
    <content type="html"><![CDATA[<p>Tokyo Cabinet的源码看到的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Get the global memory pool object. */</span>
</span><span class='line'><span class="n">TCMPOOL</span> <span class="o">*</span><span class="nf">tcmpoolglobal</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">tcglobalmemorypool</span><span class="p">)</span> <span class="k">return</span> <span class="n">tcglobalmemorypool</span><span class="p">;</span><span class="c1">//如果有全局内存池对象就返回对象</span>
</span><span class='line'>    <span class="n">tcglobalmemorypool</span> <span class="o">=</span> <span class="n">tcmpoolnew</span><span class="p">();</span><span class="c1">//如果没有就创建啊^_^</span>
</span><span class='line'>    <span class="n">atexit</span><span class="p">(</span><span class="n">tcmpooldelglobal</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">tcglobalmemorypool</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而这个tcglobalmemorypool，其实是写在全局的，有</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Global memory pool object. */</span>
</span><span class='line'><span class="n">TCMPOOL</span> <span class="o">*</span><span class="n">tcglobalmemorypool</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>后记：其实只要把tcglobalmemorypool定义为全局变量，是个人都会创建这种模式的吧&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java关于ConcurrentModificationException异常]]></title>
    <link href="http://evoupsight.com/blog/2009/12/23/java-concurrentmodificationexception/"/>
    <updated>2009-12-23T15:46:00+08:00</updated>
    <id>http://evoupsight.com/blog/2009/12/23/java-concurrentmodificationexception</id>
    <content type="html"><![CDATA[<p>如果出现java.util.ConcurrentModificationException</p>

<p>主要原因是使用了叠代器，而且删除了某元素。临时的解决方法是设置1个标记，如果遇到该标记略过！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于头文件互相包含的解决方法]]></title>
    <link href="http://evoupsight.com/blog/2009/09/23/header-file-refered-by-each-other/"/>
    <updated>2009-09-23T23:09:00+08:00</updated>
    <id>http://evoupsight.com/blog/2009/09/23/header-file-refered-by-each-other</id>
    <content type="html"><![CDATA[<h2>写在前面，如果你这么写了，基本上不是很好的写法，以下是我的惨痛经验教训。</h2>

<p>我的游戏项目中有2个文件，其中cls_player.h包含cls_enemy.h,而且cls_enemy.h也要cls_player.h，这样子一来就成了重复包含了，虽然用防止重复包含头文件的宏#ifndef #define #endif，还是会报错。解决的方法初步看起来如下：</p>

<!-- more -->




<hr>


<p>不要在.h里互相包含头文件.</p>

<p>可以在另一个A的.h里声明一下class B,然后用B的指针就可以.包头文件放在A的cpp里包含就可以了.
</hr>
声明的时候只要在cls_enemy.h里面加上一句class class_player;就可以了。这样cls_enemy.h里就不要去包含cls_player.h了，而cls_player.h则照旧包含cls_enemy.h。但是在设计的时候发现还不行。</p>

<p>总结，如果2个类是差不多的类，最好放在一个文件里。</p>

<p>java倒是没有什么问题，所以java的话会这样子cls_player.java和cls_enemy.java
这样子大概会这么写</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span><span class="n">cls_player</span><span class="o">.</span><span class="na">java</span>
</span><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">evoup</span><span class="o">.</span><span class="na">player_enemy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">...</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">cls_player</span><span class="o">{</span>
</span><span class='line'>   <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后看搜到了这篇文章
<a href="http://topic.csdn.net/t/20051106/18/4375160.html">http://topic.csdn.net/t/20051106/18/4375160.html</a></p>

<p><a href="http://hi.baidu.com/030502505/blog/item/4a7eaba2e9cd12aacaefd06f.html/cmtid/11994e2a68a059315243c1b4">http://hi.baidu.com/030502505/blog/item/4a7eaba2e9cd12aacaefd06f.html/cmtid/11994e2a68a059315243c1b4</a></p>

<hr>


<h2>正解</h2>

<p>现在我总结一下问题的解决过程和方法：</p>

<p>方法一：利用友元类</p>

<p>我一共有两个类，由于要在两个类的头文件里互相应用对方，所以，在每一个类的头文件里面现包含另一个类的头文件，然后在该类的定义中声明另一个类为友元类。如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;B.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">CA</span><span class="o">:</span> <span class="n">public</span> <span class="n">CDialog</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">friend</span> <span class="n">class</span> <span class="n">CB</span><span class="p">;</span>
</span><span class='line'>    <span class="nl">public:</span>
</span><span class='line'>    <span class="n">CB</span><span class="o">*</span> <span class="n">m_b</span><span class="p">;</span> <span class="c1">//注意一定要是指针类型</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在另一个类中可以这样声明:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;A.h&quot;</span>
</span><span class='line'><span class="n">class</span> <span class="n">CB</span><span class="o">:</span> <span class="n">public</span> <span class="n">CDialog</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">friend</span> <span class="n">class</span> <span class="n">CA</span><span class="p">;</span>
</span><span class='line'>    <span class="nl">public:</span>
</span><span class='line'>    <span class="n">CA</span> <span class="o">*</span> <span class="n">m_a</span><span class="p">;</span> <span class="c1">//注意一定要是指针类型</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后关键的是在每一个类的构造函数里 new 一个对方的类出来就ok了！</p>

<p>方法二：</p>

<p>我一共有两个类，由于要在两个类的头文件里互相应用对方，所以，在每一个类的头文件里面现包含另一个类的头文件，然后在该类的定义中声明另一个类为友元类。如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;B.h&quot;</span>
</span><span class='line'><span class="n">class</span> <span class="n">CA</span><span class="o">:</span> <span class="n">public</span> <span class="n">CDialog</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">friend</span> <span class="n">class</span> <span class="n">CB</span><span class="p">;</span>
</span><span class='line'>    <span class="nl">public:</span>
</span><span class='line'>    <span class="n">CB</span><span class="o">*</span> <span class="n">m_b</span><span class="p">;</span> <span class="c1">//注意一定要是指针类型</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在另一个类中可以这样声明:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">class</span> <span class="n">CA</span><span class="p">;</span>
</span><span class='line'><span class="n">class</span> <span class="n">CB</span><span class="o">:</span> <span class="n">public</span> <span class="n">CDialog</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nl">public:</span>
</span><span class='line'>    <span class="n">CA</span> <span class="o">*</span> <span class="n">m_a</span><span class="p">;</span> <span class="c1">//注意一定要是指针类型</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在cb.cpp文件中包含头文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;ca.h&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后关键的是在每一个类的构造函数里 new 一个对方的类出来就ok了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[call_user_func动态调用函数]]></title>
    <link href="http://evoupsight.com/blog/2009/06/11/php-call-user-func/"/>
    <updated>2009-06-11T11:40:00+08:00</updated>
    <id>http://evoupsight.com/blog/2009/06/11/php-call-user-func</id>
    <content type="html"><![CDATA[<p>call_user_func这个函数，可以把函数存到数组之后，在代码的任何位置进行调用，非常方便。
做项目修改a2billing代码时发现了这个函数。
在a2billing/Public/call-log-custoners.php的大约780行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">while</span><span class="o">...</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$FG_TABLE_COL</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="mi">11</span><span class="p">];</span>
</span><span class='line'><span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$FG_TABLE_COL</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="mi">11</span><span class="p">],</span> <span class="nv">$record_display</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'><span class="k">echo</span> <span class="nb">stripslashes</span><span class="p">(</span><span class="nv">$record_display</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="nb">end</span> <span class="k">while</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里$FG_TABLE_COL[$i][11]其实是放的是函数，设计目的是循环echo一行的每个列，如果
$FG_TABLE_COL[$i][11]里有函数，就用函数去格式化$record_display
把自定义函数都放在数组里，然后用call_user_func，第一个参数设置为
数组，第二个参数设置为自定义函数的参数。这个设计思想很直接借鉴。</p>

<p>后计：这种设计方法，比较适合用在设计restful程序的框架上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql_fetch_array不使用while]]></title>
    <link href="http://evoupsight.com/blog/2009/06/10/php-mysql-fetch-array-without-while/"/>
    <updated>2009-06-10T13:14:00+08:00</updated>
    <id>http://evoupsight.com/blog/2009/06/10/php-mysql-fetch-array-without-while</id>
    <content type="html"><![CDATA[<p>原来mysql_fetch_array也可以直接就分配到一个array，不用while
方法是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$num</span><span class="o">=</span><span class="nb">mysql_num_rows</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$num</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="nv">$num</span><span class="p">;</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$row</span><span class="p">[]</span><span class="o">=</span><span class="nb">mysql_fetch_array</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[批量删除CVS目录的cmd]]></title>
    <link href="http://evoupsight.com/blog/2008/07/20/delete-cvs-dir/"/>
    <updated>2008-07-20T23:23:00+08:00</updated>
    <id>http://evoupsight.com/blog/2008/07/20/delete-cvs-dir</id>
    <content type="html"><![CDATA[<p>windows下的bat的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="p">@</span><span class="k">echo</span> <span class="k">On</span>
</span><span class='line'><span class="p">@</span>Rem 删除CVS版本控制目录
</span><span class='line'><span class="p">@</span>PROMPT [Com]#
</span><span class='line'><span class="p">@</span><span class="k">echo</span> Find CVS
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="k">for</span> <span class="n">/r</span> . <span class="nv">%%a</span> in (.) <span class="k">do</span> @<span class="k">if</span> <span class="k">exist</span> <span class="s2">&quot;%%a\CVS&quot;</span> @<span class="k">echo</span> <span class="s2">&quot;%%a\CVS&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="k">echo</span> Find CVS Dir....OK
</span><span class='line'><span class="p">@</span><span class="k">pause</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="k">for</span> <span class="n">/r</span> . <span class="nv">%%a</span> in (.) <span class="k">do</span> @<span class="k">if</span> <span class="k">exist</span> <span class="s2">&quot;%%a\CVS&quot;</span> rd <span class="n">/s</span> <span class="n">/q</span> <span class="s2">&quot;%%a\CVS&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="k">echo</span> Clear CVS Dir Mission Completed
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="k">pause</span>
</span></code></pre></td></tr></table></div></figure>


<p>bash的话可以这么搞，参见<a href="http://stackoverflow.com/questions/1330136/script-to-recursively-delete-cvs-directory-on-server"><a href="http://stackoverflow.com/questions/1330136/script-to-recursively-delete-cvs-directory-on-server">http://stackoverflow.com/questions/1330136/script-to-recursively-delete-cvs-directory-on-server</a></a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$1&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;Usage: $0 path&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>find <span class="s2">&quot;$1&quot;</span> -name <span class="s1">&#39;CVS&#39;</span> -type d -print0 | xargs -0 rm -Rf
</span><span class='line'><span class="c"># or find … -exec like you have, if you can&#39;t use -print0/xargs -0</span>
</span><span class='line'><span class="c"># print0/xargs will be slightly faster.</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[W3的父框架下另一子框架跳转]]></title>
    <link href="http://evoupsight.com/blog/2008/05/23/parent-frame-location/"/>
    <updated>2008-05-23T21:15:00+08:00</updated>
    <id>http://evoupsight.com/blog/2008/05/23/parent-frame-location</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">parent</span><span class="p">.</span><span class="nb">window</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://www.baidu.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
