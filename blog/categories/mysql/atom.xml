<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mysql | Evoup`s Blog]]></title>
  <link href="http://evoupsight.com/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://evoupsight.com/"/>
  <updated>2014-08-03T22:22:10+08:00</updated>
  <id>http://evoupsight.com/</id>
  <author>
    <name><![CDATA[Evoup`s Blog]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mysql复制同步修复工具]]></title>
    <link href="http://evoupsight.com/blog/2014/07/10/mysql-double-master-repair/"/>
    <updated>2014-07-10T16:44:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/07/10/mysql-double-master-repair</id>
    <content type="html"><![CDATA[<p>采用mysql双主同步这种架构时要格外注意数据同步的问题，如果没有解决好不同步的问题，那就像《网站运维：保持数据实时的秘技》中提到的，简直就是期待数据不同步。所以对于实际使用过程中还是要紧密监控，对于数据不同步的状况，需要及时报警和处理，不然就等着数据异常吧！下文是主从同步的修复，主主的修复，只要把另外一个主看成从，互相修一下就可以了，见下文：</p>

<!--more-->


<h3>恢复主主的工具</h3>

<p>```bash</p>

<blockquote><p>wget <a href="http://www.percona.com/redir/downloads/percona-toolkit/2.2.6/percona-toolkit-2.2.6.tar.gz">http://www.percona.com/redir/downloads/percona-toolkit/2.2.6/percona-toolkit-2.2.6.tar.gz</a>
tar xzf percona-toolkit-2.2.6.tar.gz
cd percona-toolkit-2.2.6
perl Makefile.PL
Warning: prerequisite DBD::mysql 3 not found.
Warning: prerequisite DBI 1.46 not found.
Writing Makefile for percona-toolkit</p>

<p>sudo cpan YAML
sudo cpan DBD::mysql
```
出现询问是否yes，一路选择yes</p></blockquote>

<p>遇到测试的时候出现
<code>FAILED--Further testing stopped: ERROR: Access denied for user 'root'@'localhost' (using password: NO)</code></p>

<p>进入mysql修改一下默认密码为空
<code>
GRANT ALL PRIVILEGES ON *.* TO root@'localhost' IDENTIFIED BY '';
flush privileges;
</code></p>

<p>回来继续
<code>bash
sudo cpan DBD::mysql
</code></p>

<h3>检查完整性</h3>

<p><code>bash
[yinjia@hm15hadoop01 percona-toolkit-2.2.6]&gt;sudo pt-table-checksum  --recursion-method=processlist
Cannot connect to h=10.10.8.45
Diffs cannot be detected because no slaves were found.  Please read the --recursion-method documentation for information.
</code></p>

<p>在主上运行
<code>
mysql&gt; show slave hosts;
+-----------+------+------+-----------+
| Server_id | Host | Port | Master_id |
+-----------+------+------+-----------+
|         2 |      | 3306 |         1 |
+-----------+------+------+-----------+
1 row in set (0.00 sec)
</code></p>

<p>发现是host没有所以导致脚本会报错</p>

<p>到slave上，my.cnf中添加report_host=10.10.8.45 #设置成本机IP，然后重启slave
回到主上
```
mysql> show slave hosts;
+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| Server_id | Host       | Port | Master_id |
+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
|         2 | 10.10.8.45 | 3306 |         1 |
+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
1 row in set (0.00 sec)</p>

<blockquote><p>sudo pt-table-checksum &mdash;recursion-method=processlist
Password:
Cannot connect to h=10.10.8.45
Diffs cannot be detected because no slaves were found.  Please read the &mdash;recursion-method documentation for information.
```</p></blockquote>

<p>问题依旧,修改shell
```
[yinjia@hm15hadoop01 percona-toolkit-2.2.6]>pt-table-checksum &mdash;recursion-method=hosts &mdash;no-check-binlog-format &mdash;nocheck-replication-filters &mdash;replicate=monitor1_db.checksums &mdash;databases=monitor1_db &mdash;tables=httplog_status h=10.10.8.45,u=madcore,p=madcore,P=3306</p>

<pre><code>        TS ERRORS  DIFFS     ROWS  CHUNKS SKIPPED    TIME TABLE
</code></pre>

<p>06-30T13:33:50      0      1     5415       4       0   0.377 monitor1_db.httplog_status
```</p>

<p>看到DIFFS1，即为有1行差异
```
[yinjia@hm15hadoop02 ~/software]>pt-table-checksum &mdash;recursion-method=hosts &mdash;no-check-binlog-format &mdash;nocheck-replication-filters &mdash;replicate=monitor1_db.checksums &mdash;databases=monitor1_db &mdash;tables=httplog_status h=10.10.8.44,u=madcore,p=madcore,P=3306</p>

<pre><code>        TS ERRORS  DIFFS     ROWS  CHUNKS SKIPPED    TIME TABLE
</code></pre>

<p>06-30T13:34:58      0      1     5395       4       0   0.371 monitor1_db.httplog_status
```
可以看到现在DIFF是1，证明有差异。所以要同步，怎么同步，使用pt-table-sync进行修复</p>

<h3>修复同步</h3>

<p><code>
pt-table-sync --replicate=monitor1_db.checksums h=10.10.8.44,u=madcore,p=madcore h=10.10.8.45,u=madcore,p=madcore --print --execute
</code>
分别是主的IP，从的IP。针对两边分别修复，最后再看一下pt-table-checksum 发现DIFF为0证明数据同步成功。</p>

<h3>注意事项</h3>

<p>同步修复后，记录可能发生乱序，比较好的做法是加timestamp字段，把写入的时间戳记载下来，然后select的时候采用ORDER BY进行排序，这样就不会乱序了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql主主配置]]></title>
    <link href="http://evoupsight.com/blog/2014/07/10/mysql-double-master/"/>
    <updated>2014-07-10T16:20:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/07/10/mysql-double-master</id>
    <content type="html"><![CDATA[<p>由于在项目中使用采用mysql的双master来实现关系型数据库的HA，以下配置的步骤记录一遍。</p>

<!--more-->


<h3>作业环境：</h3>

<p>serverA:  IP:192.168.216.210  OS:CentOs6.4 64bit  DB:MySQL5.5.37</p>

<p>serverB:  IP:192.168.216.211  OS:CentOs6.4 64bit  DB:MySQL5.5.37</p>

<h3>Step1:同步授权</h3>

<p>ServerA:
<code>sh
GRANT REPLICATION SLAVE,FILE ON *.* TO repuser@'192.168.216.211' IDENTIFIED BY 'reppass';
flush privileges;
$ sudo service mysql-server restart
</code></p>

<p>ServerB:
<code>sh
GRANT REPLICATION SLAVE,FILE ON *.* TO repuser@'192.168.216.210' IDENTIFIED BY 'reppass';
flush privileges;
$ sudo service mysql-server restart
</code></p>

<h3>Step2:配置参数</h3>

<p>先找一下my.cnf的位置
<code>sh
$ mysql --verbose --help | grep -A 1 'Default options'
/etc/my.cnf /etc/mysql/my.cnf /usr/local/etc/my.cnf /usr/local/etc/mysql/my.cnf ~/.my.cnf
$ ls /etc/my.cnf /etc/mysql/my.cnf /usr/local/etc/my.cnf /usr/local/etc/mysql/my.cnf ~/.my.cnf
ls: /etc/my.cnf: No such file or directory
ls: /etc/mysql/my.cnf: No such file or directory
ls: /home/evoup/.my.cnf: No such file or directory
ls: /usr/local/etc/my.cnf: No such file or directory
ls: /usr/local/etc/mysql/my.cnf: No such file or directory
$ locate my-medium.cnf
/usr/local/share/mysql/my-medium.cnf
$ sudo cp /usr/local/share/mysql/my-medium.cnf /etc/my.cnf
</code></p>

<p>开启二进制日志
接下来需要在ServerA的/etc/my.cnf中添加配置
<code>
user=mysql
binlog-do-db=monitor1_db
binlog-ignore-db=mysql
replicate-do-db=monitor1_db
replicate-ignore-db=mysql
log-slave-update
slave-skip-errors=all
skip-name-resolve
sync_binlog=1
auto_increment_increment=2
auto_increment_offset=1
</code>
而在ServerB的/etc/my.cnf中
<code>
user=mysql
binlog-do-db=monitor1_db
binlog-ignore-db=mysql
replicate-do-db=monitor1_db
replicate-ignore-db=mysql
log-slave-update
slave-skip-errors=all
skip-name-resolve
sync_binlog=1
auto_increment_increment=2
auto_increment_offset=2
</code></p>

<p>几点说明：
1) binlog-do-db和replicate-do-db是指出要同步的数据库，一般指定了数据库再其下创建的表就都能进行主主同步。<br>
2) auto_increment_offset一定要指定为1个奇数，1个偶数，为什么，估计是同步的机制，反正这官方的主主解决方案我感觉很奇葩,必须这么设置。<br>
3）同步的数据库要有上面指出的帐号（repuser）操作的权限。</p>

<h3>Step3:关联Master和Master</h3>

<p>首先ServerA和ServerB要锁表，还有关闭slave同步
<code>
mysql&gt; flush tables with read lock;
mysql&gt; stop slave;
</code>
然后先查看ServerB的master状况
<code>
mysql&gt;show master status;
+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000019 |      107 | monitor1_db  | mysql            |
+------------------+----------+--------------+------------------+
</code>
在ServerA绑定好到ServerB的同步关系
<code>
mysql&gt; change master to master_host='192.168.216.211',master_password='madcore',master_user='madcore',master_log_file='mysql-bin.000019',master_log_pos=107;
</code></p>

<p>同样的，再查看ServerA的master状况
<code>
mysql&gt; show master status;
+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000018 |      23  | monitor1_db  | mysql            |
+------------------+----------+--------------+------------------+
</code></p>

<p>再ServerB绑定好到ServerA的同步关系
<code>
mysql&gt; change master to master_host='192.168.216.210',master_password='madcore',master_user='madcore',master_log_file='mysql-bin.000018',master_log_pos=23;
</code></p>

<p>在ServerA和ServerB打开slave和解锁表
<code>
mysql&gt; slave start;
mysql&gt; unlock tables;
</code>
然后查看slave的同步状态
···
show slave status\G;
···
观察几个指标
Slave_IO_Running: Yes
Slave_SQL_Running: Yes
Seconds_Behind_Master:0</p>

<p>再看一下进程描述
<code>
mysql&gt; show processlist;
</code>
一般上面几个指标是YES和0的话，这个不看都可以。</p>

<h3>补充：</h3>

<p>在同步设置中遇到的问题，可以通过查看mysql日志的方法来解决。
查看mysql日志的位置的命令。
<code>sh
mysql&gt; show variables like 'general_log_file';
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[完美解决phpmyadmin4.1.0访问缓慢]]></title>
    <link href="http://evoupsight.com/blog/2013/11/29/phpmyadmin4-dot-1-0-access-slow/"/>
    <updated>2013-11-29T10:52:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/11/29/phpmyadmin4-dot-1-0-access-slow</id>
    <content type="html"><![CDATA[<p>安装最新版phpmyadmin4.1.0出现了访问非常缓慢的问题，记录一下</p>

<!-- more -->


<h3>第一步</h3>

<p>文件名./libraries/Util.class.php文件
查找
<code>php
return strftime($date, $timestamp);
</code>
替换为
<code>php
if(extension_loaded('gettext'))
  return strftime($date, $timestamp);
</code></p>

<h3>第二步</h3>

<p>文件名./version_check.php文件
注释掉以下代码
```php
$version = PMA_Util::getLatestVersion();</p>

<p>echo json_encode(</p>

<pre><code>array(
    'version' =&gt; $version-&gt;version,
    'date' =&gt; $version-&gt;date,
    )
);
</code></pre>

<p>```</p>

<h3>第三步</h3>

<p>直接浏览器访问/setup路径，进行设置</p>

<h3>第四步</h3>

<p>应该可以登录了，如果不行清除cookie应该也可以访问了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅谈mysql导入导出csv的几种方法]]></title>
    <link href="http://evoupsight.com/blog/2012/11/26/mysql-import-output-csv/"/>
    <updated>2012-11-26T09:56:00+08:00</updated>
    <id>http://evoupsight.com/blog/2012/11/26/mysql-import-output-csv</id>
    <content type="html"><![CDATA[<p>有几种方法，这里一一列举：</p>

<h3>第一种：使用phpmyadmin选择文件上传</h3>

<p>此种方式很直观，只是要注意选择正确的换行符。假设我们在mysql的shell中采用如下方式先导出数据
<code>sql
select * from test_info
into outfile '/tmp/test_info.csv'
fields terminated by ',' optionally enclosed by '"' escaped by '"'
lines terminated by '\r\n';
</code>
则需要上传test_info.csv，点击CSV using LOAD DATA，然后按照如下设置进行导入
（其中fields terminated为分隔字段，optionally enclosed为可选包裹字段，escaped为转移字段，line terminated为行终止字段）
<img src="/images/evoup/phpmyadmin.png" alt="Alt text" /></p>

<h3>第二种：mysql shell</h3>

<p>其实就是刚刚导出的逆操作。在mysql的shell中操作：
```mysql
load data infile &lsquo;/tmp/test_info.csv&rsquo;</p>

<pre><code>into table test_info 
fields terminated by ','  optionally enclosed by '"' escaped by '"'
lines terminated by '\r\n';
</code></pre>

<p>```</p>

<h3>第三种：php程序解析后插入</h3>

<p><code>``php
&lt;?php
echo "开始导入csv数据到工作表\n";
echo "导入test_info...\n";
$mysql_host="172.16.27.55";
$mysql_user="user";
$mysql_pass="pass";
$db="test_info";
$handle = fopen ('/tmp/test_info.csv','r');  
$link= mysqli_init();
$link-&gt;options(MYSQLI_OPT_CONNECT_TIMEOUT, 8);
$link-&gt;real_connect($mysql_host, $mysql_user, $mysql_pass, $db);
$link-&gt;query("SET NAMES utf8");
$query="insert into</code>test_info<code>(</code>字段1<code>,</code>字段2`) values (&ldquo;;<br/>
while ($data = fgetcsv ($handle)) {</p>

<pre><code>$num = count ($data);  
for ($i=0; $i&lt;$num; $i++) {  
    if($i == $num-1){  
        $query .= "\"".$data[$i]."\")";  
        break;  
    }  
    $query .= "\"".$data[$i]."\",";  
}  

if (!($result=$link-&gt;query($query))) {
    echo $query;
    echo ("[导入失败]\n");
    exit;
}
</code></pre>

<p>$query=&ldquo;insert into <code>test_info</code> (<code>字段1</code>,<code>字段2</code>) values (&rdquo;;</p>

<p>}
?>
```
需要注意如果fgetcsv出错和到了行尾都是会返回false的。</p>
]]></content>
  </entry>
  
</feed>
