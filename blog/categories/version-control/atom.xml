<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: version_control | Evoup`s Blog]]></title>
  <link href="http://evoupsight.com/blog/categories/version-control/atom.xml" rel="self"/>
  <link href="http://evoupsight.com/"/>
  <updated>2014-08-14T11:37:01+08:00</updated>
  <id>http://evoupsight.com/</id>
  <author>
    <name><![CDATA[Evoup`s Blog]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git分支学习]]></title>
    <link href="http://evoupsight.com/blog/2014/05/10/git-branch-learning/"/>
    <updated>2014-05-10T14:17:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/05/10/git-branch-learning</id>
    <content type="html"><![CDATA[<p>主要学习的内容：git默认分支是什么，如何创建分支，如何查看所有分支，如何查看当前分支，如何提交分支，如何切换到分支,以下简单给出答案：</p>

<!-- more -->


<p>git的默认分支是master</p>

<p>创建分支
<code>
git branch branchname
</code></p>

<p>显示所有分支
<code>
git show-branch
</code></p>

<p>查看当前分支
<code>
git status
</code></p>

<p>提交分支
<code>
git push origin branchname
</code></p>

<p>切换到名字为branchname的分支
<code>
git checkout branchname
</code></p>

<p>创建一个分支，然后把这个分支同步到远程仓库
<code>sh
git branch branchname
git checkout branchname
git push origin branchname
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git clone失败警告unprotected private key file]]></title>
    <link href="http://evoupsight.com/blog/2014/01/16/git-clone-fail-cause-unprotected-private-key-file/"/>
    <updated>2014-01-16T23:41:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/01/16/git-clone-fail-cause-unprotected-private-key-file</id>
    <content type="html"><![CDATA[<h3>起因</h3>

<p>今天在clone项目的时候发生了很奇怪的错误，而且居然是有的项目可以clone，有的不行，都是git协议。错误如下：</p>

<!-- more -->


<p>```sh
$ git clone git@github.com:someone/case.git
Cloning into &lsquo;case&rsquo;&hellip;
Warning: Permanently added the RSA host key for IP address &lsquo;192.30.252.129&rsquo; to t
he list of known hosts.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0644 for &lsquo;/c/Users/Administrator/.ssh/id_rsa&rsquo; are too open.
It is recommended that your private key files are NOT accessible by others.
This private key will be ignored.
bad permissions: ignore key: /c/Users/Administrator/.ssh/id_rsa
Permission denied (publickey).
fatal: Could not read from remote repository.</p>

<p>Please make sure you have the correct access rights
and the repository exists.
```</p>

<h3>排查</h3>

<p>显示是私钥权限不正确导致的，然后定位到git-bash所使用的sh.exe程序，用管理员模式运行
<code>sh
chmod 0600 /c/Users/Administrator/.ssh/id_rsa
</code>
尝试几次都没法收回group和other的r权限（r+w+rw=2<sup>2</sup>+2<sup>1</sup>+2<sup>0</sup>，我这里是4，2<sup>2</sup>所以是r）
最后发现是因为装git windows的时候选择了第一种方式和cygwin正好冲突了，如果装了cygwin的基础上再安装git windows要在git windows的安装选项里选第二种方式；还有一种可能是和tortoise git冲突了，尚未确认。
最后删除cygwin重装git-bash可以正常clone了。</p>

<h3>延伸</h3>

<p>git windows还有第三种安装方式，第三种比较危险，会覆盖windows指令，一般不采取，如果以后不打算用cygwin的话，直接第一种方式安装就可以了。</p>

<p>附：正常的权限掩码，来自一台freebsd
<code>sh
-rw-r--r--   authorized_keys
-rw-------   config
-rw-------   id_dsa
-rw-------   id_dsa.pub
-rw-------   id_rsa
-rw-r--r--   id_rsa.pub
-rw-------   known_hosts
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[centos下CVS服务器的配置]]></title>
    <link href="http://evoupsight.com/blog/2013/11/08/centos-install-cvs/"/>
    <updated>2013-11-08T13:20:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/11/08/centos-install-cvs</id>
    <content type="html"><![CDATA[<p>由于需要回顾以前在自己的cvs上建设的一些项目,把其中有用的项目直接放到github上方便调用，现在需要重拾cvs这个历史悠久的版本管理工具了。</p>

<!-- more -->


<p>在centos6上建设cvs服务器是比较方便的。大体分为几个步骤，xinetd->cvs->配置帐号->配置xinetd下pcvsserver文件->启动cvs服务端</p>

<h4>1.安装xinetd</h4>

<p><code>bash
rpm -q xinetd
</code>
没有安装的话
<code>bash
yum install xinetd
</code></p>

<h4>2.安装cvs</h4>

<p><code>bash
rpm -q cvs
</code>
我的系统显示
cvs-1.11.23-15.el6.x86_64
如果没有安装的话可以
<code>bash
yum install cvs
</code></p>

<h4>3.配置帐号</h4>

<p>切换到root，执行：
<code>bash
groupadd cvs
useradd -g cvs cvsroot
passwd cvsroot
</code>
这样帐号就配置好了。</p>

<h4>4.修改cvs的配置文件/etc/xinetd.d/pcvsserver</h4>

<p>```bash</p>

<h1>default: off</h1>

<h1>description: The CVS service can record the history of your source \</h1>

<h1>files. CVS stores all the versions of a file in a single \</h1>

<h1>file in a clever way that only stores the differences \</h1>

<h1>between versions.</h1>

<p>service cvspserver
{</p>

<pre><code>    disable                 = no
    port                    = 2401
    socket_type             = stream
    protocol                = tcp
    wait                    = no
    user                    = root
    passenv                 = PATH
    server                  = /usr/bin/cvs
    env                     = HOME=/home/cvsroot
    server_args             = -f --allow-root=/home/cvsroot pserver
</code></pre>

<h1>bind                    = 127.0.0.1</h1>

<p>}
```
其中env为cvs的环境变量地址，server_args指定你项目的源代码的保存路径和认证方式，这里pserver为基于密码的认证方式。</p>

<h4>5.初始化和启动</h4>

<p>初始化项目仓库的命令为
<code>bash
cvs -d /home/cvsroot init
</code>
就是在刚才配置的env = HOME=/home/cvsroot目录长噢乖创建代码仓库</p>

<p>接下来重启xinetd
<code>bash
/etc/rc.d/init.d/xinetd restart
</code>
测试cvs是否存在
lsof -p 2401
或者
netstat -l | grep csv
不能使用ps aux | grep cvs，因为这是在xinetd下！</p>

<p>安装就完成了。</p>

<p>接下来还要提一下客户端tortoise cvs使用的问题，需要把cvs.exe的路径加到环境变量PATH中方可使用或者把cvsnt这款软件的cvs.exe拷贝到tortoise cvs安装目录中，否则会报句柄错误。</p>

<h4>参考链接：</h4>

<p><a href="http://blog.csdn.net/lidongtang/article/details/8165574">http://blog.csdn.net/lidongtang/article/details/8165574</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[freebsd6.2i386安装subversion1.8.8]]></title>
    <link href="http://evoupsight.com/blog/2013/04/17/freebsd6-dot-2i386-install-subversion/"/>
    <updated>2013-04-17T14:45:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/04/17/freebsd6-dot-2i386-install-subversion</id>
    <content type="html"><![CDATA[<p>一台老的freebsd6.2机器，port中没有subversion（注：千万不要portsnap更新，一更新后就毁了<code>Could not find bsd.port.options.mk</code>没救了，因为最新portsnap不向下兼容支持老系统了！）</p>

<p>注意编译subversion的时候会出现
<code>configure: error: C++ preprocessor "/lib/cpp" fails sanity check</code></p>

<!-- more -->


<p>对g++做个软连接
<code>sh
$ sudo ln -s /usr/bin/g++ /usr/local/bin/g++44
</code></p>

<h3>安装依赖</h3>

<p><code>sh
$ cd ~/software/
$ axel http://apache.fayea.com/apache-mirror//apr/apr-1.5.0.tar.gz
$ tar xzf apr-1.5.0.tar.gz
$ cd apr-1.5.0
$ ./configure
$ make
$ sudo make install
$ fetch http://mirror.bit.edu.cn/apache//apr/apr-util-1.5.3.tar.gz
$ tar xjf apr-util-1.5.3.tar.gz
$ cd apr-util-1.5.3
$ make
$ sudo make install
</code></p>

<h3>安装subversion</h3>

<p><code>sh
$ cd ~/software
$ fetch http://mirrors.hust.edu.cn/apache/subversion/subversion-1.8.8.tar.gz
$ tar xzf subversion-1.8.8.tar.gz
$ cd subversion-1.8.8
$ fetch http://www.sqlite.org/sqlite-amalgamation-3071501.zip
$ unzip sqlite-amalgamation-3071501.zip
$ mv sqlite-amalgamation-3071501 sqlite-amalgamation
$ ./configure --with-apr=/usr/local/apr/ --with-apr-util=/usr/local/apr/
$ make
$ sudo make install
</code>
这样是可以用基本的svn签出提交了，但是后来又在签出代码时发现了svn e170000 unrecognized url scheme for http（https）的问题。
原来少安装一个模块serf（1.8版本之前用neon），安装次序分别为python2.7->scons2.3.1->serf1.3.4
<code>
$ cd ~/software
$ fetch https://www.python.org/ftp/python/2.7/Python-2.7.tgz
$ tar xzf Python-2.7
$ cd Python-2.7
$ ./configure
$ make
$ sudo make install
$ fetch http://cznic.dl.sourceforge.net/project/scons/scons/2.3.1/scons-2.3.1.tar.gz
$ tar xzf scons-2.3.1.tar.gz
$ cd scons-2.3.1
$ sudo python setup.py install --standard-lib
$ fetch http://serf.googlecode.com/svn/src_releases/serf-1.3.4.tar.bz2
$ tar xjf serf-1.3.4.tar.bz2
$ cd serf-1.3.4
$ scons APR=/usr/local/apr/ APU=/usr/local/apr/
$ sudo scons install
scons: Reading SConscript files ...
scons: done reading SConscript files.
scons: Building targets ...
Install file: "libserf-1.a" as "/usr/local/lib/libserf-1.a"
Install file: "libserf-1.so.1.3.0" as "/usr/local/lib/libserf-1.so.1.3.0"
Install file: "serf.h" as "/usr/local/include/serf-1/serf.h"
Install file: "serf_bucket_types.h" as "/usr/local/include/serf-1/serf_bucket_types.h"
Install file: "serf_bucket_util.h" as "/usr/local/include/serf-1/serf_bucket_util.h"
Install file: "serf-1.pc" as "/usr/local/lib/pkgconfig/serf-1.pc"
scons: done building targets.
</code></p>

<p>重新安装subversion，把openssl也带上
<code>sh
$ cd ../subversion-1.8.8
$ ./configure --with-apr=/usr/local/apr/ --with-apr-util=/usr/local/apr/ --with-openssl --with-serf=/usr/local/
</code>
如果遇到找不到libintl.h</p>

<p><code>
$ sudo ln -s /usr/local/include/libintl.h /usr/include/
</code>
然后编译
<code>sh
make
sudo make install
</code></p>

<p>收工</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[unix下找回svn密码的小方法]]></title>
    <link href="http://evoupsight.com/blog/2013/04/10/lost-svn-password/"/>
    <updated>2013-04-10T16:44:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/04/10/lost-svn-password</id>
    <content type="html"><![CDATA[<p>之前有个项目的svn通过svn manager设置了权限访问，采用了不同的密码，在windows端小海龟的密码是看不到的，但庆幸主要更新和提交svn的任务是在freebsd下进行的，经过一番折腾，找回了密码,方法见下：</p>

<!-- more -->


<p>其实很简单，进入用户的home目录下的.subversion下的auth子目录下，再进入svn.simple，之后你懂的
<img src="/images/evoup/svn_pass.png" alt="Alt text" /></p>

<p>居然全是明文哦，这就找回来了：）</p>
]]></content>
  </entry>
  
</feed>
