<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Evoup`s Blog]]></title>
  <link href="http://evoupsight.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://evoupsight.com/"/>
  <updated>2014-01-17T01:23:43+08:00</updated>
  <id>http://evoupsight.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用php的snmp模块进行监控数据的获取]]></title>
    <link href="http://evoupsight.com/blog/2013/12/10/php-use-snmp-module-to-monitor/"/>
    <updated>2013-12-10T10:19:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/12/10/php-use-snmp-module-to-monitor</id>
    <content type="html"><![CDATA[<p>简单地根据经验归纳，snmp被叫做简单网络管理协议(Simple Network Management Protocol)，是监控业界标准的设备间通讯接口会话层协议，位于OSI的第五层。各类开源软件广泛采用了此协议进行数据的获取，目前已经从明文传输的v1发展到了具有较高安全性的v3版本。与snmp相关的知识有很多，<code>MIB</code>（管理信息数据库），<code>OID</code>（对象标识符），就目前而言，只需要记得有这2个名字就可以了。
通过源码安装php的snmp模块和安装一般php的模块没有本质区别。一共也就2种方式，&mdash;enable或者&mdash;with静态方式和phpize动态方式。共同点是都需要ext目录下面有snmp这个模块。
下面先论述如以&mdash;enable或者&mdash;with的方式来把snmp静态编译到php中去。
首先下载php软件包。</p>

<!-- more -->


<p><code>sh
$ wget wget http://tw1.php.net/get/php-5.5.6.tar.bz2/from/this/mirror
$ tar xjf php-5.5.6.tar.bz2
$ cd php-5.5.6
$ ls ext/snmp/
config.m4  config.w32  CREDITS  php_snmp.h  snmp.c  snmp.dsp  tests
$
</code>
可见snmp已经自带了，不需要到pecl下载然后放到ext目录。
<code>sh
$ sudo yum install libxml2 libxml2-devel
</code>
备注如果一意孤行，只装libxml2，呵呵，那么你将收到<code>configure: error: xml2-config not found. Please check your libxml2 installation.</code>的报错。同样，你要是不装net-snmp-devel，就可以收到<code>configure: error: Could not find net-snmp-config binary. Please check your net-snmp installation</code>的报错。</p>

<h3>静态编译</h3>

<p>查一下snmp的安装选项
<code>sh
$ ./configure --help | grep snmp
  --with-snmp=DIR         Include SNMP support
</code>
是&mdash;with，了解后继续操作，这里直接使用默认snmp路径
<code>sh
$ ./configure --prefix=/usr/local/php55_static_snmp --with-snmp --ebable-sockets
$ make
$ sudo make install
</code>
这样静态编译就完成了。</p>

<h3>动态编译</h3>

<p>假设一开始把php安装在/usr/local/php55，现在要以编译出sockets.so和snmp.so
<code>sh
$ cd ext/snmp
$ /usr/local/php55/bin/phpize
$ ./configure --with-php-config=/usr/local/php55/bin/php-config
$ make
$ sudo make install
$ cd ../../ext/sockets
$ /usr/local/php55/bin/phpize
$ ./configure --with-php-config=/usr/local/php55/bin/php-config
$ make
$ sudo make install
</code>
然后复制刚才的编译好的so文件到扩展目录到etc目录
<code>sh
$ cp /usr/local/php55/lib/php/extensions/no-debug-non-zts-20121212/snmp.so /usr/local/php55/etc/
$ cp /usr/local/php55/lib/php/extensions/no-debug-non-zts-20121212/sockets.so /usr/local/php55/etc/
</code>
编辑php的配置文件
<code>sh
$ vi /usr/local/php55/etc/php.ini
</code>
加入2行
<code>sh
extension=sockets.so
extension=snmp.so
</code></p>

<h3>撰写php版的snmp客户端测试程序</h3>

<p>开始写点测试程序，确认snmp已经在本机支持
<code>sh
$nc -uvz 127.0.0.1 161
Connection to 127.0.0.1 161 port [udp/snmp] succeeded!
</code>
已经支持，那么来写程序吧
<code>php
&lt;?php
/**
 * test.php
 */
$host="127.0.0.1";
$community="public";
$oid=".1.3.6.1.4.1.2021.10.1.3.1";
$oid1=".1.3.6.1.4.1.2021.10.1.3.2";
$oid2=".1.3.6.1.4.1.2021.10.1.3.3";
$oid3=".1.3.6.1.4.1.2021.4.3.0";
// 1 minute Load
echo (snmpget($host,$community,$oid)."\n");
// 5 minute Load
echo (snmpget($host,$community,$oid1)."\n");
// 15 minute Load
echo (snmpget($host,$community,$oid2)."\n");
// Total Swap Size
echo (snmpget($host,$community,$oid3)."\n");
</code>
查看结果
```sh
$ /usr/local/php55/bin/php test.php
STRING: 0.05
STRING: 0.03
STRING: 0.03
INTEGER: 2064376 kB</p>

<p>```</p>

<h3>分析总结</h3>

<p>可以看出php的snmp接口还是非常简明优雅的，由此推断你只要学会rrdtool、php和snmp，自行打造一款类cacti的监控软件不会有太大的困难。但是这么做其实还有一点要注意，得装snmpd，我自己写公司监控平台2.0的时候，上级要求使用C api直接获取数据，不走snmp，其实通过对分析ganglia源代码的粗读，也能马上发现其也是采用了原生api调用获取主要监控数据的方式，所以号称比snmpd快和非常节省系统开销。但为了完成任务和系统的拓展性，果然另外支持snmp吧。</p>

<h3>扩展阅读</h3>

<p>请需要OID对照资料的兄弟自行互联网查询《linux常用OID》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[完美解决phpmyadmin4.1.0访问缓慢]]></title>
    <link href="http://evoupsight.com/blog/2013/11/29/phpmyadmin4-dot-1-0-access-slow/"/>
    <updated>2013-11-29T10:52:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/11/29/phpmyadmin4-dot-1-0-access-slow</id>
    <content type="html"><![CDATA[<p>安装最新版phpmyadmin4.1.0出现了访问非常缓慢的问题，记录一下</p>

<!-- more -->


<h3>第一步</h3>

<p>文件名./libraries/Util.class.php文件
查找
<code>php
return strftime($date, $timestamp);
</code>
替换为
<code>php
if(extension_loaded('gettext'))
  return strftime($date, $timestamp);
</code></p>

<h3>第二步</h3>

<p>文件名./version_check.php文件
注释掉以下代码
```php
$version = PMA_Util::getLatestVersion();</p>

<p>echo json_encode(</p>

<pre><code>array(
    'version' =&gt; $version-&gt;version,
    'date' =&gt; $version-&gt;date,
    )
);
</code></pre>

<p>```</p>

<h3>第三步</h3>

<p>直接浏览器访问/setup路径，进行设置</p>

<h3>第四步</h3>

<p>应该可以登录了，如果不行清除cookie应该也可以访问了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[freebsd下PHP的Tokyo Tyrant安装配置测试]]></title>
    <link href="http://evoupsight.com/blog/2013/09/26/freebsd-tokyo-tyrant-php-test/"/>
    <updated>2013-09-26T16:24:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/09/26/freebsd-tokyo-tyrant-php-test</id>
    <content type="html"><![CDATA[<h3>简介和横向对比</h3>

<p>Tokyo Tyrant（ttserver）是一款分布式nosql数据库，内部主要是用Tokyo Cabinet数据库实现。与memcache相比，其具有持久化存储的特性；与redis相比，这个数据库在记录数上亿时性能会急剧下降，没有redis业界口碑好，当然也可能是因为这是比较早起的nosql产品了，以及没有进行正确的配置导致的。除此之外ttserver还支持memcache兼容协议，仅仅需要注意INCR的操作中，memcache是不返回值，ttserver是返回自增ID的。</p>

<!-- more -->


<h3>php扩展的安装</h3>

<p>编译的方式还是分静态方式和动态方式，特点是静态编译之后运行效率较高，但是需要重新编译php源码，动态编译只需要编译出动态链接库，然后在php.ini上加载so=XXXX.so即可。需要知晓php的版本在5.2以上（实际测试发现php的版本也不能太高，php5.2.10测试通过）,此外编译前必须先安装tt，否则会收到` configure: error: Please reinstall the Tokyo Tyrant distribution
的报错。</p>

<h4>安装编译依赖</h4>

<p><code>sh
$ cd /usr/ports/databases/tokyotyrant
$ sudo make install clean
</code></p>

<h4>静态方式</h4>

<p><code>sh
$ cd /home/software
$ fetch http://museum.php.net/php5/php-5.2.10.tar.bz2
$ tar xjf php-5.2.10.tar.bz2
$ cd php-5.2.10/ext
$ fetch http://pecl.php.net/get/tokyo_tyrant-0.7.0.tgz
$ tar xzf tokyo_tyrant-0.7.0.tgz
$ mv tokyo_tyrant-0.7.0 tokyo_tyrant
$ cd ..
$ ./buildconf --force
$ ./configure --prefix=/usr/local/php_tt --with-tokyo-tyrant
$ make
$ sudo make install
</code>
查看模块是否成功安装
<code>sh
$ /usr/local/php_tt/bin/php -m | grep tokyo
tokyo_tyrant
</code></p>

<h4>动态方式(假设php已经安装在/usr/local/php_tt)</h4>

<p><code>sh
$ cd /home/software
$ fetch http://pecl.php.net/get/tokyo_tyrant-0.7.0.tgz
$ tar xzf tokyo_tyrant-0.7.0.tgz
$ cd tokyo_tyrant-0.7.0
$ /usr/local/php_tt/bin/phpize
$ ./configure --with-php-config=/usr/local/php_tt/bin/php-config
$ make
$ sudo make install
</code>
然后复制刚才的编译好的so文件到扩展目录到etc目录
<code>sh
$ cp /usr/local/php_tt/lib/php/extensions/no-debug-non-zts-20090626/tokyo_tyrant.so /usr/local/php_tt/etc/
</code></p>

<p>编辑php的配置文件
<code>sh
vi /usr/local/php_tt/etc/php.ini
</code>
加入1行
<code>sh
extension=tokyo_tyrant.so
</code></p>

<h4>测试1</h4>

<p>编辑php文件
```php
&lt;?php
/<em>*
 * test.php
 </em>/
$tt = new TokyoTyrant(&ldquo;localhost&rdquo;);
$tt->put(&ldquo;language&rdquo;, &ldquo;C/C++&rdquo;);
echo &lsquo;language:&rsquo; . $tt->get(&ldquo;language&rdquo;) . &ldquo;\n&rdquo;;</p>

<p>echo &lsquo;The count of records is:&rsquo; . $tt &ndash;> num() . &ldquo;\n&rdquo;;</p>

<p>print_r($tt &ndash;> stat());</p>

<p>$it = $tt &ndash;> getIterator();
foreach ($it as $key => $val) {</p>

<pre><code>echo "key: $key, val: $val\n";
</code></pre>

<p>}
?>
<code>
运行
</code>sh
/usr/local/php_tt/bin/php test.php
language:C/C++
The count of records is:1
Array                                                                                                                                                [0/1804]
(</p>

<pre><code>[version] =&gt; 1.1.41
[libver] =&gt; 324
[protver] =&gt; 0.91
[os] =&gt; FreeBSD
[time] =&gt; 1388045682.650761
[pid] =&gt; 69442
[sid] =&gt; 0
[type] =&gt; on-memory
[path] =&gt; *
[rnum] =&gt; 1
[size] =&gt; 525437
[bigend] =&gt; 0
[fd] =&gt; 5
[loadavg] =&gt; 0.958008
[memrss] =&gt; 92448
[ru_user] =&gt; 0.109603
[ru_sys] =&gt; 0.137003
[ru_real] =&gt; 352.795682
[cnt_put] =&gt; 2
[cnt_putkeep] =&gt; 0
[cnt_putcat] =&gt; 0
[cnt_putshl] =&gt; 0
[cnt_putnr] =&gt; 0
[cnt_out] =&gt; 0
[cnt_get] =&gt; 3
[cnt_mget] =&gt; 0
[cnt_vsiz] =&gt; 0
[cnt_iterinit] =&gt; 2
[cnt_iternext] =&gt; 2
[cnt_fwmkeys] =&gt; 0
[cnt_addint] =&gt; 0
[cnt_adddouble] =&gt; 0
[cnt_ext] =&gt; 0
[cnt_sync] =&gt; 0
[cnt_optimize] =&gt; 0
[cnt_vanish] =&gt; 0
[cnt_copy] =&gt; 0
[cnt_restore] =&gt; 0
[cnt_setmst] =&gt; 0
[cnt_rnum] =&gt; 2
[cnt_size] =&gt; 0
[cnt_stat] =&gt; 2
[cnt_misc] =&gt; 0
[cnt_repl] =&gt; 0
[cnt_put_miss] =&gt; 0
[cnt_out_miss] =&gt; 0
[cnt_get_miss] =&gt; 0
</code></pre>

<p>)
key: language, val: C/C++
```
可以看到这个扩展的遍历功能相当好用:)</p>

<h4>参考</h4>

<p>linux下的请自行参考《Debian下PHP的Tokyo Tyrant安装配置及测试》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【How to】使用basho的erlang-protobuffs和PHP通讯]]></title>
    <link href="http://evoupsight.com/blog/2013/05/27/erlang-protobuffs-with-php/"/>
    <updated>2013-05-27T13:49:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/05/27/erlang-protobuffs-with-php</id>
    <content type="html"><![CDATA[<p>这几天通过查阅相关资料，终于实现了php和erlang的相互通讯。详细的protocolbuf的入门，可以参见本问最后的参考链接。有文章说google官网实现的protobuf的erlang接口不是很好用，推荐使用basho的erlang-protobuffs修改版本。于是摸索了一番，终于勉强可以使用了，现先介绍如何使用该工具生成消息的erlang源文件。米聊用的分布式数据库riak就是basho公司开发的，其中采用了修改版erlang-protobuffs。</p>

<!-- more -->


<p>可以在这里下载，git://github.com/basho/erlang_protobuffs.git</p>

<p>先安装，我基本没有很好的安装，直接放到临时路径，要生成源代码的时候，进入该目录，生成，然后复制生成好的源代码文件到自己的项目目录里。</p>

<p><code>bash
cd erlang_protobuffs
make all
</code></p>

<p>这样就可以使用了，接下来给出一个测试的protobuf文件</p>

<p>{% codeblock lang:protobuf test.proto %}
message test {
   required string test1 = 1;
}
{% endcodeblock %}</p>

<p>进入ebin目录准备生成
<code>bash
cd ebin  
</code></p>

<p>```erlang
erl
1> protobuffs_compile:generate_source(&ldquo;test.proto&rdquo;).</p>

<p>=INFO REPORT==== 27-May-2013::15:31:13 ===</p>

<p>Writing header file to &ldquo;test_pb.hrl&rdquo;</p>

<p>=INFO REPORT==== 27-May-2013::15:31:13 ===</p>

<p>Writing src file to &ldquo;test_pb.erl&rdquo;</p>

<p>ok
```
这样生成就完毕了，一共生成2个文件test_pb.hrl和test_pb.erl。</p>

<p>然后写一个server端测试，照搬erlang程序设计中的最入门的单线程例子改了改，一处理完就断的那种,在代码里引入该文件。</p>

<p>{% codeblock lang:erlang server.erl start:51 mark:51,54-55 %}
-module(server).</p>

<p>-compile(export_all).</p>

<p>-import(lists, [reverse/1]).</p>

<p>-include(&ldquo;test_pb.hrl&rdquo;).</p>

<p>start_nano_server() &ndash;></p>

<p>   {ok, Listen} = gen_tcp:listen(2345, [binary, {packet, 4},</p>

<pre><code>                {reuseaddr, true},

                {active, true}]),
</code></pre>

<p>   {ok, Socket} = gen_tcp:accept(Listen),</p>

<p>   gen_tcp:close(Listen),</p>

<p>   loop(Socket).</p>

<p>loop(Socket) &ndash;></p>

<p>   receive</p>

<p>   {tcp, Socket, Bin} &ndash;></p>

<pre><code>   io:format("Server received binary = ~p~n",[Bin]),

   Msg=test_pb:decode_test(Bin),

   io:format("Server (unpacked)  ~p~n",[Msg]),

   loop(Socket);
</code></pre>

<p>   {tcp_closed, Socket} &ndash;></p>

<pre><code>   io:format("Server socket closed~n")
</code></pre>

<p>   end.
{% endcodeblock %}</p>

<p>client的代码</p>

<p>{% codeblock lang:erlang client.erl %}
-module(client).</p>

<p>-compile(export_all).</p>

<p>-import(lists, [reverse/1]).</p>

<p>-include(&ldquo;test_pb.hrl&rdquo;).</p>

<p>nano_client_eval() &ndash;></p>

<p>   {ok, Socket} =</p>

<p>   gen_tcp:connect(&ldquo;localhost&rdquo;, 2345,</p>

<pre><code>   [binary, {packet, 4}]),
</code></pre>

<p>   Test=#test{test1=&ldquo;test1&rdquo;},</p>

<p>   Str=test_pb:encode_test(Test),</p>

<p>   ok = gen_tcp:send(Socket, Str),</p>

<p>   gen_tcp:close(Socket).
{% endcodeblock %}</p>

<p>需要说明的是packet,4这个参数，代表每个数据包的前4个字节为消息头，该头标识了消息体的长度。这样互通是没有问题的，erlang自动为数据包的加上前4个字节的消息头。</p>

<p>接下来难点是php作为客户端，要手工打包消息然后发送。
首先是下载php版本的<a href="https://code.google.com/p/pb4php/">https://code.google.com/p/pb4php/</a>
然后，解压得到protocolbuf，接着创建你的项目，把protocolbuf放到该项目文件夹的根目录下。一样要生成源代码。注意，pb4php不是很智能，如果直接.proto文件中=1没有空格，而不是写成xx = 1是会报错的！</p>

<p>{% codeblock lang:php test.php %}  <br/>
&lt;?php</p>

<p>require_once(&ldquo;./protocolbuf/parser/pb_parser.php&rdquo;);</p>

<p>$parser = new PBParser();</p>

<p>$parser->parse(&ldquo;./test.proto&rdquo;);</p>

<p>echo &ldquo;done\n&rdquo;;</p>

<p>?>
{% endcodeblock %}</p>

<p>运行test.php后生成pb_proto_test.php</p>

<p>php版本的client的代码</p>

<p>{% codeblock lang:php client.php %}
&lt;?php</p>

<p>require_once(&ldquo;./protocolbuf/message/pb_message.php&rdquo;);</p>

<p>require_once(&ldquo;./pb_proto_test.php&rdquo;);</p>

<p>$test = new test();</p>

<p>$test->set_test1(&ldquo;test php&rdquo;);</p>

<p>$string = $test->SerializeToString();</p>

<p>$sock=@socket_create(AF_INET, SOCK_STREAM, getprotobyname(&lsquo;tcp&rsquo;));</p>

<p>if ($sock)
{</p>

<p>   socket_connect($sock, &ldquo;127.0.0.1&rdquo;, 2345);</p>

<p>   $msg = pack_data($string);</p>

<p>   file_put_contents(dirname(<strong>FILE</strong>).&lsquo;/resmessage&rsquo;,$msg);</p>

<p>   $sent = @socket_write($sock, $msg, strlen($msg));
}</p>

<p>function pack_data ($data) {</p>

<p>   $head =pack(&ldquo;H*&rdquo;, to_hex_str (strlen($data)));</p>

<p>   $body=pack(&ldquo;A*&rdquo;,$data);</p>

<p>   return $head.$body;</p>

<p>}</p>

<p>function to_hex_str ($num)
{</p>

<p>   $str = dechex($num);</p>

<p>   $str = str_pad($str,8,&ldquo;0&rdquo;,STR_PAD_LEFT);</p>

<p>   return $str;</p>

<p>}
?>
{% endcodeblock %}</p>

<p>运行上面的php客户端可以和erlang版本的server.erl服务端实现二进制CS互通。期间由于不理解erlang的packet含义，用抓包查了一下才搞定的。不明白原理的，可以尝试抓一下包，然后测试。同时获取了消息体的长度后，可用php的函数dechex()函数获取十六进制代码，然后有这样一个规律。如果erlang服务端packet参数后为2，则str_pad($str,4,&ldquo;0&rdquo;,STR_PAD_LEFT)然后打包消息头，如果服务端packet参数后跟4，则str_pad($str,8,&ldquo;0&rdquo;,STR_PAD_LEFT)然后打包消息头。</p>

<p>最后，还有一个要注意，erlang版本的protocolbuf不知道为什么，int32和int64最多不能超过10位，在项目里我一概成了string类型。其他，optinal类型对于不一定出现的数据也是很好用的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[freebsd下安装nginx+php4.4.9的方法]]></title>
    <link href="http://evoupsight.com/blog/2011/01/18/nginx-php4/"/>
    <updated>2011-01-18T15:10:00+08:00</updated>
    <id>http://evoupsight.com/blog/2011/01/18/nginx-php4</id>
    <content type="html"><![CDATA[<p>首先是php4.4
<a href="http://cn.php.net/distributions/php-4.4.9.tar.bz2">http://cn.php.net/distributions/php-4.4.9.tar.bz2</a></p>

<!-- more -->


<p>（ps:更老的版本可以到museum.php.net去找。）</p>

<p>装之前别忘为&mdash;enable的几个找下pecl
编译php4（先不打补丁）的时候先使用这样的参数
```makefile
./configure &mdash;prefix=/usr/local/php4_admin &mdash;enable-versioning &mdash;enable-memory-limit &mdash;with-layout=GNU &mdash;with-config-file-scan-dir=/usr/local/php4_admin/etc/php &mdash;with-mysql=/usr/local -enable-mbstring &mdash;enable-ctype &mdash;with-gd=/usr/local &mdash;with-freetype-dir=/usr/local &mdash;enable-ftp &mdash;with-mcrypt=/usr/local &mdash;enable-memcache &mdash;enable-apc &mdash;enable-xml &mdash;with-pcre-regex &mdash;enable-bcompiler &mdash;with-bz2 &mdash;with-zlib &mdash;enable-fastcgi &mdash;enable-fpm</p>

<p>make
make install
```</p>

<p>然后打补丁
同时候准备好补丁文件，<a href="http://php-fpm.org/downloads/php-4.4.9-fpm-0.5.10.diff.gz">http://php-fpm.org/downloads/php-4.4.9-fpm-0.5.10.diff.gz</a>
<code>sh
gzip -cd php-4.4.9-fpm-0.5.10.diff.gz  | patch -d php-4.4.9 -p1
</code>
再次
```makefile
./configure &mdash;prefix=/usr/local/php4_admin &mdash;enable-versioning &mdash;enable-memory-limit &mdash;with-layout=GNU &mdash;with-config-file-scan-dir=/usr/local/php4_admin/etc/php &mdash;enable-force-cgi-redirect &mdash;with-mysql=/usr/local -enable-mbstring &mdash;enable-ctype &mdash;with-gd=/usr/local &mdash;with-freetype-dir=/usr/local &mdash;enable-ftp &mdash;with-mcrypt=/usr/local &mdash;enable-memcache &mdash;enable-apc &mdash;enable-xml &mdash;with-pcre-regex &mdash;enable-bcompiler &mdash;with-bz2 &mdash;with-zlib &mdash;enable-fastcgi &mdash;enable-fpm</p>

<p>make
make install
```</p>

<p>这个php-fpm.conf要改的
<code>sh
 62             Unix user of processes
 63         &lt;!--    &lt;value name="user"&gt;nobody&lt;/value&gt;       --&gt;
 64
 65             Unix group of processes
 66         &lt;!--    &lt;value name="group"&gt;nobody&lt;/value&gt;      --&gt;
</code></p>

<p>换成
<code>sh
 62             Unix user of processes
 63             &lt;value name="user"&gt;www&lt;/value&gt;
 64
 65             Unix group of processes
 66             &lt;value name="group"&gt;www&lt;/value&gt;
</code></p>

<p>然后到目录sbin下试一试
<code>sh
sudo /usr/local/php4_admin/sbin/php-fpm start
</code>
看到就可以了，收工。</p>
]]></content>
  </entry>
  
</feed>
