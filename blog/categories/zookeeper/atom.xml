<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: zookeeper | Evoup`s Blog]]></title>
  <link href="http://evoupsight.com/blog/categories/zookeeper/atom.xml" rel="self"/>
  <link href="http://evoupsight.com/"/>
  <updated>2014-07-10T17:45:37+08:00</updated>
  <id>http://evoupsight.com/</id>
  <author>
    <name><![CDATA[Evoup`s Blog]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hadoop2.0cdh4.6.0完全分布式安装]]></title>
    <link href="http://evoupsight.com/blog/2014/07/10/hadoop2-dot-0cdh4-dot-6-0-fullly-distrbute/"/>
    <updated>2014-07-10T15:57:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/07/10/hadoop2-dot-0cdh4-dot-6-0-fullly-distrbute</id>
    <content type="html"><![CDATA[<p>hadoop2.0 cdh4安装（完全分布式）</p>

<!-- more -->


<p>vmware版本8.0.4 build-744019</p>

<p>首先规划3台虚拟机
<code>
 ,'''''''''''''''''''''':'''''''''''''''''':''''''''''''''''''''''''''''''''''''''''''''|
 |        usage         |        IP        |                  Hostname                  |
 |                      |                  |                                            |
 |''''''''''''''''''''''|''''''''''''''''''|''''''''''''''''''''''''''''''''''''''''''''|
 | namenode1,datanode1  | 192.168.216.183  |    mdn3namenode1.net,mdn3datanode1.net     |
 |                      |                  |                                            |
 |''''''''''''''''''''''|''''''''''''''''''|''''''''''''''''''''''''''''''''''''''''''''|
 | namenode2,datanode2  | 192.168.216.184  |    mdn3namenode2.net,mdn3datanode2.net     |
 |                      |                  |                                            |
 |''''''''''''''''''''''|''''''''''''''''''|''''''''''''''''''''''''''''''''''''''''''''|
 | datanode2,nfs server | 192.168.216.185  |    mdn3datanode3.net,mdn3nfsserver.net     |
 |                      |                  |                                            |
  '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
</code></p>

<h3>准备工作</h3>

<p>先安装JDK1.6 linux:先把已经安装的openjdk卸载,安装sun jdk1.6,去oracle下载 （j2se就够了）
<code>bash
$ rpm -qa | grep jdk
java-1.6.0-openjdk-1.6.0.0-1.28.1.10.9.el5_8
$ sudo rpm -e java-1.6.0-openjdk-1.6.0.0-1.28.1.10.9.el5_8
$ sudo chmod +x jdk-6u45-linux-x64-rpm.bin
$ sudo ./jdk-6u45-linux-x64-rpm.bin
</code></p>

<p>hadoop所有操作都是用hadoop帐号，下面添加
```bash
$ groupadd hadoop
$ useradd -r -g hadoop -d /home/hadoop -m -s /bin/bash hadoop</p>

<p>$ mkdir -p /u01/app
$ chgrp -R hadoop /u01/app
$ chown -R hadoop /u01/app
```</p>

<p>环境变量(在centos里不管编辑~/.profile还是~/.bash_profile都不能加载环境变量，正确的应该是在~/.bashrc中，而如果是root用户，应该可以直接在/etc/profile中编辑)
<code>bash
$ vi ~/.bashrc
export HADOOP_HOME="/usr/local/hadoop"
export JAVA_HOME="/usr/java/jdk1.6.0_45"
export PATH=$PATH:$JAVA_HOME/bin
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
</code></p>

<p>切换到hadoop帐号，进行免密码的ssh登录设置
<code>bash
$ su hadoop
$ ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa
$ cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys
$ chmod 600 ~/.ssh/authorized_keys
</code></p>

<p>给出我的hadoop/hbase版本
```
Name        : hadoop-hdfs-namenode
Arch        : x86_64
Version     : 2.0.0+1554
Release     : 1.cdh4.6.0.p0.16.el6</p>

<p>Name        : hbase-master
Arch        : x86_64
Version     : 0.94.15+86
Release     : 1.cdh4.6.0.p0.14.el6
```</p>

<p>然后是cdh的软件下载url
<a href="http://archive.cloudera.com/cdh4">http://archive.cloudera.com/cdh4</a>
这个路径下有很多的软件。</p>

<p>下载cdh4.6的几个包安装
<code>bash
$ cd /home/software/
$ wget http://archive.cloudera.com/cdh4/cdh/4/hadoop-2.0.0-cdh4.6.0.tar.gz
$ sudo mkdir /usr/local/hadoop/
$ tar xzf hadoop-2.0.0-cdh4.6.0.tar.gz
$ sudo mv hadoop-2.0.0-cdh4.6.0 /usr/local/
$ sudo mv /usr/local/hadoop-2.0.0-cdh4.6.0 /usr/local/hadoop
$ sudo chown -R hadoop:hadoop /usr/local/hadoop
</code>
创建存储临时文件temp、data和name节点数据的目录
<code>sh
$ sudo mkdir /usr/local/hadoop/temp/ /usr/local/hadoop/data/ /usr/local/hadoop/name/
</code></p>

<p>好了，准备工作终了</p>

<p>开始配置
配置/usr/local/hadoop/etc/hadoop/core-site.xml
```xml
<configuration></p>

<pre><code>    &lt;property&gt;
            &lt;name&gt;fs.defaultFS&lt;/name&gt;
            &lt;value&gt;hdfs://mdn3namenode1.net:9000&lt;/value&gt; &lt;!-- master域名或者master的ip --&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;io.file.buffer.size&lt;/name&gt;
            &lt;value&gt;131072&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;
            &lt;value&gt;file:/usr/local/hadoop/temp&lt;/value&gt;
            &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;hadoop.proxyuser.hduser.hosts&lt;/name&gt;
            &lt;value&gt;*&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;hadoop.proxyuser.hduser.groups&lt;/name&gt;
            &lt;value&gt;*&lt;/value&gt;
    &lt;/property&gt;
</code></pre>

<p></configuration>
```</p>

<p>配置/usr/local/hadoop/etc/hadoop/hdfs-site.xml
```xml
<configuration></p>

<pre><code>    &lt;property&gt;
            &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;
            &lt;value&gt;mdn3namenode1.net:9001&lt;/value&gt; &lt;!-- master域名或者master的ip --&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;
    &lt;value&gt;file:/usr/local/hadoop/dfs/name&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;
            &lt;value&gt;file:/usr/local/hadoop/dfs/data&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;dfs.replication&lt;/name&gt;
            &lt;value&gt;3&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;
            &lt;value&gt;true&lt;/value&gt;
    &lt;/property&gt;
</code></pre>

<p></configuration>
```</p>

<p>配置/usr/local/hadoop/etc/hadoop/madpred-site.xml
<code>sh
cp mapred-site.xml.template mapred-site.xml
</code>
```xml
<configuration></p>

<pre><code>    &lt;property&gt;
            &lt;name&gt;mapreduce.framework.name&lt;/name&gt;
            &lt;value&gt;yarn&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;
            &lt;value&gt;mdn3namenode1.net:10020&lt;/value&gt; &lt;!-- master域名或者master的ip --&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;
            &lt;value&gt;mdn3namenode1.net:19888&lt;/value&gt; &lt;!-- master域名或者master的ip --&gt;
    &lt;/property&gt;
</code></pre>

<p></configuration></p>

<p>```</p>

<p>配置/usr/local/hadoop/etc/hadoop/yarn-site.xml
```xml
<configuration></p>

<pre><code>    &lt;property&gt;
            &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;
            &lt;value&gt;mapreduce.shuffle&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class&lt;/name&gt;
            &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt;
            &lt;value&gt;mdn3namenode1.net:8032&lt;/value&gt; &lt;!-- master域名或者master的ip --&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt;
            &lt;value&gt;mdn3namenode1.net:8030&lt;/value&gt; &lt;!-- master域名或者master的ip --&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt;
            &lt;value&gt;mdn3namenode1.net:8031&lt;/value&gt; &lt;!-- master域名或者master的ip --&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;yarn.resourcemanager.admin.address&lt;/name&gt;
            &lt;value&gt;mdn3namenode1.net:8033&lt;/value&gt; &lt;!-- master域名或者master的ip --&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;
            &lt;value&gt;mdn3namenode1.net:8088&lt;/value&gt; &lt;!-- master域名或者master的ip --&gt;
    &lt;/property&gt;
</code></pre>

<p></configuration>
```</p>

<p>编辑slave的名字
直接讲slave的域名或者slave的ip按照一行一个的规则写进去
<code>
mdn3datanode2.net
mdn3datanode3.net
</code></p>

<p>复制到各台机器上
<code>sh
$ cd /usr/local/
$ sudo scp -dr hadoop@192.168.216.183:/usr/local/hadoop .
$ sudo chown -R hadoop:hadoop hadoop/
</code></p>

<p>格式化hdfs
在namenode上执行
<code>sh
/usr/local/hadoop/bin/hadoop namenode -format
</code></p>

<h3>hbase的安装配置</h3>

<p>hbase依赖zookeeper，需要先去下载
<code>sh
$ cd /home/software/
$ wget http://archive.cloudera.com/cdh4/cdh/4/zookeeper-3.4.5-cdh4.6.0.tar.gz
$ tar xzf zookeeper-3.4.5-cdh4.6.0.tar.gz
$ sudo mv zookeeper-3.4.5-cdh4.6.0 /usr/local/
$ sudo mv /usr/local/zookeeper-3.4.5-cdh4.6.0 /usr/local/zookeeper
$ sudo chown -R hadoop:hadoop /usr/local/zookeeper
$ sudo cp /usr/local/zookeeper/conf/zoo_sample.cfg /usr/local/zookeeper/conf/zoo.cfg
</code>
zookeeper准备完毕，可以继续安装hbase</p>

<p><code>sh
$ cd /home/software/
$ wget http://archive.cloudera.com/cdh4/cdh/4/hbase-0.94.15-cdh4.6.0.tar.gz
$ sudo mkdir /usr/local/hbase/
$ tar xzf hbase-0.94.15-cdh4.6.0.tar.gz
$ sudo mv hbase-0.94.15-cdh4.6.0 /usr/local/
$ sudo mv /usr/local/hbase-0.94.15-cdh4.6.0 /usr/local/hbase
$ sudo chown -R hadoop:hadoop /usr/local/hbase
</code></p>

<p>若干配置步骤
配置hbase-site.xml
```xml
<configuration></p>

<pre><code>&lt;property&gt;
    &lt;name&gt;hbase.rootdir&lt;/name&gt;
    &lt;value&gt;hdfs://mdn3namenode1.net:9000/hbase&lt;/value&gt;

&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;
    &lt;value&gt;true&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;hbase.master&lt;/name&gt;
    &lt;value&gt;mdn3datanode1.net:60000&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;
    &lt;value&gt;mdn3datanode1.net&lt;/value&gt;    &lt;!-- 这里配置若干个zookeeper的服务器地址，需要是奇数个 --&gt;
&lt;/property&gt;
</code></pre>

<p></configuration>
<code>
配置hbase-env.sh
</code>xml
export HBASE_MANAGES_ZK=false
```
不要hbase托管zookeeper</p>

<p>配置regionservers
<code>
mdn3datanode2.net
mdn3datanode3.net
</code></p>

<p>启动hbase
<code>sh
/usr/local/hbase/bin/start-hbase.sh
/usr/local/hbase/bin/hbase-daemons.sh start thrift
</code>
hbase启动完成.</p>

<h3>配置hbase可能碰到几个问题的说明：</h3>

<p>1) 报错
<code>ERROR client.HConnectionManager$HConnectionImplementation: Check the value configured in 'zookeeper.znode.parent'</code></p>

<p>是需要把/etc/hosts中的127.0.0.1注释掉，否则zookeeper还会出现</p>

<p>2) 在运行/usr/local/hbase/bin/hbase shell的时候出现了
<code>WARN conf.Configuration: hadoop.native.lib is deprecated. Instead, use io.native.lib.available</code></p>

<p>3) <code>java.net.ConnectException: Connection refused</code>
这是要求hadoop中的slaves配置和hbase的regionservers要一致。</p>

<h3>hive的安装</h3>

<p><code>sh
cd /home/software
wget http://archive.cloudera.com/cdh4/cdh/4/hive-0.10.0-cdh4.6.0.tar.gz
tar xzf hive-0.10.0-cdh4.6.0.tar.gz
sudo mv hive-0.10.0-cdh4.6.0 /usr/local/
sudo mv /usr/local/hive-0.10.0-cdh4.6.0 /usr/local/hive
chown -R hadoop:hadoop /usr/local/hive
</code></p>

<h3>hive的配置</h3>

<p>在~/.bashrc中加入
<code>bash
export HIVE_HOME=/usr/local/hive
export HIVE_CONF_DIR=$HIVE_HOME/conf
export HIVE_LIB=$HIVE_HOME/lib
export PATH=$PATH:$JAVA_HOME/bin:$ZOOKEEPER_HOME:$HIVE_HOME
</code></p>

<p>在conf/hive-site.xml中
```
 version=&ldquo;1.0&rdquo;?>
&lt;?xml-stylesheet type=&ldquo;text/xsl&rdquo; href=&ldquo;configuration.xsl&rdquo;?></p>

<p><configuration>
<property>
  <name>hive.metastore.local</name>
  <value>true</value>
</property></p>

<p><property>
  <name>javax.jdo.option.ConnectionURL</name>
  <value>jdbc:mysql://localhost:3306/hive</value>
</property></p>

<p><property>
  <name>javax.jdo.option.ConnectionDriverName</name>
  <value>com.mysql.jdbc.Driver</value>
</property></p>

<p><property>
  <name>javax.jdo.option.ConnectionUserName</name>
  <value>hive</value>
</property></p>

<p><property>
  <name>javax.jdo.option.ConnectionPassword</name>
  <value>hive</value>
</property>
<property>
  <name>datanucleus.fixedDatastore</name>
  <value>false</value>
</property></p>

<p></configuration></p>

<p>```</p>

<p>然后/bin/hive后，成功进入shell
```</p>

<blockquote><p>create table test (key string);
<code>``
如果遇到下面的报错
</code> FAILED: Error in metadata: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.metastore.HiveMetaStoreClient `</p></blockquote>

<p><code>FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.DDLTask</code>
建表错误
开始以为hive没有访问mysql的权限,以root用户登录mysql然后赋予hive用户权限：
<code>
grant all privileges on *.* to hive@localhost identified by 'hive';
grant all privileges on *.* to hive@192.168.216.183 identified by 'hive';
</code>
发现问题依旧</p>

<p>其实是要在hive-site.xml中把
<code>
&lt;property&gt;
  &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;
  &lt;value&gt;jdbc:mysql://localhost:3306/hive&lt;/value&gt;
&lt;/property&gt;
</code>
改成
<code>
&lt;property&gt;
  &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;
  &lt;value&gt;jdbc:mysql://192.168.216.183:3306/hive&lt;/value&gt;
&lt;/property&gt;
</code></p>

<p>问题依旧，打开hive的调试模式
<code>
bin/hive -hiveconf hive.root.logger=DEBUG,console
</code>
<code>14/05/08 17:35:53 WARN conf.HiveConf: DEPRECATED: Configuration property hive.metastore.local no longer has any effect.</code>
<code>Make sure to provide a valid value for hive.metastore.uris if you are connecting to a remote metastore</code></p>

<p>在配置文件里删除hive.metastore.local属性。</p>

<p>最后查得原因是没有安装mysql驱动，只要把mysql-connector-java-5.1.22-bin.jar放到lib下就可以了</p>

<p>然后
```
hive> create table test (key string);
OK
Time taken: 42.259 seconds</p>

<p>hive> show tables;
OK
test
Time taken: 0.279 seconds
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hbase连zookeeper瞬断]]></title>
    <link href="http://evoupsight.com/blog/2013/12/31/hbase-access-zookeeper-fail-too-many-connections-form-ip/"/>
    <updated>2013-12-31T11:48:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/12/31/hbase-access-zookeeper-fail-too-many-connections-form-ip</id>
    <content type="html"><![CDATA[<h3>问题</h3>

<p>今天修理hbase问题的时候发现，监控的60010端口的master.jsp就是无法显示，进入log查看发现zookeeper连上了之后马上就断开。</p>

<p><code>[NIOServerCxn.Factory:0.0.0.0/0.0.0.0:2181:NIOServerCnxn$Factory@247]</code>
<code>- Too many connections from /10.10.8.136 - max is 10</code></p>

<p>这种情况在telnet测试中被证实，一连上也是瞬间脱离与服务器的连接。</p>

<!-- more -->


<h3>解决</h3>

<p>其实需要在zoo.cfg中加入maxClientCnxns=300，加完以后需要重启。问题解决。</p>

<h3>原因</h3>

<p>我们线上有24台节点，但是这个参数竟然是使用默认的10，导致更多的客户端连上了zookeeper导致namenode的自带管理页无法连接到zookeeper，进而无法显示该页面。</p>

<p>如何监控zookeeper的其他指标，这里列出zoo.cfg的配置文件
```
dataDir = 数据存放路径</p>

<p>dataLogDir = 日志存放路径</p>

<p>clientPort = 客户端连接端口</p>

<p>clientPortAddress</p>

<p>tickTime= 整型 不能为0</p>

<p>maxClientCnxns= 整型 最大客户端连接数</p>

<p>minSessionTimeout= 整型</p>

<p>maxSessionTimeout= 整型</p>

<p>initLimit = 整型</p>

<p>syncLimit = 整型</p>

<p>electionAlg = 整型</p>

<p>peerType = observer | participant</p>

<p>server. sid= host:port | host:port:port  | host:port:port:type (type值 observer | participant)</p>

<p>group.gid = sid:sid (一个ID， 值是多个sid, 中间以:分割， 一个sid只能属于一个gid)</p>

<p>weight.sid=整型
```
可以看出还有至少2个参数是需要考虑的minSessionTimeout和maxSessionTimeout需要调优，得用JMX监控一段时间得出结论了。</p>

<p>同样的发现thrift也存在类似一连就断开的问题，下篇博文再作分析。</p>

<h3>总结</h3>

<p>这个案例告诉我不要盲目认为按照默认参数配置就没问题了，那是给小批量测试用的，需要根据实际情况采取相应配置。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php和zookeeper交互获取hbase的master状态]]></title>
    <link href="http://evoupsight.com/blog/2013/03/25/php-zookeeper/"/>
    <updated>2013-03-25T10:54:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/03/25/php-zookeeper</id>
    <content type="html"><![CDATA[<h3>为什么要使用zookeeper扩展</h3>

<p>公司用了HHVM这玩意来编译php，其实我要给它NO，因为连zookeeper都没支持，如果要支持，要自己写扩展，这是一个奇葩的节奏。所以我们还是采用php脚本方式来调用pecl扩展来实现php和zookeeper通讯。</p>

<!-- more -->


<h3>扩展</h3>

<p>以下是php的pecl版zookeeper扩展的下载地址<a href="http://pecl.php.net/get/zookeeper-0.2.2.tgz">http://pecl.php.net/get/zookeeper-0.2.2.tgz</a><br>
可以看到php版本的要求是>5.2.0
<code>sh
cd /home/software
wget http://pecl.php.net/get/zookeeper-0.2.2.tgz
tar xzf zookeeper-0.2.2.tgz
</code></p>

<h3>依赖库</h3>

<p>很可惜，该扩展的安装还需要你先去在本地下好zookeeper依赖库，那么我们开始吧。首先是zookeeper的安装，去apache下载好并解压<br>
<code>sh
cd /home/software
wget http://apache.fayea.com/apache-mirror/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz
tar xzf zookeeper-3.4.6.tar.gz
cd zookeeper-3.4.6/src/c
./configure --prefix=/home/software/zookeeper-3.4.6/prefix
sudo make install
</code></p>

<h3>php端编译</h3>

<p>这里就给一个静态编译的例子好了,以最新版本的php5.3.8为例，进入源码文件夹后</p>

<p><code>sh
$ cd /home/software/php-5.3.8/
$ cp -r /home/software/zookeeper-0.2.2 ext/zookeeper
$ ls ext/zookeeper/
CREDITS                 LICENSE                 config.m4               php_zookeeper.c         php_zookeeper_private.h php_zookeeper_session.h zoo_lock.h
ChangeLog               README.markdown         examples                php_zookeeper.h         php_zookeeper_session.c zoo_lock.c              zookeeper-api.php
$ ./buildconf -force
$ './configure'  '--prefix=/usr/local/php5.3.8_zookeeper' '--enable-zookeeper' '--with-libzookeeper-dir=/home/software/zookeeper-3.4.3/prefix' '--enable-sockets'
$ make
$ sudo make install
</code></p>

<p>安装完成后查看是否支持</p>

<p><code>sh
$ /usr/local/php5.3.8._zookeeper/bin/php -i | grep 'libzookeeper version'
libzookeeper version =&gt; 3.4.3
</code>
看到已经支持了</p>

<h3>最终的获取</h3>

<p>找一台非托管zk的hbase，这里假设是127.0.0.1，端口为2181</p>

<p>```php
&lt;?php
class zookeeper_instance extends Zookeeper {</p>

<pre><code>function connect_cb($type, $event, $string) {
    if ($event == Zookeeper::CONNECTED_STATE) {
        $acl=array(
            "perms"=&gt;0x1f,
            "scheme"=&gt;"world",
            "id"=&gt;"anyone"
        );
    }
}
</code></pre>

<p>}</p>

<p>$zk=new zookeeper_instance();
echo &ldquo;instance ok\n&rdquo;;</p>

<p>$zk->connect(&ldquo;127.0.0.1:2181&rdquo;, array($zk, &lsquo;connect_cb&rsquo;),200000); //连接超时200秒,比较夸张，测试用：）
echo &ldquo;connect ok\n&rdquo;;
$zkm=$zk->get(&ldquo;/hbase/master&rdquo;);
print_r($zkm);
?>
```</p>

<p>查看结果,已经获取到了master
```
[yin@yin-arch php_zookeeper_sample]>/usr/home/yin/local/bin/php5_new/bin/php test_zk_gethbasemaster.php
instance ok
connect ok
▒25469@namenode1namenode1,60000,1395387861310[yin@yin-arch php_zookeeper_sample]></p>

<p>```</p>

<p>收工!</p>
]]></content>
  </entry>
  
</feed>
