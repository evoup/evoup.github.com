<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: zookeeper | Evoup`s Blog]]></title>
  <link href="http://evoupsight.com/blog/categories/zookeeper/atom.xml" rel="self"/>
  <link href="http://evoupsight.com/"/>
  <updated>2014-07-10T15:12:00+08:00</updated>
  <id>http://evoupsight.com/</id>
  <author>
    <name><![CDATA[Evoup`s Blog]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hbase连zookeeper瞬断]]></title>
    <link href="http://evoupsight.com/blog/2013/12/31/hbase-access-zookeeper-fail-too-many-connections-form-ip/"/>
    <updated>2013-12-31T11:48:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/12/31/hbase-access-zookeeper-fail-too-many-connections-form-ip</id>
    <content type="html"><![CDATA[<h3>问题</h3>

<p>今天修理hbase问题的时候发现，监控的60010端口的master.jsp就是无法显示，进入log查看发现zookeeper连上了之后马上就断开。</p>

<p><code>[NIOServerCxn.Factory:0.0.0.0/0.0.0.0:2181:NIOServerCnxn$Factory@247]</code>
<code>- Too many connections from /10.10.8.136 - max is 10</code></p>

<p>这种情况在telnet测试中被证实，一连上也是瞬间脱离与服务器的连接。</p>

<!-- more -->


<h3>解决</h3>

<p>其实需要在zoo.cfg中加入maxClientCnxns=300，加完以后需要重启。问题解决。</p>

<h3>原因</h3>

<p>我们线上有24台节点，但是这个参数竟然是使用默认的10，导致更多的客户端连上了zookeeper导致namenode的自带管理页无法连接到zookeeper，进而无法显示该页面。</p>

<p>如何监控zookeeper的其他指标，这里列出zoo.cfg的配置文件
```
dataDir = 数据存放路径</p>

<p>dataLogDir = 日志存放路径</p>

<p>clientPort = 客户端连接端口</p>

<p>clientPortAddress</p>

<p>tickTime= 整型 不能为0</p>

<p>maxClientCnxns= 整型 最大客户端连接数</p>

<p>minSessionTimeout= 整型</p>

<p>maxSessionTimeout= 整型</p>

<p>initLimit = 整型</p>

<p>syncLimit = 整型</p>

<p>electionAlg = 整型</p>

<p>peerType = observer | participant</p>

<p>server. sid= host:port | host:port:port  | host:port:port:type (type值 observer | participant)</p>

<p>group.gid = sid:sid (一个ID， 值是多个sid, 中间以:分割， 一个sid只能属于一个gid)</p>

<p>weight.sid=整型
```
可以看出还有至少2个参数是需要考虑的minSessionTimeout和maxSessionTimeout需要调优，得用JMX监控一段时间得出结论了。</p>

<p>同样的发现thrift也存在类似一连就断开的问题，下篇博文再作分析。</p>

<h3>总结</h3>

<p>这个案例告诉我不要盲目认为按照默认参数配置就没问题了，那是给小批量测试用的，需要根据实际情况采取相应配置。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php和zookeeper交互获取hbase的master状态]]></title>
    <link href="http://evoupsight.com/blog/2013/03/25/php-zookeeper/"/>
    <updated>2013-03-25T10:54:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/03/25/php-zookeeper</id>
    <content type="html"><![CDATA[<h3>为什么要使用zookeeper扩展</h3>

<p>公司用了HHVM这玩意来编译php，其实我要给它NO，因为连zookeeper都没支持，如果要支持，要自己写扩展，这是一个奇葩的节奏。所以我们还是采用php脚本方式来调用pecl扩展来实现php和zookeeper通讯。</p>

<!-- more -->


<h3>扩展</h3>

<p>以下是php的pecl版zookeeper扩展的下载地址<a href="http://pecl.php.net/get/zookeeper-0.2.2.tgz">http://pecl.php.net/get/zookeeper-0.2.2.tgz</a><br>
可以看到php版本的要求是>5.2.0
<code>sh
cd /home/software
wget http://pecl.php.net/get/zookeeper-0.2.2.tgz
tar xzf zookeeper-0.2.2.tgz
</code></p>

<h3>依赖库</h3>

<p>很可惜，该扩展的安装还需要你先去在本地下好zookeeper依赖库，那么我们开始吧。首先是zookeeper的安装，去apache下载好并解压<br>
<code>sh
cd /home/software
wget http://apache.fayea.com/apache-mirror/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz
tar xzf zookeeper-3.4.6.tar.gz
cd zookeeper-3.4.6/src/c
./configure --prefix=/home/software/zookeeper-3.4.6/prefix
sudo make install
</code></p>

<h3>php端编译</h3>

<p>这里就给一个静态编译的例子好了,以最新版本的php5.3.8为例，进入源码文件夹后</p>

<p><code>sh
$ cd /home/software/php-5.3.8/
$ cp -r /home/software/zookeeper-0.2.2 ext/zookeeper
$ ls ext/zookeeper/
CREDITS                 LICENSE                 config.m4               php_zookeeper.c         php_zookeeper_private.h php_zookeeper_session.h zoo_lock.h
ChangeLog               README.markdown         examples                php_zookeeper.h         php_zookeeper_session.c zoo_lock.c              zookeeper-api.php
$ ./buildconf -force
$ './configure'  '--prefix=/usr/local/php5.3.8_zookeeper' '--enable-zookeeper' '--with-libzookeeper-dir=/home/software/zookeeper-3.4.3/prefix' '--enable-sockets'
$ make
$ sudo make install
</code></p>

<p>安装完成后查看是否支持</p>

<p><code>sh
$ /usr/local/php5.3.8._zookeeper/bin/php -i | grep 'libzookeeper version'
libzookeeper version =&gt; 3.4.3
</code>
看到已经支持了</p>

<h3>最终的获取</h3>

<p>找一台非托管zk的hbase，这里假设是127.0.0.1，端口为2181</p>

<p>```php
&lt;?php
class zookeeper_instance extends Zookeeper {</p>

<pre><code>function connect_cb($type, $event, $string) {
    if ($event == Zookeeper::CONNECTED_STATE) {
        $acl=array(
            "perms"=&gt;0x1f,
            "scheme"=&gt;"world",
            "id"=&gt;"anyone"
        );
    }
}
</code></pre>

<p>}</p>

<p>$zk=new zookeeper_instance();
echo &ldquo;instance ok\n&rdquo;;</p>

<p>$zk->connect(&ldquo;127.0.0.1:2181&rdquo;, array($zk, &lsquo;connect_cb&rsquo;),200000); //连接超时200秒,比较夸张，测试用：）
echo &ldquo;connect ok\n&rdquo;;
$zkm=$zk->get(&ldquo;/hbase/master&rdquo;);
print_r($zkm);
?>
```</p>

<p>查看结果,已经获取到了master
```
[yin@yin-arch php_zookeeper_sample]>/usr/home/yin/local/bin/php5_new/bin/php test_zk_gethbasemaster.php
instance ok
connect ok
▒25469@namenode1namenode1,60000,1395387861310[yin@yin-arch php_zookeeper_sample]></p>

<p>```</p>

<p>收工!</p>
]]></content>
  </entry>
  
</feed>
