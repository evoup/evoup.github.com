<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hadoop | Evoup`s Blog]]></title>
  <link href="http://evoupsight.com/blog/categories/hadoop/atom.xml" rel="self"/>
  <link href="http://evoupsight.com/"/>
  <updated>2014-07-30T17:08:54+08:00</updated>
  <id>http://evoupsight.com/</id>
  <author>
    <name><![CDATA[Evoup`s Blog]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hadoop put Warn DataStreamer Exception]]></title>
    <link href="http://evoupsight.com/blog/2014/07/30/hadoop-put-warn-datastreamer-exception/"/>
    <updated>2014-07-30T17:05:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/07/30/hadoop-put-warn-datastreamer-exception</id>
    <content type="html"><![CDATA[<p>今天在一个hadoop节点上传测试文件的时候
<code>bash
$ bin/hadoop fs -put /home/hadoop/project/s3log.txt /yin_test/s3log
</code>
出现如下报错:</p>

<!-- more -->


<p>```
14/07/25 13:23:05 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform&hellip; using builtin-java classes where app
licable
14/07/25 13:23:06 WARN hdfs.DFSClient: DataStreamer Exception
org.apache.hadoop.ipc.RemoteException(java.io.IOException): File /yin_test/s3log/s3log.txt.<em>COPYING</em> could only be replicated to 0 nodes instead of minReplication (=1).  There are 0 datanode(s) running and no node(s) are excluded in this operation.</p>

<pre><code>    at org.apache.hadoop.hdfs.server.blockmanagement.BlockManager.chooseTarget(BlockManager.java:1361)
    at org.apache.hadoop.hdfs.server.namenode.FSNamesystem.getAdditionalBlock(FSNamesystem.java:2362)
    at org.apache.hadoop.hdfs.server.namenode.NameNodeRpcServer.addBlock(NameNodeRpcServer.java:501)
    at org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolServerSideTranslatorPB.addBlock(ClientNamenodeProtocolServerSideTranslato
</code></pre>

<p>rPB.java:299)</p>

<pre><code>    at org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos$ClientNamenodeProtocol$2.callBlockingMethod(ClientNamenodeProt
</code></pre>

<p>ocolProtos.java:44954)</p>

<pre><code>    at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:453)
    at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1002)
    at org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:1752)
    at org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:1748)
    at java.security.AccessController.doPrivileged(Native Method)
    at javax.security.auth.Subject.doAs(Subject.java:415)
    at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1438)
    at org.apache.hadoop.ipc.Server$Handler.run(Server.java:1746)

    at org.apache.hadoop.ipc.Client.call(Client.java:1238)
    at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:202)
    at com.sun.proxy.$Proxy9.addBlock(Unknown Source)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:164)
    at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:83)
    at com.sun.proxy.$Proxy9.addBlock(Unknown Source)
</code></pre>

<p>```
已经把防火墙关了，经过一番查询研究，原来是dfs.namenode.name.dir和dfs.datanode.data.dir再重新格式化后要被清空的原因。删除这2个目录下的文件，然后重新格式化，再次put恢复正常。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hadoop2.0cdh4.6.0完全分布式安装]]></title>
    <link href="http://evoupsight.com/blog/2014/07/10/hadoop2-dot-0cdh4-dot-6-0-fullly-distrbute/"/>
    <updated>2014-07-10T15:57:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/07/10/hadoop2-dot-0cdh4-dot-6-0-fullly-distrbute</id>
    <content type="html"><![CDATA[<p>hadoop2.0 cdh4安装（完全分布式）</p>

<!-- more -->


<p>vmware版本8.0.4 build-744019</p>

<p>首先规划3台虚拟机
<code>
 ,'''''''''''''''''''''':'''''''''''''''''':''''''''''''''''''''''''''''''''''''''''''''|
 |        usage         |        IP        |                  Hostname                  |
 |                      |                  |                                            |
 |''''''''''''''''''''''|''''''''''''''''''|''''''''''''''''''''''''''''''''''''''''''''|
 | namenode1,datanode1  | 192.168.216.183  |    mdn3namenode1.net,mdn3datanode1.net     |
 |                      |                  |                                            |
 |''''''''''''''''''''''|''''''''''''''''''|''''''''''''''''''''''''''''''''''''''''''''|
 | namenode2,datanode2  | 192.168.216.184  |    mdn3namenode2.net,mdn3datanode2.net     |
 |                      |                  |                                            |
 |''''''''''''''''''''''|''''''''''''''''''|''''''''''''''''''''''''''''''''''''''''''''|
 | datanode2,nfs server | 192.168.216.185  |    mdn3datanode3.net,mdn3nfsserver.net     |
 |                      |                  |                                            |
  '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
</code></p>

<h3>准备工作</h3>

<p>先安装JDK1.6 linux:先把已经安装的openjdk卸载,安装sun jdk1.6,去oracle下载 （j2se就够了）
<code>bash
$ rpm -qa | grep jdk
java-1.6.0-openjdk-1.6.0.0-1.28.1.10.9.el5_8
$ sudo rpm -e java-1.6.0-openjdk-1.6.0.0-1.28.1.10.9.el5_8
$ sudo chmod +x jdk-6u45-linux-x64-rpm.bin
$ sudo ./jdk-6u45-linux-x64-rpm.bin
</code></p>

<p>hadoop所有操作都是用hadoop帐号，下面添加（如果已经创建了帐号无须添加）
```bash
$ groupadd hadoop
$ useradd -r -g hadoop -d /home/hadoop -m -s /bin/bash hadoop</p>

<p>$ mkdir -p /home/hadoop
$ chgrp -R hadoop /home/hadoop
$ chown -R hadoop /home/hadoop
```</p>

<p>环境变量(在centos里不管编辑~/.profile还是~/.bash_profile都不能加载环境变量，正确的应该是在~/.bashrc中，而如果是root用户，应该可以直接在/etc/profile中编辑)
<code>bash
$ vi ~/.bashrc
export HADOOP_HOME="/usr/local/hadoop"
export JAVA_HOME="/usr/java/jdk1.6.0_45"
export PATH=$PATH:$JAVA_HOME/bin
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
</code></p>

<p>切换到hadoop帐号，进行免密码的ssh登录设置
<code>bash
$ su hadoop
$ ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa
$ cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys
$ chmod 600 ~/.ssh/authorized_keys
</code></p>

<p>给出我的hadoop/hbase版本
```
Name        : hadoop-hdfs-namenode
Arch        : x86_64
Version     : 2.0.0+1554
Release     : 1.cdh4.6.0.p0.16.el6</p>

<p>Name        : hbase-master
Arch        : x86_64
Version     : 0.94.15+86
Release     : 1.cdh4.6.0.p0.14.el6
```</p>

<p>然后是cdh的软件下载url
<a href="http://archive.cloudera.com/cdh4">http://archive.cloudera.com/cdh4</a>
这个路径下有很多的软件。</p>

<p>下载cdh4.6的几个包安装
<code>bash
$ cd /home/software/
$ wget http://archive.cloudera.com/cdh4/cdh/4/hadoop-2.0.0-cdh4.6.0.tar.gz
$ sudo mkdir /usr/local/hadoop/
$ tar xzf hadoop-2.0.0-cdh4.6.0.tar.gz
$ sudo mv hadoop-2.0.0-cdh4.6.0 /usr/local/
$ sudo mv /usr/local/hadoop-2.0.0-cdh4.6.0 /usr/local/hadoop
$ sudo chown -R hadoop:hadoop /usr/local/hadoop
</code>
创建存储临时文件temp、data和name节点数据的目录
<code>sh
$ sudo mkdir /usr/local/hadoop/temp/ /usr/local/hadoop/data/ /usr/local/hadoop/name/
$ sudo chown -R hadoop:hadoop /usr/local/hadoop
</code></p>

<p>好了，准备工作终了</p>

<p>开始配置
配置/usr/local/hadoop/etc/hadoop/core-site.xml
```xml
<configuration></p>

<pre><code>    &lt;property&gt;
            &lt;name&gt;fs.defaultFS&lt;/name&gt;
            &lt;value&gt;hdfs://mdn3namenode1.net:9000&lt;/value&gt; &lt;!-- master域名或者master的ip --&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;io.file.buffer.size&lt;/name&gt;
            &lt;value&gt;131072&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;
            &lt;value&gt;file:/usr/local/hadoop/temp&lt;/value&gt;
            &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;hadoop.proxyuser.hduser.hosts&lt;/name&gt;
            &lt;value&gt;*&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;hadoop.proxyuser.hduser.groups&lt;/name&gt;
            &lt;value&gt;*&lt;/value&gt;
    &lt;/property&gt;
</code></pre>

<p></configuration>
```</p>

<p>配置/usr/local/hadoop/etc/hadoop/hdfs-site.xml
```xml
<configuration></p>

<pre><code>    &lt;property&gt;
            &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;
            &lt;value&gt;mdn3namenode1.net:9001&lt;/value&gt; &lt;!-- master域名或者master的ip --&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;
    &lt;value&gt;file:/usr/local/hadoop/dfs/name&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;
            &lt;value&gt;file:/usr/local/hadoop/dfs/data&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;dfs.replication&lt;/name&gt;
            &lt;value&gt;3&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;
            &lt;value&gt;true&lt;/value&gt;
    &lt;/property&gt;
</code></pre>

<p></configuration>
```</p>

<p>配置/usr/local/hadoop/etc/hadoop/madpred-site.xml
<code>sh
cp mapred-site.xml.template mapred-site.xml
</code>
```xml
<configuration></p>

<pre><code>    &lt;property&gt;
            &lt;name&gt;mapreduce.framework.name&lt;/name&gt;
            &lt;value&gt;yarn&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;
            &lt;value&gt;mdn3namenode1.net:10020&lt;/value&gt; &lt;!-- master域名或者master的ip --&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;
            &lt;value&gt;mdn3namenode1.net:19888&lt;/value&gt; &lt;!-- master域名或者master的ip --&gt;
    &lt;/property&gt;
</code></pre>

<p></configuration></p>

<p>```</p>

<p>配置/usr/local/hadoop/etc/hadoop/yarn-site.xml
```xml
<configuration></p>

<pre><code>    &lt;property&gt;
            &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;
            &lt;value&gt;mapreduce.shuffle&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class&lt;/name&gt;
            &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt;
            &lt;value&gt;mdn3namenode1.net:8032&lt;/value&gt; &lt;!-- master域名或者master的ip --&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt;
            &lt;value&gt;mdn3namenode1.net:8030&lt;/value&gt; &lt;!-- master域名或者master的ip --&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt;
            &lt;value&gt;mdn3namenode1.net:8031&lt;/value&gt; &lt;!-- master域名或者master的ip --&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;yarn.resourcemanager.admin.address&lt;/name&gt;
            &lt;value&gt;mdn3namenode1.net:8033&lt;/value&gt; &lt;!-- master域名或者master的ip --&gt;
    &lt;/property&gt;
    &lt;property&gt;
            &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;
            &lt;value&gt;mdn3namenode1.net:8088&lt;/value&gt; &lt;!-- master域名或者master的ip --&gt;
    &lt;/property&gt;
</code></pre>

<p></configuration>
```</p>

<p>编辑slave的名字
直接讲slave的域名或者slave的ip按照一行一个的规则写进去
<code>
mdn3datanode2.net
mdn3datanode3.net
</code></p>

<p>复制到各台机器上
<code>sh
$ cd /usr/local/
$ sudo scp -dr hadoop@192.168.216.183:/usr/local/hadoop .
$ sudo chown -R hadoop:hadoop hadoop/
</code></p>

<p>格式化hdfs
在namenode上执行
<code>sh
/usr/local/hadoop/bin/hadoop namenode -format
</code></p>

<h3>hbase的安装配置</h3>

<p>hbase依赖zookeeper，需要先去下载
<code>sh
$ cd /home/software/
$ wget http://archive.cloudera.com/cdh4/cdh/4/zookeeper-3.4.5-cdh4.6.0.tar.gz
$ tar xzf zookeeper-3.4.5-cdh4.6.0.tar.gz
$ sudo mv zookeeper-3.4.5-cdh4.6.0 /usr/local/
$ sudo mv /usr/local/zookeeper-3.4.5-cdh4.6.0 /usr/local/zookeeper
$ sudo chown -R hadoop:hadoop /usr/local/zookeeper
$ sudo cp /usr/local/zookeeper/conf/zoo_sample.cfg /usr/local/zookeeper/conf/zoo.cfg
</code>
zookeeper准备完毕，可以继续安装hbase</p>

<p><code>sh
$ cd /home/software/
$ wget http://archive.cloudera.com/cdh4/cdh/4/hbase-0.94.15-cdh4.6.0.tar.gz
$ sudo mkdir /usr/local/hbase/
$ tar xzf hbase-0.94.15-cdh4.6.0.tar.gz
$ sudo mv hbase-0.94.15-cdh4.6.0 /usr/local/
$ sudo mv /usr/local/hbase-0.94.15-cdh4.6.0 /usr/local/hbase
$ sudo chown -R hadoop:hadoop /usr/local/hbase
</code></p>

<p>若干配置步骤
配置hbase-site.xml
```xml
<configuration></p>

<pre><code>&lt;property&gt;
    &lt;name&gt;hbase.rootdir&lt;/name&gt;
    &lt;value&gt;hdfs://mdn3namenode1.net:9000/hbase&lt;/value&gt;

&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;
    &lt;value&gt;true&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;hbase.master&lt;/name&gt;
    &lt;value&gt;mdn3datanode1.net:60000&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;
    &lt;value&gt;mdn3datanode1.net&lt;/value&gt;    &lt;!-- 这里配置若干个zookeeper的服务器地址，需要是奇数个 --&gt;
&lt;/property&gt;
</code></pre>

<p></configuration>
<code>
配置hbase-env.sh
</code>xml
export HBASE_MANAGES_ZK=false
```
不要hbase托管zookeeper</p>

<p>配置regionservers
<code>
mdn3datanode2.net
mdn3datanode3.net
</code></p>

<p>启动hbase
<code>sh
/usr/local/hbase/bin/start-hbase.sh
/usr/local/hbase/bin/hbase-daemons.sh start thrift
</code>
hbase启动完成.</p>

<h3>配置hbase可能碰到几个问题的说明：</h3>

<p>1) 报错
<code>ERROR client.HConnectionManager$HConnectionImplementation: Check the value configured in 'zookeeper.znode.parent'</code></p>

<p>是需要把/etc/hosts中的127.0.0.1注释掉，否则zookeeper还会出现
最后的hosts我这里是这样
```
[hadoop@localhost conf]$ more /etc/hosts</p>

<h1>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</h1>

<p>::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.216.183 mdn3namenode1.net mdn3datanode1.net
192.168.216.184 mdn3namenode2.net mdn3datanode2.net
192.168.216.185 mdn3datanode3.net mdn3nfsserver.net
```</p>

<p>2) 在运行/usr/local/hbase/bin/hbase shell的时候出现了
<code>WARN conf.Configuration: hadoop.native.lib is deprecated. Instead, use io.native.lib.available</code></p>

<p>3) <code>java.net.ConnectException: Connection refused</code>
这是要求hadoop中的slaves配置和hbase的regionservers要一致。</p>

<h3>hive的安装</h3>

<p><code>sh
cd /home/software
wget http://archive.cloudera.com/cdh4/cdh/4/hive-0.10.0-cdh4.6.0.tar.gz
tar xzf hive-0.10.0-cdh4.6.0.tar.gz
sudo mv hive-0.10.0-cdh4.6.0 /usr/local/
sudo mv /usr/local/hive-0.10.0-cdh4.6.0 /usr/local/hive
chown -R hadoop:hadoop /usr/local/hive
</code></p>

<h3>hive的配置</h3>

<p>在~/.bashrc中加入
<code>bash
export HIVE_HOME=/usr/local/hive
export HIVE_CONF_DIR=$HIVE_HOME/conf
export HIVE_LIB=$HIVE_HOME/lib
export PATH=$PATH:$JAVA_HOME/bin:$ZOOKEEPER_HOME:$HIVE_HOME
</code></p>

<p>在conf/hive-site.xml中
```
<configuration>
<property>
  <name>hive.metastore.local</name>
  <value>true</value>
</property></p>

<p><property>
  <name>javax.jdo.option.ConnectionURL</name>
  <value>jdbc:mysql://localhost:3306/hive</value>
</property></p>

<p><property>
  <name>javax.jdo.option.ConnectionDriverName</name>
  <value>com.mysql.jdbc.Driver</value>
</property></p>

<p><property>
  <name>javax.jdo.option.ConnectionUserName</name>
  <value>hive</value>
</property></p>

<p><property>
  <name>javax.jdo.option.ConnectionPassword</name>
  <value>hive</value>
</property>
<property>
  <name>datanucleus.fixedDatastore</name>
  <value>false</value>
</property></p>

<p></configuration></p>

<p>```</p>

<p>这里要安装mysql作为元数据服务器，参考这篇 <a href="http://evoupsight.com/blog/2014/02/17/hadoop0-dot-20-dot-2-plus-hive0-dot-7/">http://evoupsight.com/blog/2014/02/17/hadoop0-dot-20-dot-2-plus-hive0-dot-7/</a></p>

<p>然后/bin/hive后，成功进入shell
```</p>

<blockquote><p>create table test (key string);
<code>``
如果遇到下面的报错
</code> FAILED: Error in metadata: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.metastore.HiveMetaStoreClient `</p></blockquote>

<p><code>FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.DDLTask</code>
建表错误
开始以为hive没有访问mysql的权限,以root用户登录mysql然后赋予hive用户权限：
<code>
grant all privileges on *.* to hive@localhost identified by 'hive';
grant all privileges on *.* to hive@192.168.216.183 identified by 'hive';
</code>
发现问题依旧</p>

<p>其实是要在hive-site.xml中把
<code>
&lt;property&gt;
  &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;
  &lt;value&gt;jdbc:mysql://localhost:3306/hive&lt;/value&gt;
&lt;/property&gt;
</code>
改成
<code>
&lt;property&gt;
  &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;
  &lt;value&gt;jdbc:mysql://192.168.216.183:3306/hive&lt;/value&gt;
&lt;/property&gt;
</code></p>

<p>问题依旧，打开hive的调试模式
<code>
bin/hive -hiveconf hive.root.logger=DEBUG,console
</code>
<code>14/05/08 17:35:53 WARN conf.HiveConf: DEPRECATED: Configuration property hive.metastore.local no longer has any effect.</code>
<code>Make sure to provide a valid value for hive.metastore.uris if you are connecting to a remote metastore</code></p>

<p>在配置文件里删除hive.metastore.local属性。</p>

<p>最后查得原因是没有安装mysql驱动，只要把mysql-connector-java-5.1.22-bin.jar放到lib下就可以了</p>

<p>然后
```
hive> create table test (key string);
OK
Time taken: 42.259 seconds</p>

<p>hive> show tables;
OK
test
Time taken: 0.279 seconds
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[导入nginx日志并采用hive进行统计]]></title>
    <link href="http://evoupsight.com/blog/2014/03/10/import-nginx-log-and-use-hive-to-caculate/"/>
    <updated>2014-03-10T16:07:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/03/10/import-nginx-log-and-use-hive-to-caculate</id>
    <content type="html"><![CDATA[<p>公司的日志本来是存成gzip或bz2格式直接导入到hdfs里去然后用程序直接mr的，速度是比较慢的。领导要求采用hive来计算，而在hive里建textfile表的这种方式，textfile是无法进行并行计算的，而且gzip和bz2做mr的速度是很慢的。所以准备采取先导入hdfs和textfile表，然后再转换为rcfile格式的表的策略。实际试验下来，如果一开始转换为文本或者是lzo格式，而不是采用gzip或bz2的格式的textfile的表，再转换为rcfile的方式会快很多，mr的速度也是比较快的。</p>

<p>下面描述一下过程</p>

<!-- more -->


<p>把全部日志上通过scp等方式传到服务器之后，要做的是先建一个textfile的表
<code>sh
create external table nginxlog (ipaddress string, ...更多字段省略) COMMENT 'nginx log' ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' stored as textfile    location '/data/log';
</code></p>

<p>把得到所有nginx日志，然后用lzop先压缩好，然后传到hdfs上去。
<code>sh
$ tar xjf server01-20140131.txt.bz2
$ tar xjf server02-20140131.txt.bz2
$ lzop server01-20140131.txt
$ lzop server02-20140131.txt
$ server01-20140131.txt.lzo server02-20140131.txt.lzo
$ /u01/app/hadoop fs -put server01-20140131.txt.lzo /data/log/server01-20140131.txt.lzo
$ /u01/app/hadoop fs -put server01-20140131.txt.lzo /data/log/server02-20140131.txt.lzo
$/u01/app/hadoop/bin/hadoop fs -ls /data/log/
Found 2 items
-rw-r--r--   1 hadoop supergroup  364459530 2014-03-07 18:10 /data/log/server01-20140131.txt.lzo
-rw-r--r--   1 hadoop supergroup  364459530 2014-03-10 13:31 /data/log/server02-20140201.txt.lzo
</code></p>

<p>然后马上就可以查询了
<code>
hive&gt; select count(*) from nginxlog;
Total MapReduce jobs = 1
Launching Job 1 out of 1
Number of reduce tasks determined at compile time: 1
In order to change the average load for a reducer (in bytes):
  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;
In order to limit the maximum number of reducers:
  set hive.exec.reducers.max=&lt;number&gt;
In order to set a constant number of reducers:
  set mapred.reduce.tasks=&lt;number&gt;
Starting Job = job_201403101051_0004, Tracking URL = http://mdn2.net:50030/jobdetails.jsp?jobid=job_201403101051_0004
Kill Command = /u01/app/hadoop/bin/../bin/hadoop job  -Dmapred.job.tracker=mdn2.net:9025 -kill job_201403101051_0004
2014-03-10 14:17:41,179 Stage-1 map = 0%,  reduce = 0%
2014-03-10 14:18:20,815 Stage-1 map = 50%,  reduce = 0%
2014-03-10 14:18:32,927 Stage-1 map = 100%,  reduce = 0%
2014-03-10 14:18:38,971 Stage-1 map = 100%,  reduce = 17%
2014-03-10 14:18:41,991 Stage-1 map = 100%,  reduce = 100%
Ended Job = job_201403101051_0004
OK
2492916
Time taken: 75.321 seconds
</code></p>

<p>这么做也是可以使用hive的，但是速度还是比较慢。于是可以再创建一个rcfile格式的表，然后再查询
<code>
bin/hive&gt; create external table nginxlog2 (ipaddress string, ...,更多字段) COMMENT 'nginx log rcfile format' ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' stored as RCFile    location '/data/log2';
</code></p>

<p>然后用
<code>
hive&gt; SET hive.exec.compress.output=true;
hive&gt; SET io.rcfile.compression.type=BLOCK;
hive&gt; insert overwrite table nginxlog2 select * from nginxlog;
Total MapReduce jobs = 2
Launching Job 1 out of 2
Number of reduce tasks is set to 0 since there's no reduce operator
Starting Job = job_201403101051_0007, Tracking URL = http://mdn2.net:50030/jobdetails.jsp?jobid=job_201403101051_0007
Kill Command = /u01/app/hadoop/bin/../bin/hadoop job  -Dmapred.job.tracker=mdn2.net:9025 -kill job_201403101051_0007
2014-03-10 15:20:20,959 Stage-1 map = 0%,  reduce = 0%
2014-03-10 15:21:21,267 Stage-1 map = 0%,  reduce = 0%
2014-03-10 15:22:21,627 Stage-1 map = 0%,  reduce = 0%
2014-03-10 15:23:22,320 Stage-1 map = 0%,  reduce = 0%
2014-03-10 15:23:36,542 Stage-1 map = 100%,  reduce = 0%
2014-03-10 15:23:42,665 Stage-1 map = 100%,  reduce = 100%
Ended Job = job_201403101051_0007
Ended Job = -1308159129, job is filtered out (removed at runtime).
Moving data to: hdfs://mdn2.net:9024/tmp/hive-hadoop/hive_2014-03-10_15-20-15_076_2561493179927538497/-ext-10000
Loading data to table default.nginxlog2
Deleted hdfs://mdn2.net:9024/data/log2
Table default.nginxlog2 stats: [num_partitions: 0, num_files: 0, num_rows: 0, total_size: 0]
2492916 Rows loaded to nginxlog2
OK
Time taken: 209.088 seconds
</code></p>

<p>然后再次select，对比一下时间
<code>
hive&gt; select count(*) from nginxlog2;
Total MapReduce jobs = 1
Launching Job 1 out of 1
Number of reduce tasks determined at compile time: 1
In order to change the average load for a reducer (in bytes):
  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;
In order to limit the maximum number of reducers:
  set hive.exec.reducers.max=&lt;number&gt;
In order to set a constant number of reducers:
  set mapred.reduce.tasks=&lt;number&gt;
Starting Job = job_201403101051_0008, Tracking URL = http://mdn2.net:50030/jobdetails.jsp?jobid=job_201403101051_0008
Kill Command = /u01/app/hadoop/bin/../bin/hadoop job  -Dmapred.job.tracker=mdn2.net:9025 -kill job_201403101051_0008
2014-03-10 15:26:21,984 Stage-1 map = 0%,  reduce = 0%
2014-03-10 15:26:31,031 Stage-1 map = 33%,  reduce = 0%
2014-03-10 15:26:43,107 Stage-1 map = 67%,  reduce = 0%
2014-03-10 15:26:49,140 Stage-1 map = 67%,  reduce = 17%
2014-03-10 15:26:52,153 Stage-1 map = 100%,  reduce = 22%
2014-03-10 15:27:04,225 Stage-1 map = 100%,  reduce = 100%
Ended Job = job_201403101051_0008
OK
2492916
Time taken: 55.656 seconds
</code>
我这里是2个节点， 55.656s，相比textfile的75.321s，rcfile的有20秒的优势，当然并行计算的节点越多，时间就越省。</p>

<p>这里要补充一下：不通过本地导入的方式直接导入rcfile的原因，是因为textfile格式才支持从本地导入，sequencefile和rcfile均不支持，所以只能先搞一个表再复制。如果用textfile加gzip或bz2的表再复制到rcfile的表，时间会很长；而用textfile+lzo的表再复制到rcfile的表，时间比较短。lzo相对gzip或bz2压缩速度快但是相对压缩比没有优势，然而再转为rcfile格式mr会很快，这样hive查询就很快。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hadoop报错：Incompatible namespaceIDs]]></title>
    <link href="http://evoupsight.com/blog/2014/02/24/hadoop-error-incompatible-namespaceids/"/>
    <updated>2014-02-24T17:08:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/02/24/hadoop-error-incompatible-namespaceids</id>
    <content type="html"><![CDATA[<p>今天在修改hadoop主机名重新格式化namenode之后，重新启动hadoop，发现datanode无法启动起来。</p>

<p>报错：HADOOP报错<code>Incompatible namespaceIDs</code></p>

<p>查看报告发现没有启动一个datanode</p>

<!-- more -->


<p>```sh
$/u01/app/hadoop/bin/hadoop dfsadmin -report
Configured Capacity: 0 (0 KB)
Present Capacity: 0 (0 KB)
DFS Remaining: 0 (0 KB)
DFS Used: 0 (0 KB)
DFS Used%: �%
Under replicated blocks: 0
Blocks with corrupt replicas: 0
Missing blocks: 0</p>

<hr />

<p>Datanodes available: 0 (0 total, 0 dead)
```</p>

<p>原来是要求datanode的VERSION文件和namenode的要一致</p>

<p>于是到namenode上看文件
```sh
[hadoop@mdn2 current]$more /u01/app/hadoopTmp/dfs/name/current/VERSION</p>

<h1>Mon Feb 24 16:48:12 CST 2014</h1>

<p>namespaceID=1235115105
cTime=0
storageType=NAME_NODE
layoutVersion=-31
```
namespaceID为1235115105</p>

<p>到datanode里查看发现不存在</p>

<h3>解决方法两种任选其一：</h3>

<p>1）在datanode的&lt;dfs.data.dir>/current/VERSION中指定一个一模一样的namespaceID=1235115105，然后重启datanode</p>

<p>2）在格式化namenode的时候要清空/tmp目录下所有有关hadoop的目录，不论是namenode还是datanode所在的机器</p>

<h4>参考文章</h4>

<p><a href="http://blog.csdn.net/wanghai__/article/details/5752199">http://blog.csdn.net/wanghai__/article/details/5752199</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hive初试--导入数据和查询]]></title>
    <link href="http://evoupsight.com/blog/2014/02/20/hive-import-data/"/>
    <updated>2014-02-20T10:50:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/02/20/hive-import-data</id>
    <content type="html"><![CDATA[<p>hive虽然是基于hadoop的map/reduce进行云计算，但是自身需要依赖一个元数据表，要么是derby，要么是mysql，相同点总归是要先导入数据，然后才能进行处理。其原理是把结构化的数据文件映射为一张数据库表，然后将SQL语句转化为MapReduce任务进行运行，以绕过专门开发MapReduce这样一个逆向思维的产物。</p>

<p>Hive不可以改写、插入和删除数据，换句话说hive完全就是用来进行计算的。</p>

<p>Hive的数据是存在hdfs上的,所以数据导入之后除了元数据之外，还有另一份本体数据（通常比较大的）存在hdfs上。</p>

<p>有了基础概念之后，开始正题了。</p>

<!-- more -->


<h3>环境描述</h3>

<p>hadoop0.20.203+hive0.7</p>

<h3>任务描述</h3>

<p>本次目的，是把一张二维表导入到hive中后，然后根据编号查询对应的单词。</p>

<h3>过程描述</h3>

<p>假设有这样一个文件test.txt</p>

<p><img src="/images/evoup/hive_test_txt.png" alt="Alt text" /></p>

<p>(vim党注意：如果你已经把tab键映射为4个空格，那么请进入插入模式后在数字后ctrl+v,然后按下<tab>键，再输入单词，否则无法完成制表符的键入，数据导入失败。)</p>

<p>启动hive建表:
```sh
hive>  CREATE EXTERNAL TABLE MYTEST(id INT, name STRING)</p>

<blockquote><p>COMMENT &lsquo;this is a test&rsquo;
ROW FORMAT DELIMITED FIELDS TERMINATED BY &lsquo;\t&rsquo;
STORED AS TEXTFILE
LOCATION &lsquo;/data/test&rsquo;;
OK
```
注意这一步要求原本的hdfs目录下没有/data/test文件夹，如果有的话，hive是要报错的。
还有存储格式有三种textfile、rcfile和sequencefile。其中多数情况用textfile就可以了，如果要压缩，可以考虑后两者。</p></blockquote>

<p>进入hadoop，开始导入
<code>sh
/bin/hadoop fs -put test.txt /data/test
</code></p>

<p>回到hive，用简单的HQL查询语句查询id为4的记录
<code>sh
hive&gt; select * from mytest where id = 4;
Total MapReduce jobs = 1
Launching Job 1 out of 1
Number of reduce tasks is set to 0 since there's no reduce operator
Starting Job = job_201402191826_0007, Tracking URL = http://mdn2.net:50030/jobdetails.jsp?jobid=job_201402191826_0007
Kill Command = /u01/app/hadoop/bin/../bin/hadoop job  -Dmapred.job.tracker=mdn2.net:9025 -kill job_201402191826_0007
2014-02-20 00:16:34,842 Stage-1 map = 0%,  reduce = 0%
2014-02-20 00:16:40,889 Stage-1 map = 100%,  reduce = 0%
2014-02-20 00:16:46,936 Stage-1 map = 100%,  reduce = 100%
Ended Job = job_201402191826_0007
OK
4       case
Time taken: 21.36 seconds
</code></p>

<p>hive查询一次需要21秒?没错，这就是MapReduce查询的特点了，换做mysql的话这样查询一次应该是&lt;1秒的。好啦，收工。</p>
]]></content>
  </entry>
  
</feed>
