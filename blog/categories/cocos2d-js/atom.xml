<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cocos2d-js | Evoup`s Blog]]></title>
  <link href="http://evoupsight.com/blog/categories/cocos2d-js/atom.xml" rel="self"/>
  <link href="http://evoupsight.com/"/>
  <updated>2014-03-25T13:50:24+08:00</updated>
  <id>http://evoupsight.com/</id>
  <author>
    <name><![CDATA[Evoup`s Blog]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Win7 Android开发环境搭建之二(NDK+CDT)]]></title>
    <link href="http://evoupsight.com/blog/2014/03/18/android-install-ndk-cdt/"/>
    <updated>2014-03-18T15:08:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/03/18/android-install-ndk-cdt</id>
    <content type="html"><![CDATA[<p>由于cocos2d-js用到了android的一些生产软件，比如android sdk、adt、cdt和ndk，前面两个已经在之前的《Win7 Android开发环境搭建之一(SDK+ADT)》说过了，这次主要介绍下怎么安装cdt和ndk。</p>

<!-- more -->


<h3>什么是NDK</h3>

<blockquote><p>NDK 提供了一系列的工具，帮助开发者快速开发C（或C++）的动态库，并能自动将so 和java 应用一起打包成apk。这些工具对开发者的帮助是巨大的。</p></blockquote>

<h3>NDK的安装</h3>

<p>这个安装其实就是解压（环境变量的添加要等装好了cygwin再添加，这是后话），下载android NDK。<a href="http://developer.android.com/tools/sdk/ndk/index.html">http://developer.android.com/tools/sdk/ndk/index.html</a></p>

<p>我下载的版本是android-ndk-r9d-windows-x86_64.zip<br>
下载后解压到例如：c:\android\android-ndk-r9d-windows-x86_64.zip，结果如下图：<br>
<img src="/images/evoup/android_cdt_ndk/01.png" alt="Alt text" /></p>

<h3>安装cygwin与ndk编译</h3>

<p>（插一句：cygwin安装后与octopress的环境可能冲突，建议先安装octopress)</p>

<h4>安装cygwin</h4>

<p>ndk开发需要gcc环境，在windows下可以用是cygwin模拟linux编译环境。</p>

<p>Cygwin的下载地址：<a href="http://www.cygwin.com/">http://www.cygwin.com/</a></p>

<p>这个直接一路装，选择163的镜像<br>
<img src="/images/evoup/android_cdt_ndk/02.png" alt="Alt text" /></p>

<p>选择Devel-Default，然后点击变成Devel-Install，然后持续点击下一步，耐心等待安装完成，时间是比较长的<br>
或者可以选择像网上许多教程说的那样只下载12个包，这个我就不这么做了<br>
<img src="/images/evoup/android_cdt_ndk/03.png" alt="Alt text" /></p>

<h4>加入环境变量(可选，这样可以直接在cmd里进行cygwin.bat的操作)</h4>

<p>完成之后，需要把cygwin加入环境变量,我这里是安装在了c:/cygwin64,把c:/cygwin64/bin加入环境变量PATH<br>
<img src="/images/evoup/android_cdt_ndk/04.png" alt="Alt text" /></p>

<h4>测试cygwin环境</h4>

<p>运行c:/cygwin64/Cygwin.bat,输入
<code>sh
cygcheck -c cygwin
make -v
gcc -v
</code></p>

<p>如果显示ok就可以了，之前的报错cygheap base mismatch detected可以先忽略。<br>
<img src="/images/evoup/android_cdt_ndk/05.png" alt="Alt text" /></p>

<h4>设置NDK路径：</h4>

<p>接下来在windows系统环境变量ndk中添加NDK的路径,刚刚我把NDK解压到C:\android\android-ndk-r9d-windows-x86_64\android-ndk-r9d<br>
然后在环境变量ndk加上它在cygwin shell里的对应路径/cygdrive/c/android/android-ndk-r9d-windows-x86_64/android-ndk-r9d<br>
<img src="/images/evoup/android_cdt_ndk/06.png" alt="Alt text" /></p>

<p>编辑完成后，进入cygwin.bat输入<br>
<code>
cd $ndk
</code>
可以看到如下结果<br>
<img src="/images/evoup/android_cdt_ndk/07.png" alt="Alt text" /></p>

<h4>测试NDK，编译一个例子</h4>

<p>例子可以在$ndk/sample/hello-jni中找到<br>
进入cygwin.bat中输入编译指令
<code>
cd $ndk/sample/hello-jni
$ndk/ndk-build
</code>
一会儿就能编译完成，见下<br>
<img src="/images/evoup/android_cdt_ndk/08.png" alt="Alt text" /></p>

<p>进入libs目录查看结果,观察是否生成了so文件，如果生成则说明你的NDK已经运行正常了。<br>
<code>
$ cd libs/armeabi/
$ ls
gdb.setup  gdbserver  libhello-jni.so
</code></p>

<h4>在Eclipse中完成代码调用</h4>

<p>接下来进入Eclipse，测试该项目,创建项目路径为C:\android\project\HelloJni<br>
在Create Android Project时勾选“Create project from existing source”，Root Directory中填C:\android\android-ndk-r9d-windows-x86_64\android-ndk-r9d\samples\hello-jni,如下<br>
<img src="/images/evoup/android_cdt_ndk/09.png" alt="Alt text" /><br>
<img src="/images/evoup/android_cdt_ndk/10.png" alt="Alt text" /><br>
<img src="/images/evoup/android_cdt_ndk/11.png" alt="Alt text" /><br></p>

<p>看到如下字符串就代表NDK的例子运行成功了<br>
<img src="/images/evoup/android_cdt_ndk/12.png" alt="Alt text" /></p>

<p>分析一下调用代码
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>HelloJni.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Copyright</span> <span class="o">&amp;</span><span class="n">copy</span><span class="o">;</span> <span class="mi">2009</span> <span class="n">The</span> <span class="n">Android</span> <span class="n">Open</span> <span class="n">Source</span> <span class="n">Project</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Licensed</span> <span class="n">under</span> <span class="n">the</span> <span class="n">Apache</span> <span class="n">License</span><span class="o">,</span> <span class="n">Version</span> <span class="mf">2.0</span> <span class="o">(</span><span class="n">the</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">License</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'> <span class="o">*</span> <span class="n">you</span> <span class="n">may</span> <span class="n">not</span> <span class="n">use</span> <span class="k">this</span> <span class="n">file</span> <span class="n">except</span> <span class="n">in</span> <span class="n">compliance</span> <span class="n">with</span> <span class="n">the</span> <span class="n">License</span><span class="o">.</span>
</span><span class='line'> <span class="o">*</span> <span class="n">You</span> <span class="n">may</span> <span class="n">obtain</span> <span class="n">a</span> <span class="n">copy</span> <span class="n">of</span> <span class="n">the</span> <span class="n">License</span> <span class="n">at</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span>      <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span><span class="o">&gt;</span><span class="nl">http:</span><span class="c1">//www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Unless</span> <span class="n">required</span> <span class="n">by</span> <span class="n">applicable</span> <span class="n">law</span> <span class="n">or</span> <span class="n">agreed</span> <span class="n">to</span> <span class="n">in</span> <span class="n">writing</span><span class="o">,</span> <span class="n">software</span>
</span><span class='line'> <span class="o">*</span> <span class="n">distributed</span> <span class="n">under</span> <span class="n">the</span> <span class="n">License</span> <span class="n">is</span> <span class="n">distributed</span> <span class="n">on</span> <span class="n">an</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">AS</span> <span class="n">IS</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="n">BASIS</span><span class="o">,</span>
</span><span class='line'> <span class="o">*</span> <span class="n">WITHOUT</span> <span class="n">WARRANTIES</span> <span class="n">OR</span> <span class="n">CONDITIONS</span> <span class="n">OF</span> <span class="n">ANY</span> <span class="n">KIND</span><span class="o">,</span> <span class="n">either</span> <span class="n">express</span> <span class="n">or</span> <span class="n">implied</span><span class="o">.</span>
</span><span class='line'> <span class="o">*</span> <span class="n">See</span> <span class="n">the</span> <span class="n">License</span> <span class="k">for</span> <span class="n">the</span> <span class="n">specific</span> <span class="n">language</span> <span class="n">governing</span> <span class="n">permissions</span> <span class="n">and</span>
</span><span class='line'> <span class="o">*</span> <span class="n">limitations</span> <span class="n">under</span> <span class="n">the</span> <span class="n">License</span><span class="o">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">hellojni</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.TextView</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloJni</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="c1">//HelloJni继承自活动对象事件调度类</span>
</span><span class='line'><span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/** Called when the activity is first created. */</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="c1">//重写onCreate方法</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Create a TextView and set its content.</span>
</span><span class='line'><span class="cm">     * the text is retrieved by calling a native</span>
</span><span class='line'><span class="cm">     * function.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">TextView</span>  <span class="n">tv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TextView</span><span class="o">(</span><span class="k">this</span><span class="o">);</span> <span class="c1">//创建一个文字view</span>
</span><span class='line'>    <span class="n">tv</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span> <span class="n">stringFromJNI</span><span class="o">()</span> <span class="o">);</span> <span class="c1">//调用自定义方法stringFromJNI</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">tv</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* A native method that is implemented by the</span>
</span><span class='line'><span class="cm"> * &#39;hello-jni&#39; native library, which is packaged</span>
</span><span class='line'><span class="cm"> * with this application.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">native</span> <span class="n">String</span>  <span class="nf">stringFromJNI</span><span class="o">();</span> <span class="c1">//有native代表是c++的代码，这里仅仅是声明</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* This is another native method declaration that is *not*</span>
</span><span class='line'><span class="cm"> * implemented by &#39;hello-jni&#39;. This is simply to show that</span>
</span><span class='line'><span class="cm"> * you can declare as many native methods in your Java code</span>
</span><span class='line'><span class="cm"> * as you want, their implementation is searched in the</span>
</span><span class='line'><span class="cm"> * currently loaded native libraries only the first time</span>
</span><span class='line'><span class="cm"> * you call them.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Trying to call this function will result in a</span>
</span><span class='line'><span class="cm"> * java.lang.UnsatisfiedLinkError exception !</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">native</span> <span class="n">String</span>  <span class="nf">unimplementedStringFromJNI</span><span class="o">();</span> <span class="c1">//同样是C++的代码</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* this is used to load the &#39;hello-jni&#39; library on application</span>
</span><span class='line'><span class="cm"> * startup. The library has already been unpacked into</span>
</span><span class='line'><span class="cm"> * /data/data/com.example.hellojni/lib/libhello-jni.so at</span>
</span><span class='line'><span class="cm"> * installation time by the package manager.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">&quot;hello-jni&quot;</span><span class="o">);</span> <span class="c1">//调用刚才ndk生成的hello-jni.so</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
C++的代码暂时就不看了，一步一步来，我们还没装cdt，不急着搞清楚，有兴趣的到文章最后去看链接</p>

<h3>什么是CDT</h3>

<blockquote><p>Eclipse CDT是 Eclipse 插件，它将把 Eclipse 转换为功能强大的 C/C++ IDE。它被设计为将 Java 开发人员喜爱的许多 Eclipse 优秀功能提供给 C/C++ 开发人员，例如项目管理、集成调试、类向导、自动构建、语法着色和代码完成。当 Eclipse 被用作 Java IDE 时，它将利用 JDK 并与之集成。同样地，CDT 将利用标准的 C/C++ 工具并与之集成，例如 g++、make 和 GDB。这使得 CDT 在 Linux 中变得非常流行，这些工具都可在 Linux 中使用并用于大多数 C++ 开发。可以在 Windows 上设置 CDT 以使用相同的工具。目前还在努力将 CDT 与 Microsoft 的 C++ 工具结合使用，以使 CDT 对 Windows C++ 开发人员更有吸引力。总之有了cdt，可以在一个工程里，同时开发C/C++的native代码的java外壳，并且2种代码能够同时编译。</p></blockquote>

<h3>在Eclipse编辑器中集成CDT</h3>

<p>首先在此下载<a href="http://www.eclipse.org/cdt/downloads.php">http://www.eclipse.org/cdt/downloads.php</a><br>
直接下载cdt-master-x.x.x.zip的就可以了，我的是Eclipse版本为Kepler，可以下载以下版本<br>
<a href="http://www.eclipse.org/downloads/download.php?file=/tools/cdt/releases/kepler/sr2/cdt-master-8.3.0.zip">http://www.eclipse.org/downloads/download.php?file=/tools/cdt/releases/kepler/sr2/cdt-master-8.3.0.zip</a></p>

<p><img src="/images/evoup/android_cdt_ndk/13.png" alt="Alt text" /></p>

<p>然后通过Eclipse &ndash;> Help &ndash;> Install New Software &ndash;> add &ndash;> Achive,选择下载的zip文件</p>

<p><img src="/images/evoup/android_cdt_ndk/14.png" alt="Alt text" /></p>

<p>等待安装完成<br>
<img src="/images/evoup/android_cdt_ndk/15.png" alt="Alt text" /></p>

<p>安装完成后如果在Eclipse中可以创建C++项目证明安装完成<br>
<img src="/images/evoup/android_cdt_ndk/16.png" alt="Alt text" /></p>

<h3>安装Sequoyah插件（事实证明，kepler+ndk9已经无须这个插件了）</h3>

<p><del> 官网地址 </del> <br>
<del> <a href="https://projects.eclipse.org/projects/tools.sequoyah">https://projects.eclipse.org/projects/tools.sequoyah</a> </del></p>

<p><del> 这个地址其实已经作废了,正确的连接如下 </del> <br>
<del> <a href="http://www.mirrorservice.org/sites/download.eclipse.org/eclipseMirror/sequoyah/updates/2.0/">http://www.mirrorservice.org/sites/download.eclipse.org/eclipseMirror/sequoyah/updates/2.0/</a> </del> <br>
<del> Eclipse-Help-Install New Software-Add,在Location里输入上面的地址，name就指定为sequoyah</del> <br>
<img src="/images/evoup/android_cdt_ndk/17.png" alt="Alt text" />
<img src="/images/evoup/android_cdt_ndk/18.png" alt="Alt text" /></p>

<p><del> 然后取消下面的Group By Item，之后选择Select All，按下Next安装（没有研究下去，发现这个要求的eclipse版本为3.7以下，我的kepler为4.3，不得以暂时放弃） </del></p>

<h3>JNI编译环境配置</h3>

<p>还是打开HelloJni这个项目，现在转换为C/C++的native的代码<br>
&ldquo;Eclipse->File->New->Other&rdquo;,选择"C/C++&ldquo;下的"Convert to a c/C++ Project(Add C/C++ Nature)&rdquo;,然后点击"Next"<br>
<img src="/images/evoup/android_cdt_ndk/19.png" alt="Alt text" /></p>

<p>然后在Makefile project中选择Cygwin GCC,点击Finish<br>
<img src="/images/evoup/android_cdt_ndk/20.png" alt="Alt text" /></p>

<p>右键项目的Properties，在"C/C++ Build"中取消默认的" Use default build command &ldquo;的打勾，在Build Command中输入对应bash加空格加ndk-build的路径，我这里是C:\android\android-ndk-r9d-windows-x86_64\android-ndk-r9d\ndk-build<br>
<code>sh
bash C:\android\android-ndk-r9d-windows-x86_64\android-ndk-r9d\ndk-build
</code>
<img src="/images/evoup/android_cdt_ndk/21.png" alt="Alt text" /></p>

<p>在"C/C++ General"的Paths and Symbols中：在Includes下add新的GNU C依赖路径,根据自己的avd（andriod virtual device）的版本设置对应的头文件，我这里是android17的，则C:\android\android-ndk-r9d-windows-x86_64\android-ndk-r9d\platforms\android-17\arch-arm\usr\include,其他项目可以安装实际环境酌情调整依赖头文件的版本<br>
<img src="/images/evoup/android_cdt_ndk/22.png" alt="Alt text" /></p>

<p>验证：
将“/HelloJni/jni/hello-jni.c”中的字符串“Hello from JNI !”如改为“Hello JNI from test!”，运行后在模拟器上输出的字符串改变即说明配置成功。<br>
<img src="/images/evoup/android_cdt_ndk/23.png" alt="Alt text" /></p>

<hr />

<h3>参考文章</h3>

<p>《Android NDK 安装与配置》
<a href="http://my.oschina.net/owen123456/blog/85658">http://my.oschina.net/owen123456/blog/85658</a></p>

<p>《Android: NDK编程入门笔记》
<a href="http://www.cnblogs.com/hibraincol/archive/2011/05/30/2063847.html">http://www.cnblogs.com/hibraincol/archive/2011/05/30/2063847.html</a></p>
]]></content>
  </entry>
  
</feed>
