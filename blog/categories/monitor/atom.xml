<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: monitor | Evoup`s Blog]]></title>
  <link href="http://evoupsight.com/blog/categories/monitor/atom.xml" rel="self"/>
  <link href="http://evoupsight.com/"/>
  <updated>2016-08-03T12:49:10+08:00</updated>
  <id>http://evoupsight.com/</id>
  <author>
    <name><![CDATA[Evoup`s Blog]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[基于netsnmp的agent开发]]></title>
    <link href="http://evoupsight.com/blog/2014/08/03/netsnmp-daemon-dev/"/>
    <updated>2014-08-03T17:59:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/08/03/netsnmp-daemon-dev</id>
    <content type="html"><![CDATA[<p>防止遗忘，实现一个snmp agent，基于ucd-netsnmp，可以无需netsnmp单独运行，加了点获取其他信息的代码。
<!-- more --></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>struct.h </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifndef UCD_SNMP_STRUCT</span>
</span><span class='line'><span class="cp">#define UCD_SNMP_STRUCT&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;define-strmax-1024&quot;</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">STRMAX</span> <span class="mi">1024</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">#</span><span class="n">define</span> <span class="n">SHPROC</span> <span class="mi">1</span>
</span><span class='line'><span class="cp">#define EXECPROC 2</span>
</span><span class='line'><span class="cp">#define PASSTHRU 3</span>
</span><span class='line'><span class="cp">#define PASSTHRU_PERSIST 4</span>
</span><span class='line'><span class="cp">#define MIBMAX 30&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">extensible</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span>            <span class="n">name</span><span class="p">[</span><span class="n">STRMAX</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">char</span>            <span class="n">command</span><span class="p">[</span><span class="n">STRMAX</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">char</span>            <span class="n">fixcmd</span><span class="p">[</span><span class="n">STRMAX</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span>             <span class="n">type</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span>             <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span>            <span class="n">output</span><span class="p">[</span><span class="n">STRMAX</span><span class="p">];</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">extensible</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span>   <span class="n">miboid</span><span class="p">[</span><span class="n">MIBMAX</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">size_t</span>          <span class="n">miblen</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span>             <span class="n">pid</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">myproc</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span>            <span class="n">name</span><span class="p">[</span><span class="n">STRMAX</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">char</span>            <span class="n">fixcmd</span><span class="p">[</span><span class="n">STRMAX</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span>             <span class="n">min</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span>             <span class="n">max</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">myproc</span>  <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * struct mibinfo </span>
</span><span class='line'><span class="cm"> * {</span>
</span><span class='line'><span class="cm"> * int numid;</span>
</span><span class='line'><span class="cm"> * unsigned long mibid[10];</span>
</span><span class='line'><span class="cm"> * char &lt;em&gt;name;</span>
</span><span class='line'><span class="cm"> * void (&lt;/em&gt;handle) ();</span>
</span><span class='line'><span class="cm"> * };</span>
</span><span class='line'><span class="cm"> */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;endif&quot;</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>example.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">```</span><span class="n">c</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> *  Template MIB group interface - example.h</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Don’t include ourselves twice </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#ifndef _MIBGROUP_EXAMPLE_H</span>
</span><span class='line'><span class="cp">#define _MIBGROUP_EXAMPLE_H&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;ifdef-cplusplus&quot;</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">__cplusplus</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">extern</span> <span class="err">“</span><span class="n">C</span><span class="err">”</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#endif&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * We use &#39;header_generic&#39; from the util_funcs module,</span>
</span><span class='line'><span class="cm"> *  so make sure this module is included in the agent.</span>
</span><span class='line'><span class="cm"> */</span> <span class="n">config_require</span><span class="p">(</span><span class="n">util_funcs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Declare our publically-visible functions.</span>
</span><span class='line'><span class="cm"> * Typically, these will include the initialization and shutdown functions,</span>
</span><span class='line'><span class="cm"> *  the main request callback routine and any writeable object methods.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Function prototypes are provided for the callback routine (&#39;FindVarMethod&#39;)</span>
</span><span class='line'><span class="cm"> *  and writeable object methods (&#39;WriteMethod&#39;).</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'> <span class="kt">void</span>     <span class="n">init_example</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'> <span class="n">FindVarMethod</span> <span class="n">var_example</span><span class="p">;</span>
</span><span class='line'> <span class="n">WriteMethod</span> <span class="n">write_exampleint</span><span class="p">;</span>
</span><span class='line'> <span class="n">WriteMethod</span> <span class="n">write_exampletrap</span><span class="p">;</span>
</span><span class='line'> <span class="n">WriteMethod</span> <span class="n">write_exampletrap2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Magic number definitions.</span>
</span><span class='line'><span class="cm"> * These must be unique for each object implemented within a</span>
</span><span class='line'><span class="cm"> *  single mib module callback routine.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Typically, these will be the last OID sub-component for</span>
</span><span class='line'><span class="cm"> *  each entry, or integers incrementing from 1.</span>
</span><span class='line'><span class="cm"> *  (which may well result in the same values anyway).</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Here, the second and third objects are form a &#39;sub-table&#39; and</span>
</span><span class='line'><span class="cm"> *   the magic numbers are chosen to match these OID sub-components.</span>
</span><span class='line'><span class="cm"> * This is purely for programmer convenience.</span>
</span><span class='line'><span class="cm"> * All that really matters is that the numbers are unique.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;defineexamplestring1&quot;</span><span class="o">&gt;</span><span class="n">define</span>	<span class="n">EXAMPLESTRING</span>		<span class="mi">1</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">#</span><span class="n">define</span> <span class="n">EXAMPLEINTEGER</span>		<span class="mi">21</span>
</span><span class='line'><span class="cp">#define	EXAMPLEOBJECTID         22</span>
</span><span class='line'><span class="cp">#define EXAMPLETIMETICKS	3</span>
</span><span class='line'><span class="cp">#define	EXAMPLEIPADDRESS        4</span>
</span><span class='line'><span class="cp">#define EXAMPLECOUNTER		5</span>
</span><span class='line'><span class="cp">#define	EXAMPLEGAUGE            6</span>
</span><span class='line'><span class="cp">#define	EXAMPLETRIGGERTRAP      7</span>
</span><span class='line'><span class="cp">#define	EXAMPLETRIGGERTRAP2     8&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;ifdef-cplusplus-1&quot;</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">__cplusplus</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="cp">#endif&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;endif---------------------------mibgroupexampleh-&quot;</span><span class="o">&gt;</span><span class="n">endif</span>                          <span class="cm">/* _MIBGROUP_EXAMPLE_H */</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>example.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
<span class='line-number'>592</span>
<span class='line-number'>593</span>
<span class='line-number'>594</span>
<span class='line-number'>595</span>
<span class='line-number'>596</span>
<span class='line-number'>597</span>
<span class='line-number'>598</span>
<span class='line-number'>599</span>
<span class='line-number'>600</span>
<span class='line-number'>601</span>
<span class='line-number'>602</span>
<span class='line-number'>603</span>
<span class='line-number'>604</span>
<span class='line-number'>605</span>
<span class='line-number'>606</span>
<span class='line-number'>607</span>
<span class='line-number'>608</span>
<span class='line-number'>609</span>
<span class='line-number'>610</span>
<span class='line-number'>611</span>
<span class='line-number'>612</span>
<span class='line-number'>613</span>
<span class='line-number'>614</span>
<span class='line-number'>615</span>
<span class='line-number'>616</span>
<span class='line-number'>617</span>
<span class='line-number'>618</span>
<span class='line-number'>619</span>
<span class='line-number'>620</span>
<span class='line-number'>621</span>
<span class='line-number'>622</span>
<span class='line-number'>623</span>
<span class='line-number'>624</span>
<span class='line-number'>625</span>
<span class='line-number'>626</span>
<span class='line-number'>627</span>
<span class='line-number'>628</span>
<span class='line-number'>629</span>
<span class='line-number'>630</span>
<span class='line-number'>631</span>
<span class='line-number'>632</span>
<span class='line-number'>633</span>
<span class='line-number'>634</span>
<span class='line-number'>635</span>
<span class='line-number'>636</span>
<span class='line-number'>637</span>
<span class='line-number'>638</span>
<span class='line-number'>639</span>
<span class='line-number'>640</span>
<span class='line-number'>641</span>
<span class='line-number'>642</span>
<span class='line-number'>643</span>
<span class='line-number'>644</span>
<span class='line-number'>645</span>
<span class='line-number'>646</span>
<span class='line-number'>647</span>
<span class='line-number'>648</span>
<span class='line-number'>649</span>
<span class='line-number'>650</span>
<span class='line-number'>651</span>
<span class='line-number'>652</span>
<span class='line-number'>653</span>
<span class='line-number'>654</span>
<span class='line-number'>655</span>
<span class='line-number'>656</span>
<span class='line-number'>657</span>
<span class='line-number'>658</span>
<span class='line-number'>659</span>
<span class='line-number'>660</span>
<span class='line-number'>661</span>
<span class='line-number'>662</span>
<span class='line-number'>663</span>
<span class='line-number'>664</span>
<span class='line-number'>665</span>
<span class='line-number'>666</span>
<span class='line-number'>667</span>
<span class='line-number'>668</span>
<span class='line-number'>669</span>
<span class='line-number'>670</span>
<span class='line-number'>671</span>
<span class='line-number'>672</span>
<span class='line-number'>673</span>
<span class='line-number'>674</span>
<span class='line-number'>675</span>
<span class='line-number'>676</span>
<span class='line-number'>677</span>
<span class='line-number'>678</span>
<span class='line-number'>679</span>
<span class='line-number'>680</span>
<span class='line-number'>681</span>
<span class='line-number'>682</span>
<span class='line-number'>683</span>
<span class='line-number'>684</span>
<span class='line-number'>685</span>
<span class='line-number'>686</span>
<span class='line-number'>687</span>
<span class='line-number'>688</span>
<span class='line-number'>689</span>
<span class='line-number'>690</span>
<span class='line-number'>691</span>
<span class='line-number'>692</span>
<span class='line-number'>693</span>
<span class='line-number'>694</span>
<span class='line-number'>695</span>
<span class='line-number'>696</span>
<span class='line-number'>697</span>
<span class='line-number'>698</span>
<span class='line-number'>699</span>
<span class='line-number'>700</span>
<span class='line-number'>701</span>
<span class='line-number'>702</span>
<span class='line-number'>703</span>
<span class='line-number'>704</span>
<span class='line-number'>705</span>
<span class='line-number'>706</span>
<span class='line-number'>707</span>
<span class='line-number'>708</span>
<span class='line-number'>709</span>
<span class='line-number'>710</span>
<span class='line-number'>711</span>
<span class='line-number'>712</span>
<span class='line-number'>713</span>
<span class='line-number'>714</span>
<span class='line-number'>715</span>
<span class='line-number'>716</span>
<span class='line-number'>717</span>
<span class='line-number'>718</span>
<span class='line-number'>719</span>
<span class='line-number'>720</span>
<span class='line-number'>721</span>
<span class='line-number'>722</span>
<span class='line-number'>723</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> *  Template MIB group implementation - example.c</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * include important headers </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#include &amp;lt;net-snmp/net-snmp-config.h&amp;gt;</span>
</span><span class='line'><span class="cp">#if HAVE_STDLIB_H</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#if HAVE_STRING_H</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp">#include &lt;strings.h&gt;</span>
</span><span class='line'><span class="cp">#endif&lt;/strings.h&gt;&lt;/string.h&gt;&lt;/stdlib.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * needed by util_funcs.h </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#if TIME_WITH_SYS_TIME</span>
</span><span class='line'><span class="cp"># ifdef WIN32</span>
</span><span class='line'><span class="cp">#  include &amp;lt;sys/timeb.h&amp;gt;</span>
</span><span class='line'><span class="cp"># else</span>
</span><span class='line'><span class="cp">#  include &amp;lt;sys/time.h&amp;gt;</span>
</span><span class='line'><span class="cp"># endif</span>
</span><span class='line'><span class="cp"># include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp"># if HAVE_SYS_TIME_H</span>
</span><span class='line'><span class="cp">#  include &amp;lt;sys/time.h&amp;gt;</span>
</span><span class='line'><span class="cp"># else</span>
</span><span class='line'><span class="cp">#  include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp"># endif</span>
</span><span class='line'><span class="cp">#endif&lt;/time.h&gt;&lt;/time.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;if-havewinsockh&quot;</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">HAVE_WINSOCK_H</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">winsock</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#if HAVE_NETINET_IN_H</span>
</span><span class='line'><span class="cp">#include &amp;lt;netinet/in.h&amp;gt;</span>
</span><span class='line'><span class="cp">#endif&lt;/winsock.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;include-net-snmpnet-snmp-includesh&quot;</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">net</span><span class="o">-</span><span class="n">snmp</span><span class="o">/</span><span class="n">net</span><span class="o">-</span><span class="n">snmp</span><span class="o">-</span><span class="n">includes</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">net</span><span class="o">-</span><span class="n">snmp</span><span class="o">/</span><span class="n">agent</span><span class="o">/</span><span class="n">net</span><span class="o">-</span><span class="n">snmp</span><span class="o">-</span><span class="n">agent</span><span class="o">-</span><span class="n">includes</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * header_generic() comes from here </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#include “/usr/include/net-snmp/agent/util_funcs.h”&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * include our .h file </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#include “example.h”&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/*</span>
</span><span class='line'><span class="cm">    *  Certain objects can be set via configuration file directives.</span>
</span><span class='line'><span class="cm">    *  These variables hold the values for such objects, as they need to</span>
</span><span class='line'><span class="cm">    *   be accessible to both the config handlers, and the callback routine.</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'><span class="cp">#define EXAMPLE_STR_LEN	300</span>
</span><span class='line'><span class="cp">#define EXAMPLE_STR_DEFAULT	“life the universe and everything”</span>
</span><span class='line'><span class="kt">int</span>             <span class="n">example_int</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span>            <span class="n">example_str</span><span class="p">[</span><span class="n">EXAMPLE_STR_LEN</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Forward declarations for the config handlers </span>
</span><span class='line'><span class="cm">     */</span> <span class="kt">void</span>            <span class="n">example_parse_config_exampleint</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">token</span><span class="p">,</span>
</span><span class='line'>                                            <span class="kt">char</span> <span class="o">*</span><span class="n">cptr</span><span class="p">);</span> <span class="kt">void</span>            <span class="nf">example_parse_config_examplestr</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">token</span><span class="p">,</span>
</span><span class='line'>                                            <span class="kt">char</span> <span class="o">*</span><span class="n">cptr</span><span class="p">);</span> <span class="kt">void</span>            <span class="nf">example_free_config_exampleint</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span> <span class="kt">void</span>            <span class="nf">example_free_config_examplestr</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*********************</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Initialisation &amp;amp; common implementation functions</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *********************/</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * This array structure defines a representation of the</span>
</span><span class='line'><span class="cm"> *  MIB being implemented.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The type of the array is &#39;struct variableN&#39;, where N is</span>
</span><span class='line'><span class="cm"> *  large enough to contain the longest OID sub-component</span>
</span><span class='line'><span class="cm"> *  being loaded.  This will normally be the maximum value</span>
</span><span class='line'><span class="cm"> *  of the fifth field in each line.  In this case, the second</span>
</span><span class='line'><span class="cm"> *  and third entries are both of size 2, so we&#39;re using</span>
</span><span class='line'><span class="cm"> *  &#39;struct variable2&#39;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The supported values for N are listed in &amp;lt;agent/var_struct.h&amp;gt;</span>
</span><span class='line'><span class="cm"> *  If the value you need is not listed there, simply use the</span>
</span><span class='line'><span class="cm"> *  next largest that is.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The format of each line is as follows</span>
</span><span class='line'><span class="cm"> *  (using the first entry as an example):</span>
</span><span class='line'><span class="cm"> *      1: EXAMPLESTRING:</span>
</span><span class='line'><span class="cm"> *          The magic number defined in the example header file.</span>
</span><span class='line'><span class="cm"> *          This is passed to the callback routine and is used</span>
</span><span class='line'><span class="cm"> *            to determine which object is being queried.</span>
</span><span class='line'><span class="cm"> *      2: ASN_OCTET_STR:</span>
</span><span class='line'><span class="cm"> *          The type of the object.</span>
</span><span class='line'><span class="cm"> *          Valid types are listed in &amp;lt;snmp_impl.h&amp;gt;</span>
</span><span class='line'><span class="cm"> *      3: RONLY (or RWRITE):</span>
</span><span class='line'><span class="cm"> *          Whether this object can be SET or not.</span>
</span><span class='line'><span class="cm"> *      4: var_example:</span>
</span><span class='line'><span class="cm"> *          The callback routine, used when the object is queried.</span>
</span><span class='line'><span class="cm"> *          This will usually be the same for all objects in a module</span>
</span><span class='line'><span class="cm"> *            and is typically defined later in this file.</span>
</span><span class='line'><span class="cm"> *      5: 1:</span>
</span><span class='line'><span class="cm"> *          The length of the OID sub-component (the next field)</span>
</span><span class='line'><span class="cm"> *      6: {1}:</span>
</span><span class='line'><span class="cm"> *          The OID sub-components of this entry.</span>
</span><span class='line'><span class="cm"> *          In other words, the bits of the full OID that differ</span>
</span><span class='line'><span class="cm"> *            between the various entries of this array.</span>
</span><span class='line'><span class="cm"> *          This value is appended to the common prefix (defined later)</span>
</span><span class='line'><span class="cm"> *            to obtain the full OID of each entry.</span>
</span><span class='line'><span class="cm"> */</span> <span class="k">struct</span> <span class="n">variable2</span> <span class="n">example_variables</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="p">{</span><span class="n">EXAMPLESTRING</span><span class="p">,</span> <span class="n">ASN_OCTET_STR</span><span class="p">,</span> <span class="n">RONLY</span><span class="p">,</span> <span class="n">var_example</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">{</span><span class="mi">1</span><span class="p">}},</span>
</span><span class='line'><span class="p">{</span><span class="n">EXAMPLEINTEGER</span><span class="p">,</span> <span class="n">ASN_INTEGER</span><span class="p">,</span> <span class="n">RWRITE</span><span class="p">,</span> <span class="n">var_example</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">}},</span>
</span><span class='line'><span class="p">{</span><span class="n">EXAMPLEOBJECTID</span><span class="p">,</span> <span class="n">ASN_OBJECT_ID</span><span class="p">,</span> <span class="n">RONLY</span><span class="p">,</span> <span class="n">var_example</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">}},</span>
</span><span class='line'><span class="p">{</span><span class="n">EXAMPLETIMETICKS</span><span class="p">,</span> <span class="n">ASN_TIMETICKS</span><span class="p">,</span> <span class="n">RONLY</span><span class="p">,</span> <span class="n">var_example</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">{</span><span class="mi">3</span><span class="p">}},</span>
</span><span class='line'><span class="p">{</span><span class="n">EXAMPLEIPADDRESS</span><span class="p">,</span> <span class="n">ASN_IPADDRESS</span><span class="p">,</span> <span class="n">RONLY</span><span class="p">,</span> <span class="n">var_example</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">{</span><span class="mi">4</span><span class="p">}},</span>
</span><span class='line'><span class="p">{</span><span class="n">EXAMPLECOUNTER</span><span class="p">,</span> <span class="n">ASN_COUNTER</span><span class="p">,</span> <span class="n">RONLY</span><span class="p">,</span> <span class="n">var_example</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">{</span><span class="mi">5</span><span class="p">}},</span>
</span><span class='line'><span class="p">{</span><span class="n">EXAMPLEGAUGE</span><span class="p">,</span> <span class="n">ASN_GAUGE</span><span class="p">,</span> <span class="n">RONLY</span><span class="p">,</span> <span class="n">var_example</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">{</span><span class="mi">6</span><span class="p">}},</span>
</span><span class='line'><span class="p">{</span><span class="n">EXAMPLETRIGGERTRAP</span><span class="p">,</span> <span class="n">ASN_INTEGER</span><span class="p">,</span> <span class="n">RWRITE</span><span class="p">,</span> <span class="n">var_example</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">{</span><span class="mi">7</span><span class="p">}},</span>
</span><span class='line'><span class="p">{</span><span class="n">EXAMPLETRIGGERTRAP2</span><span class="p">,</span> <span class="n">ASN_INTEGER</span><span class="p">,</span> <span class="n">RWRITE</span><span class="p">,</span> <span class="n">var_example</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">{</span><span class="mi">8</span><span class="p">}}</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * This array defines the OID of the top of the mib tree that we&#39;re</span>
</span><span class='line'><span class="cm"> *  registering underneath.</span>
</span><span class='line'><span class="cm"> * Note that this needs to be the correct size for the OID being </span>
</span><span class='line'><span class="cm"> *  registered, so that the length of the OID can be calculated.</span>
</span><span class='line'><span class="cm"> *  The format given here is the simplest way to achieve this.</span>
</span><span class='line'><span class="cm"> */</span> <span class="n">oid</span>             <span class="n">example_variables_oid</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2021</span><span class="p">,</span> <span class="mi">254</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * This function is called at the time the agent starts up</span>
</span><span class='line'><span class="cm"> *  to do any initializations that might be required.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * In theory it is optional and can be omitted if no</span>
</span><span class='line'><span class="cm"> *  initialization is needed.  In practise, every module</span>
</span><span class='line'><span class="cm"> *  will need to register itself (or the objects being</span>
</span><span class='line'><span class="cm"> *  implemented will not appear in the MIB tree), and this</span>
</span><span class='line'><span class="cm"> *  registration is typically done here.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * If this function is added or removed, you must re-run</span>
</span><span class='line'><span class="cm"> *  the configure script, to detect this change.</span>
</span><span class='line'><span class="cm"> */</span> <span class="kt">void</span> <span class="nf">init_example</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Register ourselves with the agent to handle our mib tree.</span>
</span><span class='line'><span class="cm"> * The arguments are:</span>
</span><span class='line'><span class="cm"> *    descr:   A short description of the mib group being loaded.</span>
</span><span class='line'><span class="cm"> *    var:     The variable structure to load.</span>
</span><span class='line'><span class="cm"> *                  (the name of the variable structure defined above)</span>
</span><span class='line'><span class="cm"> *    vartype: The type of this variable structure</span>
</span><span class='line'><span class="cm"> *    theoid:  The OID pointer this MIB is being registered underneath.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">REGISTER_MIB</span><span class="p">(</span><span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="n">example_variables</span><span class="p">,</span> <span class="n">variable2</span><span class="p">,</span>
</span><span class='line'>             <span class="n">example_variables_oid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> *  Register config handlers for the two objects that can be set</span>
</span><span class='line'><span class="cm"> *   via configuration file directive.</span>
</span><span class='line'><span class="cm"> *  Also set a default value for the string object.  Note that the</span>
</span><span class='line'><span class="cm"> *   example integer variable was initialised above.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">strncpy</span><span class="p">(</span><span class="n">example_str</span><span class="p">,</span> <span class="n">EXAMPLE_STR_DEFAULT</span><span class="p">,</span> <span class="n">EXAMPLE_STR_LEN</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">snmpd_register_config_handler</span><span class="p">(</span><span class="s">&quot;exampleint&quot;</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">example_parse_config_exampleint</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">example_free_config_exampleint</span><span class="p">,</span>
</span><span class='line'>                              <span class="s">&quot;exampleint value&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">snmpd_register_config_handler</span><span class="p">(</span><span class="s">&quot;examplestr&quot;</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">example_parse_config_examplestr</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">example_free_config_examplestr</span><span class="p">,</span>
</span><span class='line'>                              <span class="s">&quot;examplestr value&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">snmpd_register_config_handler</span><span class="p">(</span><span class="s">&quot;examplestring&quot;</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">example_parse_config_examplestr</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">example_free_config_examplestr</span><span class="p">,</span>
</span><span class='line'>                              <span class="s">&quot;examplestring value&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * One common requirement is to read values from the kernel.</span>
</span><span class='line'><span class="cm"> * This is usually initialised here, to speed up access when the</span>
</span><span class='line'><span class="cm"> *  information is read in, as a response to an incoming request.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * This module doesn&#39;t actually use this mechanism,</span>
</span><span class='line'><span class="cm"> * so this call is commented out here.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * auto_nlist( &quot;example_symbol&quot;, 0, 0 ); </span>
</span><span class='line'><span class="cm"> */</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*********************</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Configuration file handling functions</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *********************/</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span>
</span><span class='line'><span class="n">example_parse_config_exampleint</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">token</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">cptr</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">example_int</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">cptr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span>
</span><span class='line'><span class="n">example_parse_config_examplestr</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">token</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">cptr</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">/&lt;/</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>     <span class="o">*</span> <span class="n">Make</span> <span class="n">sure</span> <span class="n">the</span> <span class="n">string</span> <span class="n">fits</span> <span class="n">in</span> <span class="n">the</span> <span class="n">space</span> <span class="n">allocated</span> <span class="k">for</span> <span class="n">it</span><span class="p">.</span>
</span><span class='line'>     <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">cptr</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">EXAMPLE_STR_LEN</span><span class="p">)</span>
</span><span class='line'>        <span class="n">strcpy</span><span class="p">(</span><span class="n">example_str</span><span class="p">,</span> <span class="n">cptr</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">/&lt;/</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>         <span class="o">*</span> <span class="n">Truncate</span> <span class="n">the</span> <span class="n">string</span> <span class="k">if</span> <span class="n">necessary</span><span class="p">.</span>
</span><span class='line'>         <span class="o">*</span> <span class="n">An</span> <span class="n">alternative</span> <span class="n">approach</span> <span class="n">would</span> <span class="n">be</span> <span class="n">to</span> <span class="n">log</span> <span class="n">an</span> <span class="n">error</span><span class="p">,</span>
</span><span class='line'>         <span class="o">*</span>  <span class="n">and</span> <span class="n">discard</span> <span class="n">this</span> <span class="n">value</span> <span class="n">altogether</span><span class="p">.</span>
</span><span class='line'>         <span class="err">*/</span>
</span><span class='line'>        <span class="n">strncpy</span><span class="p">(</span><span class="n">example_str</span><span class="p">,</span> <span class="n">cptr</span><span class="p">,</span> <span class="n">EXAMPLE_STR_LEN</span> <span class="o">-</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>        <span class="n">example_str</span><span class="p">[</span><span class="n">EXAMPLE_STR_LEN</span> <span class="o">-</span> <span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">strcat</span><span class="p">(</span><span class="n">example_str</span><span class="p">,</span> <span class="err">“…”</span><span class="p">);</span>
</span><span class='line'>        <span class="n">example_str</span><span class="p">[</span><span class="n">EXAMPLE_STR_LEN</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * We don&#39;t need to do anything special when closing down </span>
</span><span class='line'><span class="cm">     */</span> <span class="kt">void</span> <span class="n">example_free_config_exampleint</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span>
</span><span class='line'><span class="n">example_free_config_examplestr</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="cm">/*********************</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  System specific implementation functions</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *********************/</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Define the callback function used in the example_variables structure.</span>
</span><span class='line'><span class="cm"> * This is called whenever an incoming request refers to an object</span>
</span><span class='line'><span class="cm"> *  within this sub-tree.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Four of the parameters are used to pass information in.</span>
</span><span class='line'><span class="cm"> * These are:</span>
</span><span class='line'><span class="cm"> *    vp      The entry from the &#39;example_variables&#39; array for the</span>
</span><span class='line'><span class="cm"> *             object being queried.</span>
</span><span class='line'><span class="cm"> *    name    The OID from the request.</span>
</span><span class='line'><span class="cm"> *    length  The length of this OID.</span>
</span><span class='line'><span class="cm"> *    exact   A flag to indicate whether this is an &#39;exact&#39; request</span>
</span><span class='line'><span class="cm"> *             (GET/SET) or an &#39;inexact&#39; one (GETNEXT/GETBULK).</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Four of the parameters are used to pass information back out.</span>
</span><span class='line'><span class="cm"> * These are:</span>
</span><span class='line'><span class="cm"> *    name     The OID being returned.</span>
</span><span class='line'><span class="cm"> *    length   The length of this OID.</span>
</span><span class='line'><span class="cm"> *    var_len  The length of the answer being returned.</span>
</span><span class='line'><span class="cm"> *    write_method   A pointer to the SET function for this object.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Note that name &amp;amp; length serve a dual purpose in both roles.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">u_char</span>         <span class="o">*</span>
</span><span class='line'><span class="n">var_example</span><span class="p">(</span><span class="k">struct</span> <span class="n">variable</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">vp</span><span class="p">,</span>
</span><span class='line'>            <span class="n">oid</span> <span class="o">*</span> <span class="n">name</span><span class="p">,</span>
</span><span class='line'>            <span class="kt">size_t</span> <span class="o">*</span> <span class="n">length</span><span class="p">,</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">exact</span><span class="p">,</span> <span class="kt">size_t</span> <span class="o">*</span> <span class="n">var_len</span><span class="p">,</span> <span class="n">WriteMethod</span> <span class="o">**</span> <span class="n">write_method</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">/&lt;/</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>     <span class="o">*</span>  <span class="n">The</span> <span class="n">result</span> <span class="n">returned</span> <span class="n">from</span> <span class="n">this</span> <span class="n">function</span> <span class="n">needs</span> <span class="n">to</span> <span class="n">be</span> <span class="n">a</span> <span class="n">pointer</span> <span class="n">to</span>
</span><span class='line'>     <span class="o">*</span>    <span class="k">static</span> <span class="n">data</span> <span class="p">(</span><span class="n">so</span> <span class="n">that</span> <span class="n">it</span> <span class="n">can</span> <span class="n">be</span> <span class="n">accessed</span> <span class="n">from</span> <span class="n">outside</span><span class="p">).</span>
</span><span class='line'>     <span class="o">*</span>  <span class="n">Define</span> <span class="n">suitable</span> <span class="n">variables</span> <span class="k">for</span> <span class="n">any</span> <span class="n">type</span> <span class="n">of</span> <span class="n">data</span> <span class="n">we</span> <span class="n">may</span> <span class="k">return</span><span class="p">.</span>
</span><span class='line'>     <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">char</span>     <span class="n">string</span><span class="p">[</span><span class="n">EXAMPLE_STR_LEN</span><span class="p">];</span>    <span class="o">/&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">EXAMPLESTRING</span>   <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">oid</span>      <span class="n">oid_ret</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span> <span class="o">/&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">EXAMPLEOBJECTID</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">long</span>     <span class="n">long_ret</span><span class="p">;</span>   <span class="o">/&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">everything</span> <span class="k">else</span> <span class="err">*/</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Before returning an answer, we need to check that the request</span>
</span><span class='line'><span class="cm"> *  refers to a valid instance of this object.  The utility routine</span>
</span><span class='line'><span class="cm"> *  &#39;header_generic&#39; can be used to do this for scalar objects.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * This routine &#39;header_simple_table&#39; does the same thing for &quot;simple&quot;</span>
</span><span class='line'><span class="cm"> *  tables. (See the AGENT.txt file for the definition of a simple table).</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Both these utility routines also set up default values for the</span>
</span><span class='line'><span class="cm"> *  return arguments (assuming the check succeeded).</span>
</span><span class='line'><span class="cm"> * The name and length are set suitably for the current object,</span>
</span><span class='line'><span class="cm"> *  var_len assumes that the result is an integer of some form,</span>
</span><span class='line'><span class="cm"> *  and write_method assumes that the object cannot be set.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * If these assumptions are correct, this callback routine simply</span>
</span><span class='line'><span class="cm"> * needs to return a pointer to the appropriate value (using &#39;long_ret&#39;).</span>
</span><span class='line'><span class="cm"> * Otherwise, &#39;var_len&#39; and/or &#39;write_method&#39; should be set suitably.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">DEBUGMSGTL</span><span class="p">((</span><span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="s">&quot;var_example entered</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">header_generic</span><span class="p">(</span><span class="n">vp</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">exact</span><span class="p">,</span> <span class="n">var_len</span><span class="p">,</span> <span class="n">write_method</span><span class="p">)</span> <span class="o">==</span>
</span><span class='line'>    <span class="n">MATCH_FAILED</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Many object will need to obtain data from the operating system in</span>
</span><span class='line'><span class="cm"> *  order to return the appropriate value.  Typically, this is done</span>
</span><span class='line'><span class="cm"> *  here - immediately following the &#39;header&#39; call, and before the</span>
</span><span class='line'><span class="cm"> *  switch statement. This is particularly appropriate if a single </span>
</span><span class='line'><span class="cm"> *  interface call can return data for all the objects supported.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * This example module does not rely on external data, so no such</span>
</span><span class='line'><span class="cm"> *  calls are needed in this case.  </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Now use the magic number from the variable pointer &#39;vp&#39; to</span>
</span><span class='line'><span class="cm"> *  select the particular object being queried.</span>
</span><span class='line'><span class="cm"> * In each case, one of the static objects is set up with the</span>
</span><span class='line'><span class="cm"> *  appropriate information, and returned mapped to a &#39;u_char *&#39;</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">switch</span> <span class="p">(</span><span class="n">vp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">magic</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="n">EXAMPLESTRING</span>:
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">example_str</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Note that the assumption that the answer will be an</span>
</span><span class='line'><span class="cm">     *  integer does not hold true in this case, so the length</span>
</span><span class='line'><span class="cm">     *  of the answer needs to be set explicitly.           </span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="o">*</span><span class="n">var_len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">string</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">u_char</span> <span class="o">*</span><span class="p">)</span> <span class="n">string</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">EXAMPLEINTEGER</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Here the length assumption is correct, but the</span>
</span><span class='line'><span class="cm">     *  object is writeable, so we need to set the</span>
</span><span class='line'><span class="cm">     *  write_method pointer as well as the current value.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">long_ret</span> <span class="o">=</span> <span class="n">example_int</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">write_method</span> <span class="o">=</span> <span class="n">write_exampleint</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">u_char</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">long_ret</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">EXAMPLEOBJECTID</span>:
</span><span class='line'>    <span class="n">oid_ret</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">oid_ret</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>    <span class="n">oid_ret</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
</span><span class='line'>    <span class="n">oid_ret</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">oid_ret</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>    <span class="n">oid_ret</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="n">oid_ret</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="n">oid_ret</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Again, the assumption regarding the answer length is wrong.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="o">*</span><span class="n">var_len</span> <span class="o">=</span> <span class="mi">8</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">oid</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">u_char</span> <span class="o">*</span><span class="p">)</span> <span class="n">oid_ret</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">EXAMPLETIMETICKS</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Here both assumptions are correct,</span>
</span><span class='line'><span class="cm">     *  so we just need to set up the answer.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">long_ret</span> <span class="o">=</span> <span class="mi">363136200</span><span class="p">;</span>   <span class="cm">/* 42 days, 42 minutes and 42.0 seconds */</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">u_char</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">long_ret</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">EXAMPLEIPADDRESS</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * ipaddresses get returned as a long.  ick </span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * we&#39;re returning 127.0.0.1 </span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">long_ret</span> <span class="o">=</span> <span class="n">ntohl</span><span class="p">(</span><span class="n">INADDR_LOOPBACK</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">u_char</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">long_ret</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">EXAMPLECOUNTER</span>:
</span><span class='line'>    <span class="n">long_ret</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">u_char</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">long_ret</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">EXAMPLEGAUGE</span>:
</span><span class='line'>    <span class="n">long_ret</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>          <span class="cm">/* Do we detect a theme running through these answers? */</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">u_char</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">long_ret</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">EXAMPLETRIGGERTRAP</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * This object is essentially &quot;write-only&quot;.</span>
</span><span class='line'><span class="cm">     * It only exists to trigger the sending of a trap.</span>
</span><span class='line'><span class="cm">     * Reading it will always return 0.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">long_ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">write_method</span> <span class="o">=</span> <span class="n">write_exampletrap</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">u_char</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">long_ret</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">EXAMPLETRIGGERTRAP2</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * This object is essentially &quot;write-only&quot;.</span>
</span><span class='line'><span class="cm">     * It only exists to trigger the sending of a v2 trap.</span>
</span><span class='line'><span class="cm">     * Reading it will always return 0.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">long_ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">write_method</span> <span class="o">=</span> <span class="n">write_exampletrap2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">u_char</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">long_ret</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">default:</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     *  This will only be triggered if there&#39;s a problem with</span>
</span><span class='line'><span class="cm">     *   the coding of the module.  SNMP requests that reference</span>
</span><span class='line'><span class="cm">     *   a non-existant OID will be directed elsewhere.</span>
</span><span class='line'><span class="cm">     *  If this branch is reached, log an error, so that</span>
</span><span class='line'><span class="cm">     *   the problem can be investigated.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">DEBUGMSGTL</span><span class="p">((</span><span class="s">&quot;snmpd&quot;</span><span class="p">,</span> <span class="s">&quot;unknown sub-id %d in examples/var_example</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">vp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">magic</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * If we fall through to here, fail by returning NULL.</span>
</span><span class='line'><span class="cm"> * This is essentially a continuation of the &#39;default&#39; case above.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*********************</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  Writeable object SET handling routines</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *********************/</span> <span class="kt">int</span> <span class="n">write_exampleint</span><span class="p">(</span><span class="kt">int</span> <span class="n">action</span><span class="p">,</span>
</span><span class='line'>             <span class="n">u_char</span> <span class="o">*</span> <span class="n">var_val</span><span class="p">,</span>
</span><span class='line'>             <span class="n">u_char</span> <span class="n">var_val_type</span><span class="p">,</span>
</span><span class='line'>             <span class="kt">size_t</span> <span class="n">var_val_len</span><span class="p">,</span>
</span><span class='line'>             <span class="n">u_char</span> <span class="o">*</span> <span class="n">statP</span><span class="p">,</span> <span class="n">oid</span> <span class="o">*</span> <span class="n">name</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">name_len</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Define an arbitrary maximum permissible value </span>
</span><span class='line'><span class="cm"> */</span> <span class="err">#</span><span class="n">define</span> <span class="n">MAX_EXAMPLE_INT</span>	<span class="mi">100</span>
</span><span class='line'><span class="k">static</span> <span class="kt">long</span>     <span class="n">intval</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="kt">long</span>     <span class="n">old_intval</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">switch</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="n">RESERVE1</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     *  Check that the value being set is acceptable</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">var_val_type</span> <span class="o">!=</span> <span class="n">ASN_INTEGER</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">DEBUGMSGTL</span><span class="p">((</span><span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="s">&quot;%x not integer type&quot;</span><span class="p">,</span> <span class="n">var_val_type</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SNMP_ERR_WRONGTYPE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">var_val_len</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">DEBUGMSGTL</span><span class="p">((</span><span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="s">&quot;wrong length %x&quot;</span><span class="p">,</span> <span class="n">var_val_len</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SNMP_ERR_WRONGLENGTH</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">intval</span> <span class="o">=</span> <span class="o">*</span><span class="p">((</span><span class="kt">long</span> <span class="o">*</span><span class="p">)</span> <span class="n">var_val</span><span class="p">);</span>
</span><span class='line'>	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;you have set the value :%ld&quot;</span><span class="p">,</span><span class="n">intval</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">intval</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">MAX_EXAMPLE_INT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">DEBUGMSGTL</span><span class="p">((</span><span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="s">&quot;wrong value %x&quot;</span><span class="p">,</span> <span class="n">intval</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SNMP_ERR_WRONGVALUE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">RESERVE2</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     *  This is conventially where any necesary</span>
</span><span class='line'><span class="cm">     *   resources are allocated (e.g. calls to malloc)</span>
</span><span class='line'><span class="cm">     *  Here, we are using static variables</span>
</span><span class='line'><span class="cm">     *   so don&#39;t need to worry about this.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">FREE</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     *  This is where any of the above resources</span>
</span><span class='line'><span class="cm">     *   are freed again (because one of the other</span>
</span><span class='line'><span class="cm">     *   values being SET failed for some reason).</span>
</span><span class='line'><span class="cm">     *  Again, since we are using static variables</span>
</span><span class='line'><span class="cm">     *   we don&#39;t need to worry about this either.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">ACTION</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     *  Set the variable as requested.</span>
</span><span class='line'><span class="cm">     *   Note that this may need to be reversed,</span>
</span><span class='line'><span class="cm">     *   so save any information needed to do this.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">old_intval</span> <span class="o">=</span> <span class="n">example_int</span><span class="p">;</span>
</span><span class='line'>    <span class="n">example_int</span> <span class="o">=</span> <span class="n">intval</span><span class="p">;</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">UNDO</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     *  Something failed, so re-set the</span>
</span><span class='line'><span class="cm">     *   variable to its previous value</span>
</span><span class='line'><span class="cm">     *  (and free any allocated resources).</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">example_int</span> <span class="o">=</span> <span class="n">old_intval</span><span class="p">;</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">COMMIT</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     *  Everything worked, so we can discard any</span>
</span><span class='line'><span class="cm">     *   saved information, and make the change</span>
</span><span class='line'><span class="cm">     *   permanent (e.g. write to the config file).</span>
</span><span class='line'><span class="cm">     *  We also free any allocated resources.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     *  In this case, there&#39;s nothing to do.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">SNMP_ERR_NOERROR</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
</span><span class='line'><span class="n">write_exampletrap</span><span class="p">(</span><span class="kt">int</span> <span class="n">action</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">u_char</span> <span class="o">*</span> <span class="n">var_val</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">u_char</span> <span class="n">var_val_type</span><span class="p">,</span>
</span><span class='line'>                  <span class="kt">size_t</span> <span class="n">var_val_len</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">u_char</span> <span class="o">*</span> <span class="n">statP</span><span class="p">,</span> <span class="n">oid</span> <span class="o">*</span> <span class="n">name</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">name_len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">long</span>            <span class="n">intval</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DEBUGMSGTL</span><span class="p">((</span><span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="s">&quot;write_exampletrap entered: action=%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">action</span><span class="p">));</span>
</span><span class='line'><span class="k">switch</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="n">RESERVE1</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     *  The only acceptable value is the integer 1</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">var_val_type</span> <span class="o">!=</span> <span class="n">ASN_INTEGER</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">DEBUGMSGTL</span><span class="p">((</span><span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="s">&quot;%x not integer type&quot;</span><span class="p">,</span> <span class="n">var_val_type</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SNMP_ERR_WRONGTYPE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">var_val_len</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">DEBUGMSGTL</span><span class="p">((</span><span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="s">&quot;wrong length %x&quot;</span><span class="p">,</span> <span class="n">var_val_len</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SNMP_ERR_WRONGLENGTH</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">intval</span> <span class="o">=</span> <span class="o">*</span><span class="p">((</span><span class="kt">long</span> <span class="o">*</span><span class="p">)</span> <span class="n">var_val</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">intval</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">DEBUGMSGTL</span><span class="p">((</span><span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="s">&quot;wrong value %x&quot;</span><span class="p">,</span> <span class="n">intval</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SNMP_ERR_WRONGVALUE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">RESERVE2</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * No resources are required.... </span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">FREE</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * ... so no resources need be freed </span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">ACTION</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     *  Having triggered the sending of a trap,</span>
</span><span class='line'><span class="cm">     *   it would be impossible to revoke this,</span>
</span><span class='line'><span class="cm">     *   so we can&#39;t actually invoke the action here.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">UNDO</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * We haven&#39;t done anything yet,</span>
</span><span class='line'><span class="cm">     * so there&#39;s nothing to undo </span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">COMMIT</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     *  Everything else worked, so it&#39;s now safe</span>
</span><span class='line'><span class="cm">     *   to trigger the trap.</span>
</span><span class='line'><span class="cm">     *  Note that this is *only* acceptable since</span>
</span><span class='line'><span class="cm">     *   the trap sending routines are &quot;failsafe&quot;.</span>
</span><span class='line'><span class="cm">     *  (In fact, they can fail, but they return no</span>
</span><span class='line'><span class="cm">     *   indication of this, which is the next best thing!)</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">DEBUGMSGTL</span><span class="p">((</span><span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="s">&quot;write_exampletrap sending the trap</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">send_easy_trap</span><span class="p">(</span><span class="n">SNMP_TRAP_ENTERPRISESPECIFIC</span><span class="p">,</span> <span class="mi">99</span><span class="p">);</span>
</span><span class='line'>    <span class="n">DEBUGMSGTL</span><span class="p">((</span><span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="s">&quot;write_exampletrap trap sent</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">SNMP_ERR_NOERROR</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * this documents how to send a SNMPv2 (and higher) trap via the</span>
</span><span class='line'><span class="cm"> * send_v2trap() API.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * Coding SNMP-v2 Trap:</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * The SNMPv2-Trap PDU contains at least a pair of object names and</span>
</span><span class='line'><span class="cm"> * values: - sysUpTime.0 whose value is the time in hundredths of a</span>
</span><span class='line'><span class="cm"> * second since the netwok management portion of system was last</span>
</span><span class='line'><span class="cm"> * reinitialized.  - snmpTrapOID.0 which is part of the trap group SNMPv2</span>
</span><span class='line'><span class="cm"> * MIB whose value is the object-id of the specific trap you have defined</span>
</span><span class='line'><span class="cm"> * in your own MIB.  Other variables can be added to caracterize the</span>
</span><span class='line'><span class="cm"> * trap.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * The function send_v2trap adds automaticallys the two objects but the</span>
</span><span class='line'><span class="cm"> * value of snmpTrapOID.0 is 0.0 by default. If you want to add your trap</span>
</span><span class='line'><span class="cm"> * name, you have to reconstruct this object and to add your own</span>
</span><span class='line'><span class="cm"> * variable.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
</span><span class='line'><span class="n">write_exampletrap2</span><span class="p">(</span><span class="kt">int</span> <span class="n">action</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">u_char</span> <span class="o">*</span> <span class="n">var_val</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">u_char</span> <span class="n">var_val_type</span><span class="p">,</span>
</span><span class='line'>                   <span class="kt">size_t</span> <span class="n">var_val_len</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">u_char</span> <span class="o">*</span> <span class="n">statP</span><span class="p">,</span> <span class="n">oid</span> <span class="o">*</span> <span class="n">name</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">name_len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">long</span>            <span class="n">intval</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * these variales will be used when we send the trap </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">oid</span>             <span class="n">objid_snmptrap</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span> <span class="p">};</span>     <span class="cm">/* snmpTrapOID.0 */</span>
</span><span class='line'><span class="n">oid</span>             <span class="n">demo_trap</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2021</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">990</span> <span class="p">};</span>  <span class="cm">/*demo-trap */</span>
</span><span class='line'><span class="n">oid</span>             <span class="n">example_string_oid</span><span class="p">[]</span> <span class="o">=</span>
</span><span class='line'>    <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2021</span><span class="p">,</span> <span class="mi">254</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'><span class="k">static</span> <span class="n">netsnmp_variable_list</span> <span class="n">var_trap</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">netsnmp_variable_list</span> <span class="n">var_obj</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">DEBUGMSGTL</span><span class="p">((</span><span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="s">&quot;write_exampletrap2 entered: action=%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">action</span><span class="p">));</span>
</span><span class='line'><span class="k">switch</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="n">RESERVE1</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     *  The only acceptable value is the integer 1</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">var_val_type</span> <span class="o">!=</span> <span class="n">ASN_INTEGER</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">DEBUGMSGTL</span><span class="p">((</span><span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="s">&quot;%x not integer type&quot;</span><span class="p">,</span> <span class="n">var_val_type</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SNMP_ERR_WRONGTYPE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">var_val_len</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">DEBUGMSGTL</span><span class="p">((</span><span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="s">&quot;wrong length %x&quot;</span><span class="p">,</span> <span class="n">var_val_len</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SNMP_ERR_WRONGLENGTH</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">intval</span> <span class="o">=</span> <span class="o">*</span><span class="p">((</span><span class="kt">long</span> <span class="o">*</span><span class="p">)</span> <span class="n">var_val</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">intval</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">DEBUGMSGTL</span><span class="p">((</span><span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="s">&quot;wrong value %x&quot;</span><span class="p">,</span> <span class="n">intval</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SNMP_ERR_WRONGVALUE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">RESERVE2</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * No resources are required.... </span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">FREE</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * ... so no resources need be freed </span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">ACTION</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     *  Having triggered the sending of a trap,</span>
</span><span class='line'><span class="cm">     *   it would be impossible to revoke this,</span>
</span><span class='line'><span class="cm">     *   so we can&#39;t actually invoke the action here.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">UNDO</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * We haven&#39;t done anything yet,</span>
</span><span class='line'><span class="cm">     * so there&#39;s nothing to undo </span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">COMMIT</span>:
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     *  Everything else worked, so it&#39;s now safe</span>
</span><span class='line'><span class="cm">     *   to trigger the trap.</span>
</span><span class='line'><span class="cm">     *  Note that this is *only* acceptable since</span>
</span><span class='line'><span class="cm">     *   the trap sending routines are &quot;failsafe&quot;.</span>
</span><span class='line'><span class="cm">     *  (In fact, they can fail, but they return no</span>
</span><span class='line'><span class="cm">     *   indication of this, which is the next best thing!)</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * trap definition objects </span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var_trap</span><span class="p">.</span><span class="n">next_variable</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">var_obj</span><span class="p">;</span>      <span class="cm">/* next variable */</span>
</span><span class='line'>    <span class="n">var_trap</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">objid_snmptrap</span><span class="p">;</span> <span class="cm">/* snmpTrapOID.0 */</span>
</span><span class='line'>    <span class="n">var_trap</span><span class="p">.</span><span class="n">name_length</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">objid_snmptrap</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">oid</span><span class="p">);</span>    <span class="cm">/* number of sub-ids */</span>
</span><span class='line'>    <span class="n">var_trap</span><span class="p">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">ASN_OBJECT_ID</span><span class="p">;</span>
</span><span class='line'>    <span class="n">var_trap</span><span class="p">.</span><span class="n">val</span><span class="p">.</span><span class="n">objid</span> <span class="o">=</span> <span class="n">demo_trap</span><span class="p">;</span> <span class="cm">/* demo-trap objid */</span>
</span><span class='line'>    <span class="n">var_trap</span><span class="p">.</span><span class="n">val_len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">demo_trap</span><span class="p">);</span>   <span class="cm">/* length in bytes (not number of subids!) */</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * additional objects </span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">var_obj</span><span class="p">.</span><span class="n">next_variable</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>   <span class="cm">/* No more variables after this one */</span>
</span><span class='line'>    <span class="n">var_obj</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">example_string_oid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">var_obj</span><span class="p">.</span><span class="n">name_length</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">example_string_oid</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">oid</span><span class="p">);</span> <span class="cm">/* number of sub-ids */</span>
</span><span class='line'>    <span class="n">var_obj</span><span class="p">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">ASN_OCTET_STR</span><span class="p">;</span>   <span class="cm">/* type of variable */</span>
</span><span class='line'>    <span class="n">var_obj</span><span class="p">.</span><span class="n">val</span><span class="p">.</span><span class="n">string</span> <span class="o">=</span> <span class="n">example_str</span><span class="p">;</span>       <span class="cm">/* value */</span>
</span><span class='line'>    <span class="n">var_obj</span><span class="p">.</span><span class="n">val_len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">example_str</span><span class="p">);</span>
</span><span class='line'>    <span class="n">DEBUGMSGTL</span><span class="p">((</span><span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="s">&quot;write_exampletrap2 sending the v2 trap</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">send_v2trap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">var_trap</span><span class="p">);</span>
</span><span class='line'>    <span class="n">DEBUGMSGTL</span><span class="p">((</span><span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="s">&quot;write_exampletrap2 v2 trap sent</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">SNMP_ERR_NOERROR</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>example-demon.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*主函数：foxmail_new.c */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;include-net-snmpnet-snmp-configh&quot;</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">net</span><span class="o">-</span><span class="n">snmp</span><span class="o">/</span><span class="n">net</span><span class="o">-</span><span class="n">snmp</span><span class="o">-</span><span class="n">config</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;include-net-snmpnet-snmp-includesh-1&quot;</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">net</span><span class="o">-</span><span class="n">snmp</span><span class="o">/</span><span class="n">net</span><span class="o">-</span><span class="n">snmp</span><span class="o">-</span><span class="n">includes</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;include-net-snmpagentnet-snmp-agent-includesh&quot;</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">net</span><span class="o">-</span><span class="n">snmp</span><span class="o">/</span><span class="n">agent</span><span class="o">/</span><span class="n">net</span><span class="o">-</span><span class="n">snmp</span><span class="o">-</span><span class="n">agent</span><span class="o">-</span><span class="n">includes</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;include-signalh&quot;</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">signal</span><span class="p">.</span><span class="n">h</span> <span class="o">/&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;include-exampleh&quot;</span><span class="o">&gt;</span><span class="n">include</span> <span class="err">“</span><span class="n">example</span><span class="p">.</span><span class="n">h</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;define-mydebug&quot;</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">MYDEBUG</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">#</span><span class="n">ifdef</span> <span class="n">MYDEBUG</span>
</span><span class='line'>	<span class="err">#</span><span class="n">define</span> <span class="n">myprintf</span><span class="p">(</span><span class="n">fmt</span><span class="p">,</span> <span class="n">a</span><span class="err">…</span><span class="p">)</span>  <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="n">s</span><span class="p">,</span><span class="o">%</span><span class="n">s</span><span class="p">(),</span><span class="o">%</span><span class="n">d</span><span class="o">:</span><span class="err">”</span> <span class="n">fmt</span> <span class="err">“\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="kt">FILE</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">FUNCTION</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">LINE</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span> <span class="err">##</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>	<span class="err">#</span><span class="n">define</span> <span class="n">myprintf</span><span class="p">(</span><span class="n">fmt</span><span class="p">,</span> <span class="n">a</span><span class="err">…</span><span class="p">)</span>
</span><span class='line'><span class="cp">#endif&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="kt">int</span> <span class="n">keep_running</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">RETSIGTYPE</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">stop_server</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">keep_running</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">agentx_subagent</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="cm">/* change this if you want to be a SNMP master agent &lt;em&gt;/</span>
</span><span class='line'><span class="cm">  int background = 0; /&lt;/em&gt; change this if you want to run in the background &lt;em&gt;/</span>
</span><span class='line'><span class="cm">  int syslog = 0; /&lt;/em&gt; change this if you want to use syslog */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">myprintf</span><span class="p">(</span><span class="err">“</span><span class="n">it</span> <span class="n">is</span> <span class="n">ok</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>  <span class="cm">/* print log errors to syslog or stderr */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">syslog</span><span class="p">)</span>
</span><span class='line'>    <span class="n">snmp_enable_calllog</span><span class="p">();</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nf">snmp_enable_stderrlog</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//myprintf(&quot;it is ok \n&quot;);   /* we&#39;re an agentx subagent? */</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">agentx_subagent</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* make us a agentx client. */</span>
</span><span class='line'>
</span><span class='line'><span class="n">netsnmp_ds_set_boolean</span><span class="p">(</span><span class="n">NETSNMP_DS_APPLICATION_ID</span><span class="p">,</span> <span class="n">NETSNMP_DS_AGENT_ROLE</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* run in background, if requested */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">background</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">netsnmp_daemonize</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">!</span><span class="n">syslog</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* Initialize tcpip, if necessary */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">SOCK_STARTUP</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* Initialize the agent library */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">init_agent</span><span class="p">(</span><span class="err">“</span><span class="n">example</span><span class="o">-</span><span class="n">demon</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="n">init_system_mib</span><span class="p">();</span>
</span><span class='line'><span class="n">init_sysORTable</span><span class="p">();</span>
</span><span class='line'><span class="n">init_at</span><span class="p">();</span>
</span><span class='line'><span class="n">init_snmp_mib</span><span class="p">();</span>
</span><span class='line'><span class="n">init_tcp</span><span class="p">();</span>
</span><span class='line'><span class="n">init_icmp</span><span class="p">();</span>
</span><span class='line'><span class="n">init_ip</span><span class="p">();</span>
</span><span class='line'><span class="n">init_udp</span><span class="p">();</span>
</span><span class='line'><span class="n">init_vacm_vars</span><span class="p">();</span>
</span><span class='line'><span class="n">init_memory</span><span class="p">();</span>
</span><span class='line'><span class="n">init_proc</span><span class="p">();</span>
</span><span class='line'><span class="n">init_versioninfo</span><span class="p">();</span>
</span><span class='line'><span class="n">init_pass</span><span class="p">();</span>
</span><span class='line'><span class="n">init_pass_persist</span><span class="p">();</span>
</span><span class='line'><span class="n">init_disk</span><span class="p">();</span>
</span><span class='line'><span class="n">init_loadave</span><span class="p">();</span>
</span><span class='line'><span class="n">init_extensible</span><span class="p">();</span>
</span><span class='line'><span class="n">init_errormib</span><span class="p">();</span>
</span><span class='line'><span class="n">init_file</span><span class="p">();</span>
</span><span class='line'><span class="n">init_snmpEngine</span><span class="p">();</span>
</span><span class='line'><span class="n">init_snmpMPDStats</span><span class="p">();</span>
</span><span class='line'><span class="n">init_usmStats</span><span class="p">();</span>
</span><span class='line'><span class="n">init_usmUser</span><span class="p">();</span>
</span><span class='line'><span class="n">init_var_route</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* Initialize our mib code here */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">init_example</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* initialize vacm/usm access control  */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">agentx_subagent</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">void</span>  <span class="n">init_vacm_vars</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>  <span class="nf">init_usmUser</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* Example-demon will be used to read example-demon.conf files. */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">init_snmp</span><span class="p">(</span><span class="err">“</span><span class="n">example</span><span class="o">-</span><span class="n">demon</span><span class="err">”</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* If we’re going to be a snmp master agent, initial the ports */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">agentx_subagent</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">init_master_agent</span><span class="p">();</span>  <span class="cm">/* open the port to listen on (defaults to udp:161) */</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* In case we recevie a request to stop (kill -TERM or kill -INT) */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">keep_running</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">signal</span><span class="p">(</span><span class="n">SIGTERM</span><span class="p">,</span> <span class="n">stop_server</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">signal</span><span class="p">(</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">stop_server</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">snmp_log</span><span class="p">(</span><span class="n">LOG_INFO</span><span class="p">,</span><span class="err">”</span><span class="n">example</span><span class="o">-</span><span class="n">demon</span> <span class="n">is</span> <span class="n">up</span> <span class="n">and</span> <span class="n">running</span><span class="p">.</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* your main loop here… */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">while</span><span class="p">(</span><span class="n">keep_running</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* if you use select(), see snmp_select_info() in snmp_api(3) */</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*     --- OR ---  */</span>
</span><span class='line'>
</span><span class='line'><span class="n">agent_check_and_process</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="cm">/* 0 == don&#39;t block */</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* at shutdown time */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">snmp_shutdown</span><span class="p">(</span><span class="err">“</span><span class="n">example</span><span class="o">-</span><span class="n">demon</span><span class="err">”</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">SOCK_CLEANUP</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>example-demon.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">###############################################################################</span>
</span><span class='line'><span class="cp"># Access Control</span>
</span><span class='line'><span class="cp">###############################################################################&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;secname-source-community&quot;</span><span class="o">&gt;</span><span class="n">sec</span><span class="p">.</span><span class="n">name</span> <span class="n">source</span> <span class="n">community</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">rocommunity</span> <span class="n">public</span>
</span><span class='line'><span class="n">rwcommunity</span> <span class="mi">223323</span>
</span><span class='line'><span class="cp">####</span>
</span><span class='line'><span class="cp"># Second, map the security names into group names:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;secmodel-secname&quot;</span><span class="o">&gt;</span><span class="n">sec</span><span class="p">.</span><span class="n">model</span> <span class="n">sec</span><span class="p">.</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">group</span> <span class="n">MyRWGroup</span> <span class="n">v1</span> <span class="n">local</span>
</span><span class='line'><span class="n">group</span> <span class="n">MyRWGroup</span> <span class="n">v2c</span> <span class="n">local</span>
</span><span class='line'><span class="n">group</span> <span class="n">MyRWGroup</span> <span class="n">usm</span> <span class="n">local</span>
</span><span class='line'><span class="n">group</span> <span class="n">MyROGroup</span> <span class="n">v1</span> <span class="n">mynetwork</span>
</span><span class='line'><span class="n">group</span> <span class="n">MyROGroup</span> <span class="n">v2c</span> <span class="n">mynetwork</span>
</span><span class='line'><span class="n">group</span> <span class="n">MyROGroup</span> <span class="n">usm</span> <span class="n">mynetwork</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;section&quot;</span><span class="o">&gt;</span><span class="err">#</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">#</span> <span class="n">Third</span><span class="p">,</span> <span class="n">create</span> <span class="n">a</span> <span class="n">view</span> <span class="k">for</span> <span class="n">us</span> <span class="n">to</span> <span class="n">let</span> <span class="n">the</span> <span class="n">groups</span> <span class="n">have</span> <span class="n">rights</span> <span class="n">to</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;inclexcl-subtree-mask&quot;</span><span class="o">&gt;</span><span class="n">incl</span><span class="o">/</span><span class="n">excl</span> <span class="n">subtree</span> <span class="n">mask</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">view</span> <span class="n">all</span> <span class="n">included</span> <span class="mf">.1</span> <span class="mi">80</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;section-1&quot;</span><span class="o">&gt;</span><span class="err">#</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">#</span> <span class="n">Finally</span><span class="p">,</span> <span class="n">grant</span> <span class="n">the</span> <span class="mi">2</span> <span class="n">groups</span> <span class="n">access</span> <span class="n">to</span> <span class="n">the</span> <span class="mi">1</span> <span class="n">view</span> <span class="n">with</span> <span class="n">different</span>
</span><span class='line'><span class="cp"># write permissions:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;context-secmodel-seclevel-match-read-write-notif&quot;</span><span class="o">&gt;</span><span class="n">context</span> <span class="n">sec</span><span class="p">.</span><span class="n">model</span> <span class="n">sec</span><span class="p">.</span><span class="n">level</span> <span class="n">match</span> <span class="n">read</span> <span class="n">write</span> <span class="n">notif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">access</span> <span class="n">MyROGroup</span> <span class="err">“”</span> <span class="n">any</span> <span class="n">noauth</span> <span class="n">exact</span> <span class="n">all</span> <span class="n">none</span> <span class="n">none</span>
</span><span class='line'><span class="n">access</span> <span class="n">MyRWGroup</span> <span class="err">“”</span> <span class="n">any</span> <span class="n">noauth</span> <span class="n">exact</span> <span class="n">all</span> <span class="n">all</span> <span class="n">none</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">agentaddress</span> <span class="mi">161</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>makefile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">CC</span><span class="o">=</span>gcc
</span><span class='line'><span class="nv">OBJS2</span><span class="o">=</span>example-demon.o example.o
</span><span class='line'><span class="nv">TARGETS</span><span class="o">=</span>example-demon&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nv">CFLAGS</span><span class="o">=</span>-I. &lt;code&gt;net-snmp-config --cflags&lt;/code&gt;
</span><span class='line'><span class="nv">BUILDLIBS</span><span class="o">=</span>&lt;code&gt;net-snmp-config --libs&lt;/code&gt;
</span><span class='line'><span class="nv">BUILDAGENTLIBS</span><span class="o">=</span>&lt;code&gt;net-snmp-config --agent-libs&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;shared-library-flags-assumes-gcc&quot;</span>&gt;shared library flags <span class="o">(</span>assumes gcc<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nv">DLFLAGS</span><span class="o">=</span>-fPIC –shared&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;all</span><span class="o">:</span> <span class="m">$(TARGETS)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;example-demon</span><span class="o">:</span> <span class="m">$(OBJS2)</span>
</span><span class='line'>	<span class="k">$(</span>CC<span class="k">)</span> -o example-demon <span class="k">$(</span>OBJS2<span class="k">)</span> <span class="k">$(</span>BUILDAGENTLIBS<span class="k">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;clean</span><span class="o">:</span>
</span><span class='line'>	rm <span class="k">$(</span>OBJS2<span class="k">)</span> <span class="k">$(</span>OBJS2<span class="k">)</span> <span class="k">$(</span>TARGETS<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>目前无法获取到系统load，以后用到再深入。</p>

<p>参考文章
《Snmp Agent开发流程》
http://blog.csdn.net/ytz_linuxer/article/details/5985534</p>

<p>《网管SNMP Agent的快速开发》
http://www.wangchao.net.cn/bbsdetail_53491.html</p>

<p>《SNMP监控一些常用OID的总结》
http://www.cnblogs.com/aspx-net/p/3554044.html</p>

<p>《与大家分享uclinux上的ucd-snmp开发过程》
http://bbs.chinaunix.net/thread-2112856-1-1.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rrdtool的socket通讯接口rrdsrv]]></title>
    <link href="http://evoupsight.com/blog/2014/07/10/rrdsrv-usage/"/>
    <updated>2014-07-10T17:28:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/07/10/rrdsrv-usage</id>
    <content type="html"><![CDATA[<p>原来以为rrdtool只是个本地数据库，这次写java程序看了几个rrdtool的java实现的源码,在其中一款中发现原来rrdtool居然还支持inetd超级服务器的用法，也就是rrdsrv。以下以freebsd下rrdsrv的配置为例，介绍使用方法：</p>

<!--more-->

<p>假设rrdtool的安装路径在/usr/local/bin/rrdtool，然后存放rrd数据库的路径为/services/rrds/</p>

<p>首先编辑/etc/inetd.conf，加入</p>

<p><code>bash
rrdsrv  stream  tcp nowait  root    /usr/local/bin/rrdtool  rrdtool - /services/rrds/
</code></p>

<p>然后再编辑/etc/services，加入</p>

<p><code>bash
rrdsrv 13900/tcp
</code></p>

<p>在/etc/rc.conf中</p>

<p><code>bash
inetd_enable="YES"
</code></p>

<p>然后</p>

<p><code>bash
sudo /etc/rc.d/inetd start
</code></p>

<p>这样13900端口就支持使用socket方式的rrdtool命令操作了</p>

<p>```bash
[yin@yin-arch rrds]&gt;telnet 127.0.0.1 13900
Trying 127.0.0.1…
Connected to localhost.
Escape character is ‘^]’.</p>

<p>info load.rrd
filename = “load.rrd”
rrd_version = “0003”
step = 15
last_update = 1404984273
header_size = 1000
ds[load].index = 0
ds[load].type = “GAUGE”
ds[load].minimal_heartbeat = 120
ds[load].min = NaN
ds[load].max = NaN
ds[load].last_ds = “5.73242000000000029303e-01”
ds[load].value = 2.0151107237e+00
ds[load].unknown_sec = 0
rra[0].cf = “AVERAGE”
rra[0].rows = 5856
rra[0].cur_row = 5072
rra[0].pdp_per_row = 1
rra[0].xff = 5.0000000000e-01
rra[0].cdp_prep[0].value = NaN
rra[0].cdp_prep[0].unknown_datapoints = 0
rra[1].cf = “AVERAGE”
rra[1].rows = 20160
rra[1].cur_row = 9119
rra[1].pdp_per_row = 4
rra[1].xff = 5.0000000000e-01
rra[1].cdp_prep[0].value = 1.1429347927e+00
rra[1].cdp_prep[0].unknown_datapoints = 0
rra[2].cf = “AVERAGE”
rra[2].rows = 52704
rra[2].cur_row = 46249
rra[2].pdp_per_row = 40
rra[2].xff = 5.0000000000e-01
rra[2].cdp_prep[0].value = 9.7464362627e+00
rra[2].cdp_prep[0].unknown_datapoints = 0
OK u:0.00 s:0.01 r:41.67
```</p>

<p>值得一提的是，除了支持rrdtool的info、create、update等内置命令，更可以调用系统指令cd、mkdir、ls等指令，非常强大。可以看出作者的编程思路非常奇特，居然还可以这样用。于是我借助这个特性，实现了网络rrdtool指令的操作，like memcache：）</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用expect脚本检测telnet瞬断]]></title>
    <link href="http://evoupsight.com/blog/2014/01/08/expect-check-telnet-losing-connection-immediately/"/>
    <updated>2014-01-08T18:17:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/01/08/expect-check-telnet-losing-connection-immediately</id>
    <content type="html"><![CDATA[<p>分享一个检查telnet瞬断的脚本，我用调用它来检测thrift的TCP9090端口一连上就断开连接的状态。</p>

<p>直接上代码了
<!-- more --></p>

<p>```sh
#!/usr/local/bin/expect
spawn telnet 127.0.0.1 9090 
set timeout  1
expect {
        “<em>Escape character is</em>” {
                exp_continue
        }
        “<em>Connection closed by foreign host</em>” {
                send “note: 1) detect a unsafe connection”
        }
}
expect {
        “<em>Connection closed by foreign host</em>” {
                send “note: 2) detect a unsafe connection”
        }
        send “\003”
        exit
}
expect “<em>Connection closed by foreign host</em>”
send “note: 3) disconnect by client cause timeout or not immediately exit expect”
exit
expect eof</p>

<p>exit
expect eof</p>

<p>```</p>

<p>调用者程序可以根据expect输出的note: 3) disconnect by client cause timeout or not immediately exit expect得知telnet上去瞬间失去连接。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用php的snmp模块进行监控数据的获取]]></title>
    <link href="http://evoupsight.com/blog/2013/12/10/php-use-snmp-module-to-monitor/"/>
    <updated>2013-12-10T10:19:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/12/10/php-use-snmp-module-to-monitor</id>
    <content type="html"><![CDATA[<p>简单地根据经验归纳，snmp被叫做简单网络管理协议(Simple Network Management Protocol)，是监控业界标准的设备间通讯接口会话层协议，位于OSI的第五层。各类开源软件广泛采用了此协议进行数据的获取，目前已经从明文传输的v1发展到了具有较高安全性的v3版本。与snmp相关的知识有很多，<code> MIB </code>（管理信息数据库），<code> OID </code>（对象标识符），就目前而言，只需要记得有这2个名字就可以了。
通过源码安装php的snmp模块和安装一般php的模块没有本质区别。一共也就2种方式，–enable或者–with静态方式和phpize动态方式。共同点是都需要ext目录下面有snmp这个模块。
下面先论述如以–enable或者–with的方式来把snmp静态编译到php中去。
首先下载php软件包。
<!-- more --></p>

<p><code>sh
$ wget wget http://tw1.php.net/get/php-5.5.6.tar.bz2/from/this/mirror
$ tar xjf php-5.5.6.tar.bz2
$ cd php-5.5.6
$ ls ext/snmp/
config.m4  config.w32  CREDITS  php_snmp.h  snmp.c  snmp.dsp  tests
$
</code></p>

<p>可见snmp已经自带了，不需要到pecl下载然后放到ext目录。</p>

<p><code>sh
$ sudo yum install libxml2 libxml2-devel 
</code></p>

<p>备注如果一意孤行，只装libxml2，呵呵，那么你将收到<code> configure: error: xml2-config not found. Please check your libxml2 installation. </code>的报错。同样，你要是不装net-snmp-devel，就可以收到<code> configure: error: Could not find net-snmp-config binary. Please check your net-snmp installation </code>的报错。 </p>

<h3 id="section">静态编译</h3>
<p>查一下snmp的安装选项</p>

<p><code>sh
$ ./configure --help | grep snmp
  --with-snmp=DIR         Include SNMP support
</code></p>

<p>是–with，了解后继续操作，这里直接使用默认snmp路径</p>

<p><code>sh
$ ./configure --prefix=/usr/local/php55_static_snmp --with-snmp --ebable-sockets 
$ make
$ sudo make install
</code></p>

<p>这样静态编译就完成了。</p>

<h3 id="section-1">动态编译</h3>
<p>假设一开始把php安装在/usr/local/php55，现在要以编译出sockets.so和snmp.so</p>

<p><code>sh
$ cd ext/snmp
$ /usr/local/php55/bin/phpize
$ ./configure --with-php-config=/usr/local/php55/bin/php-config
$ make
$ sudo make install
$ cd ../../ext/sockets
$ /usr/local/php55/bin/phpize
$ ./configure --with-php-config=/usr/local/php55/bin/php-config
$ make
$ sudo make install
</code></p>

<p>然后复制刚才的编译好的so文件到扩展目录到etc目录</p>

<p><code>sh
$ cp /usr/local/php55/lib/php/extensions/no-debug-non-zts-20121212/snmp.so /usr/local/php55/etc/
$ cp /usr/local/php55/lib/php/extensions/no-debug-non-zts-20121212/sockets.so /usr/local/php55/etc/
</code></p>

<p>编辑php的配置文件</p>

<p><code>sh
$ vi /usr/local/php55/etc/php.ini
</code></p>

<p>加入2行</p>

<p><code>sh
extension=sockets.so 
extension=snmp.so
</code></p>

<h3 id="phpsnmp">撰写php版的snmp客户端测试程序</h3>
<p>开始写点测试程序，确认snmp已经在本机支持</p>

<p><code>sh
$nc -uvz 127.0.0.1 161
Connection to 127.0.0.1 161 port [udp/snmp] succeeded!
</code></p>

<p>2014-07-16补充：
以上udp端口的检测方法仅使用于linux，如果要在freebsd下检测，需要使用以下语句</p>

<p><code>sh
$nc -u 127.0.0.1 161
</code></p>

<p>输入以上命令然后回车，如果没有马上退出，证明udp服务已经起来</p>

<p>已经支持，那么来写程序吧</p>

<p><code>php
&lt;?php
/**
 * test.php
 */
$host="127.0.0.1";
$community="public";
$oid=".1.3.6.1.4.1.2021.10.1.3.1";
$oid1=".1.3.6.1.4.1.2021.10.1.3.2";
$oid2=".1.3.6.1.4.1.2021.10.1.3.3";
$oid3=".1.3.6.1.4.1.2021.4.3.0";
// 1 minute Load
echo (snmpget($host,$community,$oid)."\n");
// 5 minute Load
echo (snmpget($host,$community,$oid1)."\n");
// 15 minute Load
echo (snmpget($host,$community,$oid2)."\n");
// Total Swap Size
echo (snmpget($host,$community,$oid3)."\n");
</code></p>

<p>查看结果</p>

<p><code>sh
$ /usr/local/php55/bin/php test.php
STRING: 0.05
STRING: 0.03
STRING: 0.03
INTEGER: 2064376 kB
</code></p>

<h3 id="section-2">分析总结</h3>
<p>可以看出php的snmp接口还是非常简明优雅的，由此推断你只要学会rrdtool、php和snmp，自行打造一款类cacti的监控软件不会有太大的困难。但是这么做其实还有一点要注意，得装snmpd，我自己写公司监控平台2.0的时候，上级要求使用C api直接获取数据，不走snmp，其实通过对分析ganglia源代码的粗读，也能马上发现其也是采用了原生api调用获取主要监控数据的方式，所以号称比snmpd快和非常节省系统开销。但为了完成任务和系统的拓展性，果然另外支持snmp吧。</p>

<h3 id="section-3">扩展阅读</h3>
<p>请需要OID对照资料的兄弟自行互联网查询《linux常用OID》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[centos6.4下搭建zabbix2.0.6]]></title>
    <link href="http://evoupsight.com/blog/2013/12/03/centos6-dot-4-install-zabbix/"/>
    <updated>2013-12-03T13:37:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/12/03/centos6-dot-4-install-zabbix</id>
    <content type="html"><![CDATA[<p>最近开始研究各款监控系统，和自己的监控系统进行横向比较找差距，就从单位也在用的zabbix开始，先安装后再这里过一遍流程。</p>

<!-- more -->
<p>关闭iptables和selinux</p>

<p><code>sh
sudo service iptables stop
sudo chkconfig iptables off
</code></p>

<p>临时关闭selinux</p>

<p><code>sh
setenfoce 0  ##设置为permissive模式
             ##setenforce 1设置SELunix为enforcing模式
</code></p>

<p>永久关闭
修改/etc/selinux/config 文件
将SELINUX=enforcing改为SELINUX=disabled
重启机器看到
getenforce返回Disabled说明已经关闭</p>

<p>再次进入centos6.4，先安装LAMP环境。</p>

<p><code>sh
yum install -y httpd mysql mysql-server mysql-devel php php-mysql php-common php-mbstring php-gd php-odbc php-xml php-pear
</code></p>

<p>然后下载zabbix</p>

<p><code>sh
wget http://sourceforge.net/projects/zabbix/files/ZABBIX%20Latest%20Stable/2.0.6/zabbix-2.0.6.tar.gz/download
</code></p>

<p>继续安装需要的组件</p>

<p><code>sh
yum install -y curl curl-devel net-snmp net-snmp-devel perl-DBI
</code></p>

<p>创建zabbix用户帐号</p>

<p><code>sh
sudo useradd zabbix
sudo usermod -s /sbin/nologin zabbix
</code></p>

<p>启动mysql</p>

<p><code>sh
sudo service mysqld start
</code></p>

<p>登录mysql</p>

<p><code>sh
mysql -uroot -p123456
mysql&gt; create database zabbix;
mysql&gt; grant all on zabbix.* to zabbix@localhost identified by '123456';
mysql&gt; use zabbix;
mysql&gt; source /home/evoup/Downloads/zabbix-2.0.6/database/mysql/schema.sql
mysql&gt; source /home/evoup/Downloads/zabbix-2.0.6/database/mysql/images.sql
mysql&gt; source /home/evoup/Downloads/zabbix-2.0.6/database/mysql/data.sql
mysql&gt; exit
</code></p>

<p>安装zabbix</p>

<p>```sh
./configure –enable-server –enable-agent –with-mysql –with-net-snmp –with-libcurl
Configuration:</p>

<p>Detected OS:           linux-gnu
  Install path:          /usr/local
  Compilation arch:      linux</p>

<p>Compiler:              gcc
  Compiler flags:        -g -O2  -I/usr/include/mysql  -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector –param=ssp-buffer-size=4 -m64 -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -fno-strict-aliasing -fwrapv -fPIC   -DUNIV_LINUX -DUNIV_LINUX       -I/usr/include/rpm -I/usr/local/include -I/usr/lib64/perl5/CORE -I. -I/usr/include  </p>

<p>Enable server:         yes
  Server details:
    With database:         MySQL
    WEB Monitoring via:    cURL
    Native Jabber:         no
    SNMP:                  net-snmp
    IPMI:                  no
    SSH:                   no
    ODBC:                  no
    Linker flags:          -rdynamic      -L/usr/lib64/mysql       -L/usr/lib64  -L/usr/lib64
    Libraries:             -lm -lrt  -lresolv    -lmysqlclient       -lcurl  -lnetsnmp -lcrypto  -lnetsnmp -lcrypto</p>

<p>Enable proxy:          no</p>

<p>Enable agent:          yes
  Agent details:
    Linker flags:          -rdynamic
    Libraries:             -lm -lrt  -lresolv    -lcurl</p>

<p>Enable Java gateway:   no</p>

<p>LDAP support:          no
  IPv6 support:          no</p>

<hr />
<ul>
  <li>Now run ‘make install’                       *</li>
  <li>*</li>
  <li>Thank you for using Zabbix!                  *</li>
  <li><a href="http://www.zabbix.com">http://www.zabbix.com</a>                    *
<strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong>*****
```</li>
</ul>

<p>好了，我们正式安装</p>

<p><code>sh
sudo make install
</code></p>

<p>接下来编辑配置文件
可以不用sudo，直接切换到root做</p>

<p>```sh
cd /usr/local/etc
cat zabbix_server.conf
LogFile=/var/log/zabbix_server.log
DBHost=localhost
DBName=zabbix
DBUser=zabbix
DBPassword=123456</p>

<p>cat zabbix_agent.conf
LogFile=/tmp/zabbix_agentd.log
Server=127.0.0.1
UnsafeUserParameters=1
```</p>

<p>创建日志文件</p>

<p>```sh
touch /var/log/zabbix_server.log
touch /var/log/zabbix_agent.log</p>

<p>cd -
cp misc/init.d/tru64/zabbix_server /etc/init.d/
cp misc/init.d/tru64/zabbix_agentd /etc/init.d/
```</p>

<p>2个文件的文件头改成如下</p>

<p><code>sh
#!/bin/sh
#chkconfig: 35 95 95
#description:zabbix Agent server
</code></p>

<p>添加服务</p>

<p><code>sh
chkconfig --add zabbix_server
chkconfig --add zabbix_agentd
</code></p>

<p>开机自动启动</p>

<p><code>sh
chkconfig zabbix_server on
chkconfig zabbix_agent on
</code></p>

<p>文件执行权限</p>

<p><code>sh
chmod +x zabbix_server
chmod +x zabbix_agentd
</code></p>

<p>启动</p>

<p><code>sh
sudo /etc/init.d/zabbix_server start
sudo /etc/init.d/zabbix_agentd start
</code></p>

<p>安装zabbix web</p>

<p><code>sh
cp -r frontends/php/ /var/www/html/zabbix
</code></p>

<p>访问http://ip/zabbix</p>

<p><code>sh
vim /etc/php.ini
</code>
指定</p>

<p><code>php
timezone = Asia/Shanghai
</code></p>

<p>根据提示修改php配置</p>

<p><code>sh
yum install -y php-bcmath
</code></p>

<p>然后再次重启httpd</p>

<p>最后登录前端界面密码为 admin/zabbix</p>

<p>告一段落，接下来学习操作zabbix。</p>

]]></content>
  </entry>
  
</feed>
