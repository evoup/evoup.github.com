<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rrdtool | Evoup`s Blog]]></title>
  <link href="http://evoupsight.com/blog/categories/rrdtool/atom.xml" rel="self"/>
  <link href="http://evoupsight.com/"/>
  <updated>2016-08-03T16:33:54+08:00</updated>
  <id>http://evoupsight.com/</id>
  <author>
    <name><![CDATA[Evoup`s Blog]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rrdtool的socket通讯接口rrdsrv]]></title>
    <link href="http://evoupsight.com/blog/2014/07/10/rrdsrv-usage/"/>
    <updated>2014-07-10T17:28:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/07/10/rrdsrv-usage</id>
    <content type="html"><![CDATA[<p>原来以为rrdtool只是个本地数据库，这次写java程序看了几个rrdtool的java实现的源码,在其中一款中发现原来rrdtool居然还支持inetd超级服务器的用法，也就是rrdsrv。以下以freebsd下rrdsrv的配置为例，介绍使用方法：</p>

<!--more-->

<p>假设rrdtool的安装路径在/usr/local/bin/rrdtool，然后存放rrd数据库的路径为/services/rrds/</p>

<p>首先编辑/etc/inetd.conf，加入</p>

<p><code>bash
rrdsrv  stream  tcp nowait  root    /usr/local/bin/rrdtool  rrdtool - /services/rrds/
</code></p>

<p>然后再编辑/etc/services，加入</p>

<p><code>bash
rrdsrv 13900/tcp
</code></p>

<p>在/etc/rc.conf中</p>

<p><code>bash
inetd_enable="YES"
</code></p>

<p>然后</p>

<p><code>bash
sudo /etc/rc.d/inetd start
</code></p>

<p>这样13900端口就支持使用socket方式的rrdtool命令操作了</p>

<p>```bash
[yin@yin-arch rrds]&gt;telnet 127.0.0.1 13900
Trying 127.0.0.1…
Connected to localhost.
Escape character is ‘^]’.</p>

<p>info load.rrd
filename = “load.rrd”
rrd_version = “0003”
step = 15
last_update = 1404984273
header_size = 1000
ds[load].index = 0
ds[load].type = “GAUGE”
ds[load].minimal_heartbeat = 120
ds[load].min = NaN
ds[load].max = NaN
ds[load].last_ds = “5.73242000000000029303e-01”
ds[load].value = 2.0151107237e+00
ds[load].unknown_sec = 0
rra[0].cf = “AVERAGE”
rra[0].rows = 5856
rra[0].cur_row = 5072
rra[0].pdp_per_row = 1
rra[0].xff = 5.0000000000e-01
rra[0].cdp_prep[0].value = NaN
rra[0].cdp_prep[0].unknown_datapoints = 0
rra[1].cf = “AVERAGE”
rra[1].rows = 20160
rra[1].cur_row = 9119
rra[1].pdp_per_row = 4
rra[1].xff = 5.0000000000e-01
rra[1].cdp_prep[0].value = 1.1429347927e+00
rra[1].cdp_prep[0].unknown_datapoints = 0
rra[2].cf = “AVERAGE”
rra[2].rows = 52704
rra[2].cur_row = 46249
rra[2].pdp_per_row = 40
rra[2].xff = 5.0000000000e-01
rra[2].cdp_prep[0].value = 9.7464362627e+00
rra[2].cdp_prep[0].unknown_datapoints = 0
OK u:0.00 s:0.01 r:41.67
```</p>

<p>值得一提的是，除了支持rrdtool的info、create、update等内置命令，更可以调用系统指令cd、mkdir、ls等指令，非常强大。可以看出作者的编程思路非常奇特，居然还可以这样用。于是我借助这个特性，实现了网络rrdtool指令的操作，like memcache：）</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[freebsd和linux上安装中文字体]]></title>
    <link href="http://evoupsight.com/blog/2014/06/13/simplely-install-chinese-fonts-on-freebsd-and-linux/"/>
    <updated>2014-06-13T17:45:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/06/13/simplely-install-chinese-fonts-on-freebsd-and-linux</id>
    <content type="html"><![CDATA[<h3 id="section">使用中文字体及其安装</h3>
<p>首先说明，因为需要在不同的平台下让rrdtool显示的图片看起来舒服点，考虑安装中文字体。这里搜罗下方法。（这种方式仅仅是为了程序工作正常，需要使自己的KDE或者GNOME系统中文显示正常可以不用看本文了。）
<!-- more --></p>

<h3 id="freebsd">freebsd下</h3>
<p>直接把字体文件放到/usr/local/share/fonts下，然后刷新字体缓存</p>

<p><code>bash
sudo cp ukai.ttf /usr/local/share/fonts/
sudo fc-cache -f -v
</code></p>

<h3 id="centos">centos下</h3>
<p>把字体放到/usr/share/fonts/msfonts下，然后执行几个命令</p>

<p><code>bash
sudo mkdir /use/share/fonts/msfonts
sudo cp ukai.ttf /usr/share/fonts/msfonts/
cd /usr/share/fonts/msfonts/
sudo mkfontscale
sudo mkfontdir
sudo fc-cache -fv
</code></p>

<p>更EZ的方式有</p>

<p><code>bash
sudo yum  –y  install  fonts-chinese
</code></p>

<p>于是就可以在rrdtool里指定字体为ukai.ttf了，是不是各种简单:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[erlang open_port 错误之error enoent]]></title>
    <link href="http://evoupsight.com/blog/2013/11/04/erlang-open-port-error-enoent/"/>
    <updated>2013-11-04T11:04:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/11/04/erlang-open-port-error-enoent</id>
    <content type="html"><![CDATA[<p>今天在另外一台机器上部署新写的服务端，运行后程序崩溃，最后发现erlang的find_executable的没有找到程序。</p>

<h3 id="section">问题重现：</h3>
<!-- more -->
<p>在open_port处，查看日志报错如下：</p>

<p><code>erlang
[rrddir ok]^
[ResRrd:{error,{enoent,[{erlang,open_port,
                                [{spawn_executable,"/usr/local/bin/rrdtool"},^
                                 [{line,1024},{args,["-"]}]],^
                                []},^M
                        {rrdtool,init,1,[{file,"src/rrdtool.erl"},{line,83}]},
                        {gen_server,init_it,6,^M
                                    [{file,"gen_server.erl"},{line,304}]},
                        {proc_lib,init_p_do_apply,3,
                                  [{file,"proc_lib.erl"},{line,227}]}]}}]
</code></p>

<p>怀疑rrdtool-erlang这个库存在bug，移到rrdtool.erl代码处调查问题</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rrdtool.erl start:81 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @hidden</span>
</span><span class='line'><span class="nf">init</span><span class="p">([</span><span class="nv">RRDTool</span><span class="p">])</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">Port</span> <span class="o">=</span> <span class="nb">open_port</span><span class="p">({</span><span class="n">spawn_executable</span><span class="p">,</span> <span class="nv">RRDTool</span><span class="p">},</span> <span class="p">[{</span><span class="n">line</span><span class="p">,</span> <span class="mi">1024</span><span class="p">},</span> <span class="p">{</span><span class="n">args</span><span class="p">,</span> <span class="p">[</span><span class="err">”</span><span class="o">-</span><span class="err">“</span><span class="p">]}]),</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Port</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>再定位到上层看gen_server的start函数</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rrdtool.erl start:55 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">start</span><span class="p">()</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nn">gen_server</span><span class="p">:</span><span class="nf">start</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="p">[</span><span class="nn">os</span><span class="p">:</span><span class="nf">find_executable</span><span class="p">(</span><span class="err">“</span><span class="n">rrdtool</span><span class="err">”</span><span class="p">)],</span> <span class="p">[]).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>os:find_executable(“rrdtool”),这个是用直接找到rrdtool可执行程序的调用，回到系统了输入rrdtool返回</p>

<p>```bash
RRDtool 1.4.7  Copyright 1997-2012 by Tobias Oetiker <a href="&#109;&#097;&#105;&#108;&#116;&#111;:&#116;&#111;&#098;&#105;&#064;&#111;&#101;&#116;&#105;&#107;&#101;&#114;&#046;&#099;&#104;">&#116;&#111;&#098;&#105;&#064;&#111;&#101;&#116;&#105;&#107;&#101;&#114;&#046;&#099;&#104;</a>
               Compiled Oct 22 2012 11:33:26</p>

<p>Usage: rrdtool [options] command command_options
Valid commands: create, update, updatev, graph, graphv,  dump, restore,
                last, lastupdate, first, info, fetch, tune,
                resize, xport, flushcached</p>

<p>RRDtool is distributed under the Terms of the GNU General
Public License Version 2. (www.gnu.org/copyleft/gpl.html)</p>

<p>For more information read the RRD manpages
```
已经装好了啊？那为什么还要报错，难道是做了alias</p>

<p><code>bash
[yin@yin-arch monitorserver2]&gt;alias rrdtool
/usr/lib64/rrdtool/bin/rrdtool
</code></p>

<p>果不其然</p>

<h3 id="section-1">解决方法</h3>
<p>在/usr/local/bin/目录下做一个软连接</p>

<p><code>bash
sudo ln -s /usr/lib64/rrdtool/bin/rrdtool /usr/local/bin/rrdtool
</code></p>

<p>再次运行，enoent问题解决。</p>

<h3 id="section-2">继续深入</h3>
<p>gen_server:start如何捕捉错误？下回专门讨论。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mochiweb下调用rrdtool graph命令绘制类似ganglia的load的图表]]></title>
    <link href="http://evoupsight.com/blog/2013/10/28/mochiweb-write-pretty-rrdtool-graphic/"/>
    <updated>2013-10-28T16:41:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/10/28/mochiweb-write-pretty-rrdtool-graphic</id>
    <content type="html"><![CDATA[<p>今天做rrdtool图表，发现ganglia的图表还是不错的，我就一个一个来模仿，先从one minute load开始。通过mochiweb在restful接口直接出图。
<!-- more --></p>

<p>```erlang
-module(webapi_func_graph).
-include(“include/inc.hrl”).
-compile(export_all).</p>

<p>get(Selector,Req,Key) -&gt;
    Method=Req:get(method),
    QueryStringData = Req:parse_qs(),
    io:format(“[req:~p][qsd:~p]~n”,[Req,QueryStringData]),
    StartTs = proplists:get_value(“start”, QueryStringData, “”),
    EndTs = proplists:get_value(“end”, QueryStringData, “”),
    Width = proplists:get_value(“w”, QueryStringData, “705”),
    Height = proplists:get_value(“h”, QueryStringData, “245”),
    io:format(“[M:~p][F:get][A:~p][M:~p][K:~p][start:~p][end:~p][width:~p][height:~p]~n”,[?MODULE,Selector,Method,Key,StartTs,EndTs,Width,Height]),
    case Selector of
        “@self” -&gt;
            FileName=”/tmp/myLoad_”++integer_to_list(erlang:phash2(make_ref()))++”.png”,
            AvgLoad= os:cmd(“/usr/local/bin/rrdtool fetch /services/rrds/”++Key++”/load.rrd AVERAGE –start “++StartTs++” –end “++
                EndTs++” | awk ‘BEGIN {ORS=""} {sum+=$2} END {print sum/NR}’”),
            AverageLoad=list_to_float(AvgLoad),
            io:format(“[average load:~p]~n”,[AverageLoad]),
            case AverageLoad &gt; 2 of
                true -&gt;
                    case AverageLoad &gt; 10 of
                        true -&gt;
                            BColor=”FF9966”;
                        false -&gt;
                            BColor=”E2ECFF”
                    end;
                _ -&gt;
                    BColor=”CCFF99”
            end,
            os:cmd(“/usr/local/bin/rrdtool graph “++FileName++” –lazy –start “++StartTs++” –end “++EndTs++”  –title "One Minute Load Average “++Key++” last hour" –width “++Width++” –height “++Height++” DEF:load=/services/rrds/”++Key++”/load.rrd:load:AVERAGE AREA:load#4A4A4A:load GPRINT:load:LAST:" Current\:%8.2lf %s"  GPRINT:load:AVERAGE:"Average\:%8.2lf %s\n"  GPRINT:load:MAX:"Maximum\:%8.2lf %s" GPRINT:load:MIN:"Minimum\:%8.2lf %s" -c BACK#”++BColor),
            {ok, Data} = file:read_file(FileName),
            file:delete(FileName),
            {“Content-type: image/png”,Data};
        _ -&gt;
            io:format(“[other]~n”)
    end.
```</p>

<p>注意点，我没有使用rrdcgi这个东西是因为，手册上没有说可以直接输出二进制文件流，第二即使可以用，mochiweb也没有cgi的接口可以对接。
访问我的restful接口http://192.168.216.145/mmsapi2.0beta/get/graph/@self/yin-arch_ac101eb8?start=1382927568&amp;end=1382944644&amp;w=395&amp;h=141</p>

<p>最后出图像下面一样的图了。当平均load大于10背景呈现红色（代表严重），大于2为蓝色，其余绿色。计算平均load我使用了rrdtoo fetch这个指令，此外还要注意在/tmp目录生成好随机名图片，用完了之后得删除，这个也是惯用方法。其余的请参阅rrdtool graph和rrdtool fetch命令的说明。
<img src="/images/evoup/yin-arch_ac101eb8_load.png" alt="Alt text" /></p>

<p>参考链接：
http://man.lupaworld.com/content/manage/ringkee/awk.htm</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配置nginx支持rrdcgi]]></title>
    <link href="http://evoupsight.com/blog/2013/10/25/nginx-with-rrdcgi/"/>
    <updated>2013-10-25T17:27:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/10/25/nginx-with-rrdcgi</id>
    <content type="html"><![CDATA[<p>开始在web界面上加载监控图表了，用rrdrool graph生成图，但是发现只能够生成。于是想当然地试了一下rrdcgi，本以为能够出图，结果还是创建图片，html来加载图片。最后发现ganglia的图表中居然也是先提取在临时目录生成好的图片，然后用php来生成头，最后再删除图片。不过顺便把nginx下配置CGI程序的知识学会了，权且记一笔。</p>

<!-- more -->

<h3 id="rrdcgi">RRDCGI的使用</h3>
<p>首先是编写graph.cgi</p>

<p><code>bash
#!/usr/local/bin/rrdcgi
 &lt;RRD::GRAPH
      /services/cgi-bin/load.png
      --imginfo '&lt;IMG SRC=/rrdgraph/%s WIDTH=%lu HEIGHT=%lu &gt;'
      --lazy --title="load"
      --start 1382666836 --end 1382677047
      --width 705 --height 245
      --alt-autoscale
          DEF:load=/services/rrds/yin-arch_ac101eb8/load.rrd:load:AVERAGE
          HRULE:1#ff0000:"warning value"
      AREA:load#3d3d3d:load&gt;
</code></p>

<p>语法基本和rrdgraph的差不多，没什么好说的，这样等等会生成出来一个html代码叫做</p>

<p><code>html
&lt;IMG SRC=/rrdgraph/load.png WIDTH=786 HEIGHT=324 &gt;
</code></p>

<p>首先在webroot下创建一个软连接rrdgraph，成的图片的src所指向rrdgraph文件夹，其实是个软连接，指向路径为/services/cgi-bin/
这么做是为了在nginx配置方便。</p>

<p>要怎么在shell中直接验证能出图呢？</p>

<p>```bash
sudo rrdcgi graph.cgi &lt; /dev/null
(offline mode: enter name=value pairs on standard input)
Content-Type: text/html
Content-Length: 53</p>

<p>&lt;IMG SRC=/rrdgraph/load.png WIDTH=786 HEIGHT=324 &gt;
```</p>

<p>很明显这样子是得到了load.png这个图片文件。然后把这个cgi文件移到/services/cgi-bin/目录下待机。</p>

<h3 id="nginxrrdcgi">nginx的对rrdcgi支持的配置</h3>
<p>首先需要安装好perl，还需要用到以下库：（以下版本可能过旧，直接到CPAN的网站搜索安装）</p>

<p>```bash
wget http://www.cpan.org/modules/by-module/FCGI/FCGI-0.67.tar.gz
tar -zxf FCGI-0.67.tar.gz
cd FCGI-0.67
perl Makefile.PL
make &amp;&amp; make install
cd ..</p>

<p>wget http://search.cpan.org/CPAN/authors/id/G/GB/GBJK/FCGI-ProcManager-0.18.tar.gz
tar -zxf FCGI-ProcManager-0.18.tar.gz
cd FCGI-ProcManager-0.18
perl Makefile.PL
make &amp;&amp; make install
cd ..</p>

<p>wget http://search.cpan.org/CPAN/authors/id/I/IN/INGY/IO-All-0.39.tar.gz
tar zxf IO-All-0.39.tar.gz
cd IO-All-0.39
perl Makefile.PL
make &amp;&amp; make install
```</p>

<p>安装 nginx-fcgi 脚本：</p>

<p>```bash
wget http://hily.me/blog/wp-content/uploads/2010/01/nginx-fcgi.txt</p>

<p>mv nginx-fcgi.txt /usr/sbin/nginx-fcgi</p>

<p>chmod +x /usr/sbin/nginx-fcgi
```</p>

<p>如果不用 sudo 方式运行 nginx-fcgi，请注释掉 nginx-fcgi 脚本中的：</p>

<p><code>bash
if ( $&gt; == “0″ ) {
print “\n\tERROR\tRunning as a root!\n”;
print “\tSuggested not to do so !!!\n\n”;
exit 1;
}
</code></p>

<p>启动 nginx-fcgi：</p>

<p><code>bash
sudo nginx-fcgi -l /var/log/nginx/nginx-fcgi.log -pid /var/run/nginx-fcgi.pid -S /var/run/nginx-fcgi.sock
</code></p>

<p>注意一定要为 socket 添加 nginx 帐户的权限，否则 cgi 会执行失败。
新建 nginx-fcgi 脚本指令配置，直接从 fastcgi_params 复制模板：</p>

<p><code>bash
cp /etc/nginx/fastcgi_params /etc/nginx/nginx_fcgi_params
</code></p>

<p>去除尾部的：</p>

<p><code>bash
# PHP only, required if PHP was built with –enable-force-cgi-redirect
fastcgi_param  REDIRECT_STATUS    200;
</code></p>

<p>最后的cgi站点配置：</p>

<p>```bash
        location / {
            root   /webroot;
            index  index.html index.htm;
        }</p>

<pre><code>    location ~ ^/cgi-bin/.*\.cgi$
    {
        fastcgi_index  index.cgi;
        fastcgi_param  SCRIPT_FILENAME    /services$fastcgi_script_name;
        include        nginx_fcgi_params;
        fastcgi_read_timeout    5m;
        fastcgi_pass   unix:/var/run/nginx-fcgi.sock;
    } ```
</code></pre>

<p>重启nginx，访问地址http://192.168.216.145/cgi-bin/graph.cgi</p>

<p>看到已经有图了
<img src="/images/evoup/rrdtool_load_graph2.png" alt="Alt text" /></p>

<h3 id="section">参考链接</h3>
<p>http://oss.oetiker.ch/rrdtool/doc/rrdcgi.en.html</p>

<p>http://wiki.qpsmtpd.org/doku.php?id=resources:statistics:rrdcgi-sample</p>
]]></content>
  </entry>
  
</feed>
