<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Evoup`s Blog]]></title>
  <link href="http://evoupsight.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://evoupsight.com/"/>
  <updated>2016-08-03T15:23:14+08:00</updated>
  <id>http://evoupsight.com/</id>
  <author>
    <name><![CDATA[Evoup`s Blog]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[win7下cocos2d-js3.0 alpha生成android项目]]></title>
    <link href="http://evoupsight.com/blog/2014/03/25/win7-cocos-2djs-3-dot-0-alpha-with-android/"/>
    <updated>2014-03-25T19:37:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/03/25/win7-cocos-2djs-3-dot-0-alpha-with-android</id>
    <content type="html"><![CDATA[<p>折腾了比较长的时间，主要是从cocos2d-html5入门开始做demo，然后到jsb的部分，发现走不通，于是又去研究了cocos2d-x3.0 v3.0 rc0如何生成android项目，发现发布是可以的，但是安装到模拟器又是闪退。花了两三天时间（间断）终于完成，放这里共享下。</p>

<!-- more -->

<h3 id="section">需要的软件</h3>
<p>首先当然是下载好cocos2d-js了，放到c:\cocos2d-jsb中：<br />
<img src="/images/evoup/cocos2d-js_android/01.png" alt="Alt text" /></p>

<p>然后请安装好这些工具NDK（r9b）, android SDK（20131030）, ANT（1.9.3），Python（2.7.6）<br />
下图中红色框住的部分为实际使用到的软件</p>

<p><img src="/images/evoup/cocos2d-js_android/02.png" alt="Alt text" /></p>

<p><img src="/images/evoup/cocos2d-js_android/03.png" alt="Alt text" /></p>

<p>python要配置好环境变量，在cmd命令调出python，可以看到版本号:<br /></p>

<p><img src="/images/evoup/cocos2d-js_android/04.png" alt="Alt text" /></p>

<h3 id="section-1">安装</h3>

<p>万事俱备，到了见证奇迹的时刻,在这之前，请先安装好命令行，其实就是写入几个环境变量<br />
方法是：开始-运行-cmd，进入控制台，然后定位到C:\cocos2d-jsb\Cocos2d-JS-v3.0-alpha,接下来输入:</p>

<p><code>sh
python setup.py
</code></p>

<p>然后在对应的NDK_ROOT环境变量中输入c:\android\android-ndk-r9b-windows-x86<em>64\android-ndk-r9b,<br />
在ANDROID_SDK_ROOT环境变量中输入c:\android\adt-bundle-windows-x86</em>64-20131030\sdk<br />
在ANT_ROOT中环境变量中输入c:\ant\apache-ant-1.9.3\bin<br />
<img src="/images/evoup/cocos2d-js_android/05.png" alt="Alt text" /></p>

<p>这些操作完成后，你会发现win7好像并没有加载出这些环境变量，我的方法是重启（嗯！你没看错，反正我是重启才能加载，晕）。<br /></p>

<p>重启完成之后,我们试一下这些环境变量是否OK，注意windows下批处理程序变量的命名方式为%变量名%<br /></p>

<p><img src="/images/evoup/cocos2d-js_android/06.png" alt="Alt text" /></p>

<h3 id="section-2">产生项目</h3>
<p>比如说要在c:/projects下创建一个有native编译支持的，名为projectFirst的项目，需要在控制台输入</p>

<p><code>sh
%COCOS_CONSOLE_ROOT%/cocos new projectFirst -l js -d c:/projects
</code></p>

<p>等一会儿就创建完毕<br />
<img src="/images/evoup/cocos2d-js_android/07.png" alt="Alt text" /></p>

<h3 id="section-3">编译项目</h3>
<p>如果要编译成android项目，只要执行如下指令即可：<br /></p>

<p><code>sh
&gt; cd c:\projects\projectFirst
&gt; %COCOS_CONSOLE_ROOT%/cocos compile -p android
</code></p>

<p>之后要耐心等待项目编译完成，顺便说一句，没有vc2012是不能够编译cocos2d-js3.0的，因为现在引擎支持C++11了。<br />
<img src="/images/evoup/cocos2d-js_android/08.png" alt="Alt text" /></p>

<p>等待编译完成<br />
<img src="/images/evoup/cocos2d-js_android/09.png" alt="Alt text" /></p>

<p>这样就在runtime\android\下生成了projectFirst-debug-unaligned.apk</p>

<h3 id="android">在android模拟器测试</h3>
<p>这个只要注意如果是2d-js的项目，在模拟器里面是需要打开use host gpu<br />
<img src="/images/evoup/cocos2d-js_android/10.png" alt="Alt text" /></p>

<p>启动模拟器后，用adb安装软件进去<br /></p>

<p><code>sh
%ANDROID_SDK_ROOT%/platform-tools/adb install c:\projects\projectFirst\runtime\android\projectFirst-debug-unaligned.apk
</code></p>

<p>安装完成后运行程序<br />
<img src="/images/evoup/cocos2d-js_android/10.png" alt="Alt text" /></p>

<p>告一段落。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Win7 Android开发环境搭建之二(NDK+CDT)]]></title>
    <link href="http://evoupsight.com/blog/2014/03/18/android-install-ndk-cdt/"/>
    <updated>2014-03-18T15:08:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/03/18/android-install-ndk-cdt</id>
    <content type="html"><![CDATA[<p>由于cocos2d-js用到了android的一些生产软件，比如android sdk、adt、cdt和ndk，前面两个已经在之前的《Win7 Android开发环境搭建之一(SDK+ADT)》说过了，这次主要介绍下怎么安装cdt和ndk。</p>

<!-- more -->

<h3 id="ndk">什么是NDK</h3>
<blockquote>
  <p>NDK 提供了一系列的工具，帮助开发者快速开发C（或C++）的动态库，并能自动将so 和java 应用一起打包成apk。这些工具对开发者的帮助是巨大的。</p>
</blockquote>

<h3 id="ndk-1">NDK的安装</h3>
<p>这个安装其实就是解压（环境变量的添加要等装好了cygwin再添加，这是后话），下载android NDK。http://developer.android.com/tools/sdk/ndk/index.html</p>

<p>我下载的版本是android-ndk-r9d-windows-x86<em>64.zip<br />
下载后解压到例如：c:\android\android-ndk-r9d-windows-x86</em>64.zip，结果如下图：<br />
<img src="/images/evoup/android_cdt_ndk/01.png" alt="Alt text" /></p>

<h3 id="cygwinndk">安装cygwin与ndk编译</h3>
<p>（插一句：cygwin安装后与octopress的环境可能冲突，建议先安装octopress)</p>

<h4 id="cygwin">安装cygwin</h4>
<p>ndk开发需要gcc环境，在windows下可以用是cygwin模拟linux编译环境。</p>

<p>Cygwin的下载地址：http://www.cygwin.com/</p>

<p>这个直接一路装，选择163的镜像<br />
<img src="/images/evoup/android_cdt_ndk/02.png" alt="Alt text" /></p>

<p>选择Devel-Default，然后点击变成Devel-Install，然后持续点击下一步，耐心等待安装完成，时间是比较长的<br />
或者可以选择像网上许多教程说的那样只下载12个包，这个我就不这么做了<br />
<img src="/images/evoup/android_cdt_ndk/03.png" alt="Alt text" /></p>

<h4 id="cmdcygwinbat">加入环境变量(可选，这样可以直接在cmd里进行cygwin.bat的操作)</h4>
<p>完成之后，需要把cygwin加入环境变量,我这里是安装在了c:/cygwin64,把c:/cygwin64/bin加入环境变量PATH<br />
<img src="/images/evoup/android_cdt_ndk/04.png" alt="Alt text" /></p>

<h4 id="cygwin-1">测试cygwin环境</h4>
<p>运行c:/cygwin64/Cygwin.bat,输入</p>

<p><code>sh
cygcheck -c cygwin
make -v
gcc -v
</code></p>

<p>如果显示ok就可以了，之前的报错cygheap base mismatch detected可以先忽略。<br />
<img src="/images/evoup/android_cdt_ndk/05.png" alt="Alt text" /></p>

<h4 id="ndk-2">设置NDK路径：</h4>
<p>接下来在windows系统环境变量ndk中添加NDK的路径,刚刚我把NDK解压到C:\android\android-ndk-r9d-windows-x86<em>64\android-ndk-r9d<br />
然后在环境变量ndk加上它在cygwin shell里的对应路径/cygdrive/c/android/android-ndk-r9d-windows-x86</em>64/android-ndk-r9d<br />
<img src="/images/evoup/android_cdt_ndk/06.png" alt="Alt text" /></p>

<p>编辑完成后，进入cygwin.bat输入<br /></p>

<p><code>
cd $ndk
</code></p>

<p>可以看到如下结果<br />
<img src="/images/evoup/android_cdt_ndk/07.png" alt="Alt text" /></p>

<h4 id="ndk-3">测试NDK，编译一个例子</h4>
<p>例子可以在$ndk/sample/hello-jni中找到<br />
进入cygwin.bat中输入编译指令</p>

<p><code>
cd $ndk/sample/hello-jni
$ndk/ndk-build
</code></p>

<p>一会儿就能编译完成，见下<br />
<img src="/images/evoup/android_cdt_ndk/08.png" alt="Alt text" /></p>

<p>进入libs目录查看结果,观察是否生成了so文件，如果生成则说明你的NDK已经运行正常了。<br /></p>

<p><code>
$ cd libs/armeabi/
$ ls
gdb.setup  gdbserver  libhello-jni.so
</code></p>

<h4 id="eclipse">在Eclipse中完成代码调用</h4>

<p>接下来进入Eclipse，测试该项目,创建项目路径为C:\android\project\HelloJni<br />
在Create Android Project时勾选“Create project from existing source”，Root Directory中填C:\android\android-ndk-r9d-windows-x86_64\android-ndk-r9d\samples\hello-jni,如下<br />
<img src="/images/evoup/android_cdt_ndk/09.png" alt="Alt text" /><br />
<img src="/images/evoup/android_cdt_ndk/10.png" alt="Alt text" /><br />
<img src="/images/evoup/android_cdt_ndk/11.png" alt="Alt text" /><br /></p>

<p>看到如下字符串就代表NDK的例子运行成功了<br />
<img src="/images/evoup/android_cdt_ndk/12.png" alt="Alt text" /></p>

<p>分析一下调用代码
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>HelloJni.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Copyright (C) 2009 The Android Open Source Project</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Licensed under the Apache License, Version 2.0 (the “License”);</span>
</span><span class='line'><span class="cm"> * you may not use this file except in compliance with the License.</span>
</span><span class='line'><span class="cm"> * You may obtain a copy of the License at</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      http://www.apache.org/licenses/LICENSE-2.0</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Unless required by applicable law or agreed to in writing, software</span>
</span><span class='line'><span class="cm"> * distributed under the License is distributed on an “AS IS” BASIS,</span>
</span><span class='line'><span class="cm"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
</span><span class='line'><span class="cm"> * See the License for the specific language governing permissions and</span>
</span><span class='line'><span class="cm"> * limitations under the License.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">hellojni</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.TextView</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloJni</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="c1">//HelloJni继承自活动对象事件调度类</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="cm">/** Called when the activity is first created. */</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="c1">//重写onCreate方法</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="cm">/* Create a TextView and set its content.</span>
</span><span class='line'><span class="cm">     * the text is retrieved by calling a native</span>
</span><span class='line'><span class="cm">     * function.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">TextView</span>  <span class="n">tv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TextView</span><span class="o">(</span><span class="k">this</span><span class="o">);</span> <span class="c1">//创建一个文字view</span>
</span><span class='line'>    <span class="n">tv</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span> <span class="n">stringFromJNI</span><span class="o">()</span> <span class="o">);</span> <span class="c1">//调用自定义方法stringFromJNI</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">tv</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* A native method that is implemented by the</span>
</span><span class='line'><span class="cm"> * &#39;hello-jni&#39; native library, which is packaged</span>
</span><span class='line'><span class="cm"> * with this application.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">native</span> <span class="n">String</span>  <span class="nf">stringFromJNI</span><span class="o">();</span> <span class="c1">//有native代表是c++的代码，这里仅仅是声明</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* This is another native method declaration that is *not*</span>
</span><span class='line'><span class="cm"> * implemented by &#39;hello-jni&#39;. This is simply to show that</span>
</span><span class='line'><span class="cm"> * you can declare as many native methods in your Java code</span>
</span><span class='line'><span class="cm"> * as you want, their implementation is searched in the</span>
</span><span class='line'><span class="cm"> * currently loaded native libraries only the first time</span>
</span><span class='line'><span class="cm"> * you call them.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Trying to call this function will result in a</span>
</span><span class='line'><span class="cm"> * java.lang.UnsatisfiedLinkError exception !</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">native</span> <span class="n">String</span>  <span class="nf">unimplementedStringFromJNI</span><span class="o">();</span> <span class="c1">//同样是C++的代码</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* this is used to load the &#39;hello-jni&#39; library on application</span>
</span><span class='line'><span class="cm"> * startup. The library has already been unpacked into</span>
</span><span class='line'><span class="cm"> * /data/data/com.example.hellojni/lib/libhello-jni.so at</span>
</span><span class='line'><span class="cm"> * installation time by the package manager.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">&quot;hello-jni&quot;</span><span class="o">);</span> <span class="c1">//调用刚才ndk生成的hello-jni.so</span>
</span><span class='line'><span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div> C++的代码暂时就不看了，一步一步来，我们还没装cdt，不急着搞清楚，有兴趣的到文章最后去看链接
</code></pre>

<h3 id="cdt">什么是CDT</h3>
<blockquote>
  <p>Eclipse CDT是 Eclipse 插件，它将把 Eclipse 转换为功能强大的 C/C++ IDE。它被设计为将 Java 开发人员喜爱的许多 Eclipse 优秀功能提供给 C/C++ 开发人员，例如项目管理、集成调试、类向导、自动构建、语法着色和代码完成。当 Eclipse 被用作 Java IDE 时，它将利用 JDK 并与之集成。同样地，CDT 将利用标准的 C/C++ 工具并与之集成，例如 g++、make 和 GDB。这使得 CDT 在 Linux 中变得非常流行，这些工具都可在 Linux 中使用并用于大多数 C++ 开发。可以在 Windows 上设置 CDT 以使用相同的工具。目前还在努力将 CDT 与 Microsoft 的 C++ 工具结合使用，以使 CDT 对 Windows C++ 开发人员更有吸引力。总之有了cdt，可以在一个工程里，同时开发C/C++的native代码的java外壳，并且2种代码能够同时编译。</p>
</blockquote>

<h3 id="eclipsecdt">在Eclipse编辑器中集成CDT</h3>

<p>首先在此下载http://www.eclipse.org/cdt/downloads.php<br />
直接下载cdt-master-x.x.x.zip的就可以了，我的是Eclipse版本为Kepler，可以下载以下版本<br />
http://www.eclipse.org/downloads/download.php?file=/tools/cdt/releases/kepler/sr2/cdt-master-8.3.0.zip</p>

<p><img src="/images/evoup/android_cdt_ndk/13.png" alt="Alt text" /></p>

<p>然后通过Eclipse -&gt; Help -&gt; Install New Software -&gt; add -&gt; Achive,选择下载的zip文件</p>

<p><img src="/images/evoup/android_cdt_ndk/14.png" alt="Alt text" /></p>

<p>等待安装完成<br />
<img src="/images/evoup/android_cdt_ndk/15.png" alt="Alt text" /></p>

<p>安装完成后如果在Eclipse中可以创建C++项目证明安装完成<br />
<img src="/images/evoup/android_cdt_ndk/16.png" alt="Alt text" /></p>

<h3 id="sequoyahkeplerndk9">安装Sequoyah插件（事实证明，kepler+ndk9已经无须这个插件了）</h3>
<p>~~ 官网地址 ~~ <br />
~~ https://projects.eclipse.org/projects/tools.sequoyah ~~</p>

<p>~~ 这个地址其实已经作废了,正确的连接如下 ~~ <br />
~~ http://www.mirrorservice.org/sites/download.eclipse.org/eclipseMirror/sequoyah/updates/2.0/ ~~ <br />
~~ Eclipse-Help-Install New Software-Add,在Location里输入上面的地址，name就指定为sequoyah~~ <br />
<img src="/images/evoup/android_cdt_ndk/17.png" alt="Alt text" />
<img src="/images/evoup/android_cdt_ndk/18.png" alt="Alt text" /></p>

<p>~~ 然后取消下面的Group By Item，之后选择Select All，按下Next安装（没有研究下去，发现这个要求的eclipse版本为3.7以下，我的kepler为4.3，不得以暂时放弃） ~~</p>

<h3 id="jni">JNI编译环境配置</h3>
<p>还是打开HelloJni这个项目，现在转换为C/C++的native的代码<br />
“Eclipse-&gt;File-&gt;New-&gt;Other”,选择”C/C++”下的”Convert to a c/C++ Project(Add C/C++ Nature)”,然后点击”Next”<br />
<img src="/images/evoup/android_cdt_ndk/19.png" alt="Alt text" /></p>

<p>然后在Makefile project中选择Cygwin GCC,点击Finish<br />
<img src="/images/evoup/android_cdt_ndk/20.png" alt="Alt text" /></p>

<p>右键项目的Properties，在”C/C++ Build”中取消默认的” Use default build command “的打勾，在Build Command中输入对应bash加空格加ndk-build的路径，我这里是C:\android\android-ndk-r9d-windows-x86_64\android-ndk-r9d\ndk-build<br /></p>

<p><code>sh
bash C:\android\android-ndk-r9d-windows-x86_64\android-ndk-r9d\ndk-build
</code></p>

<p><img src="/images/evoup/android_cdt_ndk/21.png" alt="Alt text" /></p>

<p>在”C/C++ General”的Paths and Symbols中：在Includes下add新的GNU C依赖路径,根据自己的avd（andriod virtual device）的版本设置对应的头文件，我这里是android17的，则C:\android\android-ndk-r9d-windows-x86_64\android-ndk-r9d\platforms\android-17\arch-arm\usr\include,其他项目可以安装实际环境酌情调整依赖头文件的版本<br />
<img src="/images/evoup/android_cdt_ndk/22.png" alt="Alt text" /></p>

<p>验证：
将“/HelloJni/jni/hello-jni.c”中的字符串“Hello from JNI !”如改为“Hello JNI from test!”，运行后在模拟器上输出的字符串改变即说明配置成功。<br /> 
<img src="/images/evoup/android_cdt_ndk/23.png" alt="Alt text" /></p>

<hr />

<h3 id="section">参考文章</h3>
<p><a href="http://my.oschina.net/owen123456/blog/85658">《Android NDK 安装与配置》</a></p>

<p><a href="http://www.cnblogs.com/hibraincol/archive/2011/05/30/2063847.html">《Android: NDK编程入门笔记》</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Win7上Android模拟器上安装apk软件]]></title>
    <link href="http://evoupsight.com/blog/2014/01/20/win7-install-apk-on-android-emulator/"/>
    <updated>2014-01-20T14:56:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/01/20/win7-install-apk-on-android-emulator</id>
    <content type="html"><![CDATA[<h3 id="section">前提</h3>
<p>在android模拟器上安装apk文件（android安装包）很简单,要求2个前提：</p>

<pre><code>    1）已经安装好了ADK（android sdk）
    
    2）配置好virtual device
</code></pre>

<!-- more -->

<h3 id="section-1">准备工作</h3>
<p>假设您已经安装好了ADK，运行Eclipse选择Window菜单： </p>

<p><img src="/images/evoup/android_emulator_install_apk_first.png" alt="Alt text" /></p>

<p>选择下方的Android Virtual Device Manager-&gt;new,我们创建一个android2.2的通用虚拟设备，屏幕选最小的我这里方便截图（一般会选择3.7WVGA,后期根据自己的需要可以做任意选择），然后取名这个模拟器为testAVD。</p>

<p><img src="/images/evoup/android_emulator_create_new_one.png" alt="Alt text" /></p>

<p>点击OK完成，然后选择testAVD并Start启动模拟器，然后选择launch。第一次启动很慢，至于到底需要多少时间取决于机器的性能。</p>

<p><img src="/images/evoup/android_emulator_starting.png" alt="Alt text" /></p>

<p>这样就算进去了</p>

<p><img src="/images/evoup/android_emulator_entered.png" alt="Alt text" /></p>

<h3 id="apk">安装apk</h3>
<p>进入ADK的platform_tools目录下，运行<code> adb install apk文件 </code>就可以完成安装。</p>

<p>以安装微信安卓版本为例，假设我下载到了C:\weixin510android360.apk</p>

<p><img src="/images/evoup/android_emulator_entered.png" alt="Alt text" /></p>

<p>我这里比较慢，可能是因为选择的模拟器内存参数没有调大导致的。</p>

<p><img src="/images/evoup/android_emulator_install_apk.png" alt="Alt text" /></p>

<p>等待安装完成吧</p>

<p><img src="/images/evoup/android_emulator_install_apk_done.png" alt="Alt text" /></p>

<p><img src="/images/evoup/android_emulator_install_apk_done2.png" alt="Alt text" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android webview helloworld分析]]></title>
    <link href="http://evoupsight.com/blog/2014/01/19/android-webview-helloworld/"/>
    <updated>2014-01-19T17:05:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/01/19/android-webview-helloworld</id>
    <content type="html"><![CDATA[<h3 id="section">加载示例代码</h3>
<p>官方示例代码
https://code.google.com/p/apps-for-android/source/browse/#git%2FSamples%2FWebViewDemo</p>

<p>运行Eclipse(本文提到的eclipse版本是Eclipse ide for java developer KEPLER)，选择File-&gt;Import…-&gt;Android-&gt;Existing Android Code Into Workspace,Next，在Root Directory中选择解压的目录下的Samples文件夹下的WebViewDemo。</p>

<p>如果直接run，会出现错误<code> Project has no project.properties file! Edit the project properties to set one.</code>。
这时只要右键项目属性properties -&gt; android -&gt; Project Build Target 把里面的Androidx.x改为对应的google APIs版本。google APIs是android apis的超集，Android只是其中一个用于移动设备的OS，可以有限的调用一些google api。</p>

<h3 id="app">分析app部分代码</h3>
<p>请看示例java代码
<!-- more --></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>WebViewDemo.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">webviewdemo</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Handler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.Log</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.webkit.JsResult</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.webkit.WebChromeClient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.webkit.WebSettings</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.webkit.WebView</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Demonstrates how to embed a WebView in your activity. Also demonstrates how</span>
</span><span class='line'><span class="cm"> * to have javascript in the WebView call into the activity, and how the activity </span>
</span><span class='line'><span class="cm"> * can invoke javascript.</span>
</span><span class='line'><span class="cm"> * &amp;lt;p&amp;gt;</span>
</span><span class='line'><span class="cm"> * In this example, clicking on the android in the WebView will result in a call into</span>
</span><span class='line'><span class="cm"> * the activities code in {@link DemoJavaScriptInterface#clickOnAndroid()}. This code</span>
</span><span class='line'><span class="cm"> * will turn around and invoke javascript using the {@link WebView#loadUrl(String)}</span>
</span><span class='line'><span class="cm"> * method.</span>
</span><span class='line'><span class="cm"> * &amp;lt;p&amp;gt;</span>
</span><span class='line'><span class="cm"> * Obviously all of this could have been accomplished without calling into the activity</span>
</span><span class='line'><span class="cm"> * and then back into javascript, but this code is intended to show how to set up the </span>
</span><span class='line'><span class="cm"> * code paths for this sort of communication.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebViewDemo</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOG_TAG</span> <span class="o">=</span> <span class="s">&quot;WebViewDemo&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">WebView</span> <span class="n">mWebView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Handler</span> <span class="n">mHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">icicle</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">icicle</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">main</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mWebView</span> <span class="o">=</span> <span class="o">(</span><span class="n">WebView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">webview</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">WebSettings</span> <span class="n">webSettings</span> <span class="o">=</span> <span class="n">mWebView</span><span class="o">.</span><span class="na">getSettings</span><span class="o">();</span>
</span><span class='line'>    <span class="n">webSettings</span><span class="o">.</span><span class="na">setSavePassword</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="n">webSettings</span><span class="o">.</span><span class="na">setSaveFormData</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="n">webSettings</span><span class="o">.</span><span class="na">setJavaScriptEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="n">webSettings</span><span class="o">.</span><span class="na">setSupportZoom</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mWebView</span><span class="o">.</span><span class="na">setWebChromeClient</span><span class="o">(</span><span class="k">new</span> <span class="n">MyWebChromeClient</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mWebView</span><span class="o">.</span><span class="na">addJavascriptInterface</span><span class="o">(</span><span class="k">new</span> <span class="n">DemoJavaScriptInterface</span><span class="o">(),</span> <span class="s">&quot;demo&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mWebView</span><span class="o">.</span><span class="na">loadUrl</span><span class="o">(</span><span class="s">&quot;file:///android_asset/demo.html&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">final</span> <span class="kd">class</span> <span class="nc">DemoJavaScriptInterface</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">DemoJavaScriptInterface</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * This is not called on the UI thread. Post a runnable to invoke</span>
</span><span class='line'><span class="cm">     * loadUrl on the UI thread.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clickOnAndroid</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mHandler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mWebView</span><span class="o">.</span><span class="na">loadUrl</span><span class="o">(</span><span class="s">&quot;javascript:wave()&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Provides a hook for calling &quot;alert&quot; from javascript. Useful for</span>
</span><span class='line'><span class="cm"> * debugging your javascript.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">final</span> <span class="kd">class</span> <span class="nc">MyWebChromeClient</span> <span class="kd">extends</span> <span class="n">WebChromeClient</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onJsAlert</span><span class="o">(</span><span class="n">WebView</span> <span class="n">view</span><span class="o">,</span> <span class="n">String</span> <span class="n">url</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">,</span> <span class="n">JsResult</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="na">confirm</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>首先需要搞懂Activity这个核心概念，基本上是进行android的活动对象事件调度的类，我们看一下android api中的activity的生命周期：</p>

<p><img src="/images/evoup/activity_lifecycle.png" alt="Alt text" /></p>

<p>它有以下7个方法可以被重写：</p>

<p><code>java
public class Activity extends ApplicationContext {  
       protected void onCreate(Bundle savedInstanceState);  
       protected void onStart();     
       protected void onRestart();  
       protected void onResume();  
       protected void onPause();   
       protected void onStop();  
       protected void onDestroy();  
   }  
</code></p>

<p>也就是onCreate创建，onStart开始、onRestart重启、onResume恢复、onPause暂停、onStop停止和onDestory销毁时，这些方法都能够被重写，不难看出这些方法和Activity生命周期是息息相关的。
本例子就只要重写onCreate即可，看代码：</p>

<p>```java
    @Override
    public void onCreate(Bundle icicle) {
        super.onCreate(icicle);
        setContentView(R.layout.main);
        mWebView = (WebView) findViewById(R.id.webview);</p>

<pre><code>    WebSettings webSettings = mWebView.getSettings();
    webSettings.setSavePassword(false);
	
    webSettings.setSaveFormData(false);
    webSettings.setJavaScriptEnabled(true);
    webSettings.setSupportZoom(false);

    mWebView.setWebChromeClient(new MyWebChromeClient());

    mWebView.addJavascriptInterface(new DemoJavaScriptInterface(), "demo");

    mWebView.loadUrl("file:///android_asset/demo.html");
} ```
</code></pre>

<p>其中R.java这个为android的资源类，工程自动会维护这里暂时不用去考虑。首先是调用超类的onCreate方法来必要的初始化。然后设置试图为资源类的main。再来从资源类的webview中找到Id返回WebView类型的对象mWebView这个变量中。然后是WebSettings类对象webSettings的参数设置，这里setSavePassword和setSaveFormData代表不要保存表单控件的数据和密码，setJavaScriptEnabled设置为允许webview调用JavaScript，setSupportZoom设置为不允许缩放。由于要用到JavaScript，所以需要调用setWebChromeClient。</p>

<p>我们需要仔细看下addJavascriptInterface这个函数的说明</p>

<blockquote>
  <p>Injects the supplied Java object into this WebView. The object is injected into the JavaScript context of the main frame, using the supplied name. This allows the Java object’s methods to be accessed from JavaScript. For applications targeted to API level JELLY_BEAN_MR1 and above, only public methods that are annotated with JavascriptInterface can be accessed from JavaScript. For applications targeted to API level JELLY_BEAN or below, all public methods (including the inherited ones) can be accessed, see the important security note below for implications.</p>
</blockquote>

<p>我给翻译了下：它注入提供的Java对象到这个WebView。对象使用提供的名字注入JavaScript上下文的主要框架。这允许从JavaScript访问Java对象的方法。针对应用程序API级别在JELLY_BEAN_MR1以上的,只有JavascriptInterface的公共方法与注释可以从JavaScript访问。针对应用程序API级别或低于JELLY_BEAN的,所有公共方法(包括继承的)可以访问,参见下面重要的安全注意影响。</p>

<p>再看下2个参数，前一个为注入webview的Java对象（DemoJavaScriptInterface），后一个为暴露给JavaScript的对象名字（demo），本例中除了webview把点击消息传递给html，html中的JavaScript也要和webview交互，在哪里交互？伟大的google为我们想到JavaScript的顶层window对象，在下面动态创建了一个子对象，这里就是第二个参数demo，这个等等到了html再讲。</p>

<p>马上来看第一个参数的实现</p>

<p>```java
    final class DemoJavaScriptInterface {</p>

<pre><code>    DemoJavaScriptInterface() {
    }

    /**
     * This is not called on the UI thread. Post a runnable to invoke
     * loadUrl on the UI thread.
     */
    public void clickOnAndroid() {
        mHandler.post(new Runnable() {
            public void run() {
                mWebView.loadUrl("javascript:wave()");
            }
        });

    }
} ```
</code></pre>

<p>直接一个构造函数什么都不做，然后直接用句柄提交实现了Runnable类的引用，再深入Runnable探究下</p>

<blockquote>
  <p>The Runnable interface should be implemented by any class whose instances are intended to be executed by a thread. The class must define a method of no arguments called run. </p>
</blockquote>

<p>Runnable就一个方法，run给实现了就行，这里是直接调用demo.html页面里的JavaScript的wave方法。</p>

<p>看下一段代码</p>

<p><code>java
    /**
     * Provides a hook for calling "alert" from javascript. Useful for
     * debugging your javascript.
     */
    final class MyWebChromeClient extends WebChromeClient {
        @Override
        public boolean onJsAlert(WebView view, String url, String message, JsResult result) {
            Log.d(LOG_TAG, message);
            result.confirm();
            return true;
        }
    }
</code></p>

<p>这里是对刚才指定的WebChromeClient对象MyWebChromeClient，进行onJsAlert的重写，可以看到其实就是在打印日志。</p>

<hr />

<h3 id="html">分析html部分代码</h3>
<p>app代码完了，再来看html
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>demo.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>	<span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&quot;javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>	    <span class="cm">/* This function is invoked by the activity */</span>
</span><span class='line'>		<span class="kd">function</span> <span class="nx">wave</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>		    <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;1&quot;</span><span class="p">);</span>
</span><span class='line'>			<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;droid&quot;</span><span class="p">).</span><span class="nx">src</span><span class="o">=</span><span class="s2">&quot;android_waving.png&quot;</span><span class="p">;</span>
</span><span class='line'>			<span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="nt">&lt;/script&gt;</span>
</span><span class='line'>	<span class="nt">&lt;body&gt;</span>
</span><span class='line'>	    <span class="c">&lt;!-- Calls into the javascript interface for the activity --&gt;</span>
</span><span class='line'>	    <span class="nt">&lt;a</span> <span class="na">onclick=</span><span class="s">&quot;window.demo.clickOnAndroid()&quot;</span><span class="nt">&gt;&lt;div</span> <span class="na">style=</span><span class="s">&quot;width:80px;</span>
</span><span class='line'><span class="s">			margin:0px auto;</span>
</span><span class='line'><span class="s">			padding:10px;</span>
</span><span class='line'><span class="s">			text-align:center;</span>
</span><span class='line'><span class="s">			border:2px solid #202020;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>				<span class="nt">&lt;img</span> <span class="na">id=</span><span class="s">&quot;droid&quot;</span> <span class="na">src=</span><span class="s">&quot;android_normal.png&quot;</span> <span class="nt">/&gt;&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'>				Click me!
</span><span class='line'>		<span class="nt">&lt;/div&gt;&lt;/a&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>注意看window.demo.clickOnAndroid这个JavaScript方法，刚刚我们在app代码里用addJavascriptInterface方法生成好了一个window.demo对象，就是通过这个对象，就可以调用app内置方法来实现网页的跳转。</p>

<h4 id="section-1">小结</h4>
<p>到此程序分析完毕,整个交互过程还是比较容易理解，就是先继承一个Activity类，关联好html页面，实现onCreate方法，在其中指定好app方法以及为javascript暴露对象名，然后进入html调用暴露的对象名及其方法进行跳转。</p>

<hr />

<p>最后，打开应用程序，它看起来应该像这样:)</p>

<p><img src="/images/evoup/android_webview_sample.png" alt="Alt text" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Win7 Android开发环境搭建之一(SDK+ADT)]]></title>
    <link href="http://evoupsight.com/blog/2014/01/17/android-adt-development-deloy/"/>
    <updated>2014-01-17T17:48:00+08:00</updated>
    <id>http://evoupsight.com/blog/2014/01/17/android-adt-development-deloy</id>
    <content type="html"><![CDATA[<p>最近有个HTML5的项目需要部署在android里，先研究下基本功，安装时还是遇到一些问题，如有的文章过时了，自己连搜索测试带整理写了一片文章备查。</p>

<!-- more -->

<p>（2014-09-24 嫌adt配置麻烦的可以直接到android开发者官网下载android-bundle <a href="http://developer.android.com/sdk/index.html#download">点击下载</a>）</p>

<h3 id="jdk">一、安装JDK</h3>
<p>安装JDK，我这里的windows7平台，先下载jdk7，然后安装，我的安装路径为C:\Program Files\Java\jdk1.7.0_25\。
安装完成后设置环境变量
开始-&gt;搜索程序和文件输入环境变量-&gt;编辑系统环境变量-&gt;添加以下环境变量：</p>

<p><code>sh
JAVA_HOME值为：C:\Program Files\Java\jdk1.7.0_25\
CLASSPATH值为：.;%JAVA_HOME%\lib\tools.jar;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\bin;
PATH值为：追加%JAVA_HOME%\bin;
</code></p>

<h3 id="eclipse">二、安装Eclipse</h3>
<p>可以直接去www.eclipse.org下载，64位Windows平台下的下载地址：</p>

<p>http://mirror.bit.edu.cn/eclipse/technology/epp/downloads/release/kepler/SR1/eclipse-cpp-kepler-SR1-win32-x86_64.zip</p>

<p>下载完成解压即可使用。见下图：
<img src="/images/evoup/eclipse_dir.png" alt="Alt text" /></p>

<h3 id="sdk">三、安装SDK</h3>
<p>首先去下载SDK,这个是等等用来和eclipse的adt插件关联的。</p>

<p>下载地址如下：
  http://dl.google.com/android/adt/adt-bundle-windows-x86_64-20131030.zip</p>

<p>下载完成后我把它解压到C:\android\adt-bundle-windows-x86<em>64-20131030,运行adt-bundle-windows-x86</em>64-20131030下的SDK Manager.exe，勾选几个必要的API版本，Android4.2.2(API17)还有Android2.2(API8)，然后点击Install 11 package开始安装</p>

<p><img src="/images/evoup/adt_wait.png" alt="Alt text" /></p>

<p>如果速度慢，可以尝试用goagent代理进行加速,这里就提一下而以。</p>

<p><img src="/images/evoup/adt_use_proxy.png" alt="Alt text" /></p>

<p>等待下载完成</p>

<p><img src="/images/evoup/adt_done.png" alt="Alt text" /></p>

<h3 id="sdk-1">SDK配置</h3>
<p>接着把tools的路径C:\android\adt-bundle-windows-x86_64-20131030\sdk\tools追加到环境变量PATH中去。
要测试安装sdk是否成功，只需要运行cmd，然后输入</p>

<p><code>sh
android -h
</code></p>

<p>观察是否有输出正常信息，见下图：
<img src="/images/evoup/adt_installed.png" alt="Alt text" /></p>

<p>有其他教程说要设置SDK Location变量，我配置时发现其实不需要，估计是老版本了。</p>

<h3 id="eclipseadt-package">Eclipse的ADT Package安装</h3>
<p>打开Eclipse，指定好工程的位置</p>

<p><img src="/images/evoup/adt_project_dir.png" alt="Alt text" /></p>

<p>选择 Help &lt; Install New Software 菜单。点击右上角的 Add 按钮，弹出 Add Repository 对话框，在 Name 一栏填写：“ADT Plugin”，在 Location 一栏填写：https://dl-ssl.google.com/android/eclipse/</p>

<p>点击 OK。如果不能获取插件信息，就把 https 换成 http 试试。</p>

<p>然后整个勾选Developer Tools（最小安装的话至少要选择其下Android DDMS和Android Development Tools），点击Next，一路接受条款，等待安装插件完毕,中途可能出现安装警告，确认即可。</p>

<p><img src="/images/evoup/eclipse_adt_warning.png" alt="Alt text" /></p>

<p>之后重启Eclipse。</p>

<h3 id="eclipseadt">Eclipse的ADT插件的配置</h3>
<p>安装完ADT插件并重启好Eclipse后，点击 Window &lt; Preferences 菜单，点击左侧菜单中的 Android，再点击右侧 Browse…，选择第3步中Android SDK的安装目录，设置完成后，点击 OK。</p>

<p><img src="/images/evoup/eclipse_adt_config.png" alt="Alt text" /></p>

<p>这样 Android 开发环境就搭建好了。</p>

]]></content>
  </entry>
  
</feed>
