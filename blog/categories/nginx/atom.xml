<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nginx | Evoup`s Blog]]></title>
  <link href="http://evoupsight.com/blog/categories/nginx/atom.xml" rel="self"/>
  <link href="http://evoupsight.com/"/>
  <updated>2013-10-30T17:39:20+08:00</updated>
  <id>http://evoupsight.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[配置nginx支持rrdcgi]]></title>
    <link href="http://evoupsight.com/blog/2013/10/25/nginx-with-rrdcgi/"/>
    <updated>2013-10-25T17:27:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/10/25/nginx-with-rrdcgi</id>
    <content type="html"><![CDATA[<p>开始在web界面上加载监控图表了，用rrdrool graph生成图，但是发现只能够生成。于是想当然地试了一下rrdcgi，本以为能够出图，结果还是创建图片，html来加载图片。最后发现ganglia的图表中居然也是先提取在临时目录生成好的图片，然后用php来生成头，最后再删除图片。不过顺便把nginx下配置CGI程序的知识学会了，权且记一笔。</p>

<!-- more -->


<h3>RRDCGI的使用</h3>

<p>首先是编写graph.cgi
```bash</p>

<h1>!/usr/local/bin/rrdcgi</h1>

<p> &lt;RRD::GRAPH</p>

<pre><code>  /services/cgi-bin/load.png
  --imginfo '&lt;IMG SRC=/rrdgraph/%s WIDTH=%lu HEIGHT=%lu &gt;'
  --lazy --title="load"
  --start 1382666836 --end 1382677047
  --width 705 --height 245
  --alt-autoscale
      DEF:load=/services/rrds/yin-arch_ac101eb8/load.rrd:load:AVERAGE
      HRULE:1#ff0000:"warning value"
  AREA:load#3d3d3d:load&gt;
</code></pre>

<p><code>
语法基本和rrdgraph的差不多，没什么好说的，这样等等会生成出来一个html代码叫做
</code>html
<IMG SRC=/rrdgraph/load.png WIDTH=786 HEIGHT=324 >
```
首先在webroot下创建一个软连接rrdgraph，成的图片的src所指向rrdgraph文件夹，其实是个软连接，指向路径为/services/cgi-bin/
这么做是为了在nginx配置方便。</p>

<p>要怎么在shell中直接验证能出图呢？
```bash
sudo rrdcgi graph.cgi &lt; /dev/null
(offline mode: enter name=value pairs on standard input)
Content-Type: text/html
Content-Length: 53</p>

<p> <IMG SRC=/rrdgraph/load.png WIDTH=786 HEIGHT=324 >
```
很明显这样子是得到了load.png这个图片文件。然后把这个cgi文件移到/services/cgi-bin/目录下待机。</p>

<h3>nginx的对rrdcgi支持的配置</h3>

<p>首先需要安装好perl，还需要用到以下库：（以下版本可能过旧，直接到CPAN的网站搜索安装）
```bash
wget <a href="http://www.cpan.org/modules/by-module/FCGI/FCGI-0.67.tar.gz">http://www.cpan.org/modules/by-module/FCGI/FCGI-0.67.tar.gz</a>
tar -zxf FCGI-0.67.tar.gz
cd FCGI-0.67
perl Makefile.PL
make &amp;&amp; make install
cd ..</p>

<p>wget <a href="http://search.cpan.org/CPAN/authors/id/G/GB/GBJK/FCGI-ProcManager-0.18.tar.gz">http://search.cpan.org/CPAN/authors/id/G/GB/GBJK/FCGI-ProcManager-0.18.tar.gz</a>
tar -zxf FCGI-ProcManager-0.18.tar.gz
cd FCGI-ProcManager-0.18
perl Makefile.PL
make &amp;&amp; make install
cd ..</p>

<p>wget <a href="http://search.cpan.org/CPAN/authors/id/I/IN/INGY/IO-All-0.39.tar.gz">http://search.cpan.org/CPAN/authors/id/I/IN/INGY/IO-All-0.39.tar.gz</a>
tar zxf IO-All-0.39.tar.gz
cd IO-All-0.39
perl Makefile.PL
make &amp;&amp; make install
<code>
安装 nginx-fcgi 脚本：
</code>bash
wget <a href="http://hily.me/blog/wp-content/uploads/2010/01/nginx-fcgi.txt">http://hily.me/blog/wp-content/uploads/2010/01/nginx-fcgi.txt</a></p>

<p>mv nginx-fcgi.txt /usr/sbin/nginx-fcgi</p>

<p>chmod +x /usr/sbin/nginx-fcgi
<code>
如果不用 sudo 方式运行 nginx-fcgi，请注释掉 nginx-fcgi 脚本中的：
</code>bash
if ( $> == “0″ ) {
print “\n\tERROR\tRunning as a root!\n”;
print “\tSuggested not to do so !!!\n\n”;
exit 1;
}
<code>
启动 nginx-fcgi：
</code>bash
sudo nginx-fcgi -l /var/log/nginx/nginx-fcgi.log -pid /var/run/nginx-fcgi.pid -S /var/run/nginx-fcgi.sock
```</p>

<p>注意一定要为 socket 添加 nginx 帐户的权限，否则 cgi 会执行失败。
新建 nginx-fcgi 脚本指令配置，直接从 fastcgi_params 复制模板：
<code>bash
cp /etc/nginx/fastcgi_params /etc/nginx/nginx_fcgi_params
</code></p>

<p>去除尾部的：
```bash</p>

<h1>PHP only, required if PHP was built with –enable-force-cgi-redirect</h1>

<p>fastcgi_param  REDIRECT_STATUS    200;
```</p>

<p>最后的cgi站点配置：
```bash</p>

<pre><code>    location / {
        root   /webroot;
        index  index.html index.htm;
    }

    location ~ ^/cgi-bin/.*\.cgi$
    {
        fastcgi_index  index.cgi;
        fastcgi_param  SCRIPT_FILENAME    /services$fastcgi_script_name;
        include        nginx_fcgi_params;
        fastcgi_read_timeout    5m;
        fastcgi_pass   unix:/var/run/nginx-fcgi.sock;
    }
</code></pre>

<p>```
重启nginx，访问地址<a href="http://192.168.216.145/cgi-bin/graph.cgi">http://192.168.216.145/cgi-bin/graph.cgi</a></p>

<p>看到已经有图了
<img src="/images/evoup/rrdtool_load_graph2.png" alt="Alt text" /></p>

<h3>参考链接</h3>

<p><a href="http://oss.oetiker.ch/rrdtool/doc/rrdcgi.en.html">http://oss.oetiker.ch/rrdtool/doc/rrdcgi.en.html</a></p>

<p><a href="http://wiki.qpsmtpd.org/doku.php?id=resources:statistics:rrdcgi-sample">http://wiki.qpsmtpd.org/doku.php?id=resources:statistics:rrdcgi-sample</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx反向代理mongodb的web页面]]></title>
    <link href="http://evoupsight.com/blog/2013/01/05/nginx-reverse-proxy-mongodb/"/>
    <updated>2013-01-05T15:32:00+08:00</updated>
    <id>http://evoupsight.com/blog/2013/01/05/nginx-reverse-proxy-mongodb</id>
    <content type="html"><![CDATA[<p>需要配置nginx来反向代理出mongodb的web页面，参考这篇文章</p>

<!-- more -->


<p><a href="http://serverfault.com/questions/418212/nginx-reverse-proxy-to-mongodb-rest-interface">http://serverfault.com/questions/418212/nginx-reverse-proxy-to-mongodb-rest-interface</a></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nginx配置文件 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&amp;hellip;
</span><span class='line'>location / <span class="o">{</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;   access_log /var/log/access.log access1;
</span><span class='line'>
</span><span class='line'>   proxy_redirect     off;
</span><span class='line'>
</span><span class='line'>   proxy_connect_timeout      90;
</span><span class='line'>
</span><span class='line'>   proxy_send_timeout         90;
</span><span class='line'>
</span><span class='line'>   proxy_read_timeout         90;
</span><span class='line'>
</span><span class='line'>   proxy_buffer_size          4k;
</span><span class='line'>
</span><span class='line'>   proxy_buffers              432k;
</span><span class='line'>
</span><span class='line'>   proxy_busy_buffers_size    64k;
</span><span class='line'>
</span><span class='line'>   proxy_temp_file_write_size 64k;
</span><span class='line'>
</span><span class='line'>   add_header Cache-Control no-cache;
</span><span class='line'>
</span><span class='line'>   proxy_pass http://172.16.30.184:28017;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;   <span class="o">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span><span class='line'>&amp;hellip;
</span></code></pre></td></tr></table></div></figure></notextile></div>
不足：只能从根目录进行代理,如需更加完善，需要装编译nginx的时候， &mdash;with-http_stub_status_module</p>

<p>然后参考《nginx反代加替换傻瓜教程》进行配置</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[遭遇nginx upstream sent too big header]]></title>
    <link href="http://evoupsight.com/blog/2011/09/11/nginx-upstream-sent-too-big-header/"/>
    <updated>2011-09-11T23:20:00+08:00</updated>
    <id>http://evoupsight.com/blog/2011/09/11/nginx-upstream-sent-too-big-header</id>
    <content type="html"><![CDATA[<p>遭遇nginx upstream sent too big header while reading response header from upstream</p>

<p>这个问题会导致输出502头信息。</p>

<p>nginx配置中要加以下2行
<code>bash
fastcgi_buffer_size 128k;
fastcgi_buffers 8 128k;
</code></p>

<p>一加果然就不报错了！原因是nginx处理header太大了，还有一个原因就是我写程序的时候发header太多了，只能发一次，程序还要调整啊。</p>
]]></content>
  </entry>
  
</feed>
